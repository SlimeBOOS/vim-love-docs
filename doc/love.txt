*love.txt*                          Documentation for the LOVE game framework.	

                       _       o__o __      __ ______ ~
                      | |     / __ \\ \    / //  ____\~
                      | |    | |  | |\ \  / / | |__   ~
                      | |    | |  | | \ \/ /  |  __|  ~
                      | |____| |__| |  \  /   | |____ ~
                      \______|\____/    \/    \______/~

                   The complete solution for Vim with LOVE.
                   Includes highlighting and documentation.


==============================================================================
CONTENT                                                         *love-content*

  1. About .................................. |love-about|
  2. modules ................................ |love-modules|
    2.1. love ............................... |love.love|
      2.1.1. functions ...................... |love-functions|
        2.1.1.1. getVersion ................. |love.getVersion|
      2.1.2. types .......................... |love-types|
        2.1.2.1. Data ....................... |love-Data|
          2.1.2.1.1. getPointer ............. |Data:getPointer|
          2.1.2.1.2. getSize ................ |Data:getSize|
          2.1.2.1.3. getString .............. |Data:getString|
        2.1.2.2. Drawable ................... |love-Drawable|
        2.1.2.3. Object ..................... |love-Object|
          2.1.2.3.1. type ................... |Object:type|
          2.1.2.3.2. typeOf ................. |Object:typeOf|
    2.2. audio .............................. |love.audio|
      2.2.1. functions ...................... |love.audio-functions|
        2.2.1.1. getDistanceModel ........... |love.audio.getDistanceModel|
        2.2.1.2. getDopplerScale ............ |love.audio.getDopplerScale|
        2.2.1.3. getSourceCount ............. |love.audio.getSourceCount|
        2.2.1.4. getOrientation ............. |love.audio.getOrientation|
        2.2.1.5. getPosition ................ |love.audio.getPosition|
        2.2.1.6. getVelocity ................ |love.audio.getVelocity|
        2.2.1.7. getVolume .................. |love.audio.getVolume|
        2.2.1.8. newSource .................. |love.audio.newSource|
        2.2.1.9. pause ...................... |love.audio.pause|
        2.2.1.10. play ...................... |love.audio.play|
        2.2.1.11. resume .................... |love.audio.resume|
        2.2.1.12. rewind .................... |love.audio.rewind|
        2.2.1.13. setDistanceModel .......... |love.audio.setDistanceModel|
        2.2.1.14. setDopplerScale ........... |love.audio.setDopplerScale|
        2.2.1.15. setOrientation ............ |love.audio.setOrientation|
        2.2.1.16. setPosition ............... |love.audio.setPosition|
        2.2.1.17. setVelocity ............... |love.audio.setVelocity|
        2.2.1.18. setVolume ................. |love.audio.setVolume|
        2.2.1.19. stop ...................... |love.audio.stop|
      2.2.2. types .......................... |love.audio-types|
        2.2.2.1. Source ..................... |love-Source|
          2.2.2.1.1. clone .................. |Source:clone|
          2.2.2.1.2. getAttenuationDistances  |Source:getAttenuationDistances|
          2.2.2.1.3. getChannels ............ |Source:getChannels|
          2.2.2.1.4. getCone ................ |Source:getCone|
          2.2.2.1.5. getDirection ........... |Source:getDirection|
          2.2.2.1.6. getDuration ............ |Source:getDuration|
          2.2.2.1.7. getPitch ............... |Source:getPitch|
          2.2.2.1.8. getPosition ............ |Source:getPosition|
          2.2.2.1.9. getRolloff ............. |Source:getRolloff|
          2.2.2.1.10. getType ............... |Source:getType|
          2.2.2.1.11. getVelocity ........... |Source:getVelocity|
          2.2.2.1.12. getVolume ............. |Source:getVolume|
          2.2.2.1.13. getVolumeLimits ....... |Source:getVolumeLimits|
          2.2.2.1.14. isLooping ............. |Source:isLooping|
          2.2.2.1.15. isPaused .............. |Source:isPaused|
          2.2.2.1.16. isPlaying ............. |Source:isPlaying|
          2.2.2.1.17. isStopped ............. |Source:isStopped|
          2.2.2.1.18. pause ................. |Source:pause|
          2.2.2.1.19. play .................. |Source:play|
          2.2.2.1.20. resume ................ |Source:resume|
          2.2.2.1.21. rewind ................ |Source:rewind|
          2.2.2.1.22. seek .................. |Source:seek|
          2.2.2.1.23. setDirection .......... |Source:setDirection|
          2.2.2.1.24. setAttenuationDistances |Source:setAttenuationDistances|
          2.2.2.1.25. setCone ............... |Source:setCone|
          2.2.2.1.26. setLooping ............ |Source:setLooping|
          2.2.2.1.27. setPitch .............. |Source:setPitch|
          2.2.2.1.28. setPosition ........... |Source:setPosition|
          2.2.2.1.29. setRolloff ............ |Source:setRolloff|
          2.2.2.1.30. setVelocity ........... |Source:setVelocity|
          2.2.2.1.31. setVolume ............. |Source:setVolume|
          2.2.2.1.32. setVolumeLimits ....... |Source:setVolumeLimits|
          2.2.2.1.33. stop .................. |Source:stop|
          2.2.2.1.34. tell .................. |Source:tell|
      2.2.3. enums .......................... |love.audio-enums|
        2.2.3.1. DistanceModel .............. |love-DistanceModel|
        2.2.3.2. SourceType ................. |love-SourceType|
        2.2.3.3. TimeUnit ................... |love-TimeUnit|
    2.3. event .............................. |love.event|
      2.3.1. functions ...................... |love.event-functions|
        2.3.1.1. clear ...................... |love.event.clear|
        2.3.1.2. poll ....................... |love.event.poll|
        2.3.1.3. pump ....................... |love.event.pump|
        2.3.1.4. push ....................... |love.event.push|
        2.3.1.5. quit ....................... |love.event.quit|
        2.3.1.6. wait ....................... |love.event.wait|
      2.3.2. enums .......................... |love.event-enums|
        2.3.2.1. Event ...................... |love-Event|
    2.4. filesystem ......................... |love.filesystem|
      2.4.1. functions ...................... |love.filesystem-functions|
        2.4.1.1. append ..................... |love.filesystem.append|
        2.4.1.2. areSymlinksEnabled ......... |love.filesystem.areSymlinksEnabled|
        2.4.1.3. createDirectory ............ |love.filesystem.createDirectory|
        2.4.1.4. exists ..................... |love.filesystem.exists|
        2.4.1.5. getAppdataDirectory ........ |love.filesystem.getAppdataDirectory|
        2.4.1.6. getDirectoryItems .......... |love.filesystem.getDirectoryItems|
        2.4.1.7. getIdentity ................ |love.filesystem.getIdentity|
        2.4.1.8. getLastModified ............ |love.filesystem.getLastModified|
        2.4.1.9. getRealDirectory ........... |love.filesystem.getRealDirectory|
        2.4.1.10. getRequirePath ............ |love.filesystem.getRequirePath|
        2.4.1.11. getSaveDirectory .......... |love.filesystem.getSaveDirectory|
        2.4.1.12. getSize ................... |love.filesystem.getSize|
        2.4.1.13. getSourceBaseDirectory .... |love.filesystem.getSourceBaseDirectory|
        2.4.1.14. getUserDirectory .......... |love.filesystem.getUserDirectory|
        2.4.1.15. getWorkingDirectory ....... |love.filesystem.getWorkingDirectory|
        2.4.1.16. isDirectory ............... |love.filesystem.isDirectory|
        2.4.1.17. isFile .................... |love.filesystem.isFile|
        2.4.1.18. isFused ................... |love.filesystem.isFused|
        2.4.1.19. isSymlink ................. |love.filesystem.isSymlink|
        2.4.1.20. lines ..................... |love.filesystem.lines|
        2.4.1.21. load ...................... |love.filesystem.load|
        2.4.1.22. mount ..................... |love.filesystem.mount|
        2.4.1.23. newFile ................... |love.filesystem.newFile|
        2.4.1.24. newFileData ............... |love.filesystem.newFileData|
        2.4.1.25. read ...................... |love.filesystem.read|
        2.4.1.26. remove .................... |love.filesystem.remove|
        2.4.1.27. setIdentity ............... |love.filesystem.setIdentity|
        2.4.1.28. setRequirePath ............ |love.filesystem.setRequirePath|
        2.4.1.29. setSource ................. |love.filesystem.setSource|
        2.4.1.30. setSymlinksEnabled ........ |love.filesystem.setSymlinksEnabled|
        2.4.1.31. unmount ................... |love.filesystem.unmount|
        2.4.1.32. write ..................... |love.filesystem.write|
      2.4.2. types .......................... |love.filesystem-types|
        2.4.2.1. File ....................... |love-File|
          2.4.2.1.1. close .................. |File:close|
          2.4.2.1.2. flush .................. |File:flush|
          2.4.2.1.3. getBuffer .............. |File:getBuffer|
          2.4.2.1.4. getFilename ............ |File:getFilename|
          2.4.2.1.5. getMode ................ |File:getMode|
          2.4.2.1.6. getSize ................ |File:getSize|
          2.4.2.1.7. isEOF .................. |File:isEOF|
          2.4.2.1.8. isOpen ................. |File:isOpen|
          2.4.2.1.9. lines .................. |File:lines|
          2.4.2.1.10. open .................. |File:open|
          2.4.2.1.11. read .................. |File:read|
          2.4.2.1.12. seek .................. |File:seek|
          2.4.2.1.13. setBuffer ............. |File:setBuffer|
          2.4.2.1.14. write ................. |File:write|
        2.4.2.2. FileData ................... |love-FileData|
          2.4.2.2.1. getExtension ........... |FileData:getExtension|
          2.4.2.2.2. getFilename ............ |FileData:getFilename|
      2.4.3. enums .......................... |love.filesystem-enums|
        2.4.3.1. BufferMode ................. |love-BufferMode|
        2.4.3.2. FileDecoder ................ |love-FileDecoder|
        2.4.3.3. FileMode ................... |love-FileMode|
    2.5. graphics ........................... |love.graphics|
      2.5.1. functions ...................... |love.graphics-functions|
        2.5.1.1. arc ........................ |love.graphics.arc|
        2.5.1.2. circle ..................... |love.graphics.circle|
        2.5.1.3. clear ...................... |love.graphics.clear|
        2.5.1.4. discard .................... |love.graphics.discard|
        2.5.1.5. draw ....................... |love.graphics.draw|
        2.5.1.6. ellipse .................... |love.graphics.ellipse|
        2.5.1.7. getBackgroundColor ......... |love.graphics.getBackgroundColor|
        2.5.1.8. getBlendMode ............... |love.graphics.getBlendMode|
        2.5.1.9. getCanvas .................. |love.graphics.getCanvas|
        2.5.1.10. getCanvasFormats .......... |love.graphics.getCanvasFormats|
        2.5.1.11. getColor .................. |love.graphics.getColor|
        2.5.1.12. getColorMask .............. |love.graphics.getColorMask|
        2.5.1.13. getCompressedImageFormats . |love.graphics.getCompressedImageFormats|
        2.5.1.14. getDefaultFilter .......... |love.graphics.getDefaultFilter|
        2.5.1.15. getDimensions ............. |love.graphics.getDimensions|
        2.5.1.16. getFont ................... |love.graphics.getFont|
        2.5.1.17. getHeight ................. |love.graphics.getHeight|
        2.5.1.18. getLineJoin ............... |love.graphics.getLineJoin|
        2.5.1.19. getLineStyle .............. |love.graphics.getLineStyle|
        2.5.1.20. getLineWidth .............. |love.graphics.getLineWidth|
        2.5.1.21. getShader ................. |love.graphics.getShader|
        2.5.1.22. getStats .................. |love.graphics.getStats|
        2.5.1.23. getStencilTest ............ |love.graphics.getStencilTest|
        2.5.1.24. getSupported .............. |love.graphics.getSupported|
        2.5.1.25. getSystemLimits ........... |love.graphics.getSystemLimits|
        2.5.1.26. getPointSize .............. |love.graphics.getPointSize|
        2.5.1.27. getRendererInfo ........... |love.graphics.getRendererInfo|
        2.5.1.28. getScissor ................ |love.graphics.getScissor|
        2.5.1.29. getWidth .................. |love.graphics.getWidth|
        2.5.1.30. intersectScissor .......... |love.graphics.intersectScissor|
        2.5.1.31. isGammaCorrect ............ |love.graphics.isGammaCorrect|
        2.5.1.32. isWireframe ............... |love.graphics.isWireframe|
        2.5.1.33. line ...................... |love.graphics.line|
        2.5.1.34. newCanvas ................. |love.graphics.newCanvas|
        2.5.1.35. newFont ................... |love.graphics.newFont|
        2.5.1.36. newMesh ................... |love.graphics.newMesh|
        2.5.1.37. newImage .................. |love.graphics.newImage|
        2.5.1.38. newImageFont .............. |love.graphics.newImageFont|
        2.5.1.39. newParticleSystem ......... |love.graphics.newParticleSystem|
        2.5.1.40. newShader ................. |love.graphics.newShader|
        2.5.1.41. newText ................... |love.graphics.newText|
        2.5.1.42. newQuad ................... |love.graphics.newQuad|
        2.5.1.43. newScreenshot ............. |love.graphics.newScreenshot|
        2.5.1.44. newSpriteBatch ............ |love.graphics.newSpriteBatch|
        2.5.1.45. newVideo .................. |love.graphics.newVideo|
        2.5.1.46. origin .................... |love.graphics.origin|
        2.5.1.47. points .................... |love.graphics.points|
        2.5.1.48. polygon ................... |love.graphics.polygon|
        2.5.1.49. pop ....................... |love.graphics.pop|
        2.5.1.50. present ................... |love.graphics.present|
        2.5.1.51. print ..................... |love.graphics.print|
        2.5.1.52. printf .................... |love.graphics.printf|
        2.5.1.53. push ...................... |love.graphics.push|
        2.5.1.54. rectangle ................. |love.graphics.rectangle|
        2.5.1.55. reset ..................... |love.graphics.reset|
        2.5.1.56. rotate .................... |love.graphics.rotate|
        2.5.1.57. scale ..................... |love.graphics.scale|
        2.5.1.58. setBackgroundColor ........ |love.graphics.setBackgroundColor|
        2.5.1.59. setBlendMode .............. |love.graphics.setBlendMode|
        2.5.1.60. setCanvas ................. |love.graphics.setCanvas|
        2.5.1.61. setColor .................. |love.graphics.setColor|
        2.5.1.62. setColorMask .............. |love.graphics.setColorMask|
        2.5.1.63. setDefaultFilter .......... |love.graphics.setDefaultFilter|
        2.5.1.64. setFont ................... |love.graphics.setFont|
        2.5.1.65. setLineJoin ............... |love.graphics.setLineJoin|
        2.5.1.66. setLineStyle .............. |love.graphics.setLineStyle|
        2.5.1.67. setLineWidth .............. |love.graphics.setLineWidth|
        2.5.1.68. setNewFont ................ |love.graphics.setNewFont|
        2.5.1.69. setShader ................. |love.graphics.setShader|
        2.5.1.70. setPointSize .............. |love.graphics.setPointSize|
        2.5.1.71. setScissor ................ |love.graphics.setScissor|
        2.5.1.72. setStencilTest ............ |love.graphics.setStencilTest|
        2.5.1.73. setWireframe .............. |love.graphics.setWireframe|
        2.5.1.74. shear ..................... |love.graphics.shear|
        2.5.1.75. stencil ................... |love.graphics.stencil|
        2.5.1.76. translate ................. |love.graphics.translate|
      2.5.2. types .......................... |love.graphics-types|
        2.5.2.1. Canvas ..................... |love-Canvas|
          2.5.2.1.1. getDimensions .......... |Canvas:getDimensions|
          2.5.2.1.2. getFilter .............. |Canvas:getFilter|
          2.5.2.1.3. getFormat .............. |Canvas:getFormat|
          2.5.2.1.4. getHeight .............. |Canvas:getHeight|
          2.5.2.1.5. getMSAA ................ |Canvas:getMSAA|
          2.5.2.1.6. getWidth ............... |Canvas:getWidth|
          2.5.2.1.7. getWrap ................ |Canvas:getWrap|
          2.5.2.1.8. isActive ............... |Canvas:isActive|
          2.5.2.1.9. newImageData ........... |Canvas:newImageData|
          2.5.2.1.10. renderTo .............. |Canvas:renderTo|
          2.5.2.1.11. setFilter ............. |Canvas:setFilter|
          2.5.2.1.12. setWrap ............... |Canvas:setWrap|
        2.5.2.2. Font ....................... |love-Font|
          2.5.2.2.1. getAscent .............. |Font:getAscent|
          2.5.2.2.2. getBaseline ............ |Font:getBaseline|
          2.5.2.2.3. getDescent ............. |Font:getDescent|
          2.5.2.2.4. getFilter .............. |Font:getFilter|
          2.5.2.2.5. getHeight .............. |Font:getHeight|
          2.5.2.2.6. getLineHeight .......... |Font:getLineHeight|
          2.5.2.2.7. getWidth ............... |Font:getWidth|
          2.5.2.2.8. getWrap ................ |Font:getWrap|
          2.5.2.2.9. hasGlyph ............... |Font:hasGlyph|
          2.5.2.2.10. setFallbacks .......... |Font:setFallbacks|
          2.5.2.2.11. setFilter ............. |Font:setFilter|
          2.5.2.2.12. setLineHeight ......... |Font:setLineHeight|
        2.5.2.3. Mesh ....................... |love-Mesh|
          2.5.2.3.1. attachAttribute ........ |Mesh:attachAttribute|
          2.5.2.3.2. getDrawMode ............ |Mesh:getDrawMode|
          2.5.2.3.3. getDrawRange ........... |Mesh:getDrawRange|
          2.5.2.3.4. getTexture ............. |Mesh:getTexture|
          2.5.2.3.5. getVertex .............. |Mesh:getVertex|
          2.5.2.3.6. getVertexAttribute ..... |Mesh:getVertexAttribute|
          2.5.2.3.7. getVertexCount ......... |Mesh:getVertexCount|
          2.5.2.3.8. getVertexFormat ........ |Mesh:getVertexFormat|
          2.5.2.3.9. getVertexMap ........... |Mesh:getVertexMap|
          2.5.2.3.10. isAttributeEnabled .... |Mesh:isAttributeEnabled|
          2.5.2.3.11. setAttributeEnabled ... |Mesh:setAttributeEnabled|
          2.5.2.3.12. setDrawMode ........... |Mesh:setDrawMode|
          2.5.2.3.13. setDrawRange .......... |Mesh:setDrawRange|
          2.5.2.3.14. setTexture ............ |Mesh:setTexture|
          2.5.2.3.15. setVertex ............. |Mesh:setVertex|
          2.5.2.3.16. setVertexAttribute .... |Mesh:setVertexAttribute|
          2.5.2.3.17. setVertexColors ....... |Mesh:setVertexColors|
          2.5.2.3.18. setVertexMap .......... |Mesh:setVertexMap|
          2.5.2.3.19. setVertices ........... |Mesh:setVertices|
        2.5.2.4. Image ...................... |love-Image|
          2.5.2.4.1. getData ................ |Image:getData|
          2.5.2.4.2. getDimensions .......... |Image:getDimensions|
          2.5.2.4.3. getFilter .............. |Image:getFilter|
          2.5.2.4.4. getFlags ............... |Image:getFlags|
          2.5.2.4.5. getHeight .............. |Image:getHeight|
          2.5.2.4.6. getMipmapFilter ........ |Image:getMipmapFilter|
          2.5.2.4.7. getWidth ............... |Image:getWidth|
          2.5.2.4.8. getWrap ................ |Image:getWrap|
          2.5.2.4.9. refresh ................ |Image:refresh|
          2.5.2.4.10. setFilter ............. |Image:setFilter|
          2.5.2.4.11. setMipmapFilter ....... |Image:setMipmapFilter|
          2.5.2.4.12. setWrap ............... |Image:setWrap|
        2.5.2.5. ParticleSystem ............. |love-ParticleSystem|
          2.5.2.5.1. clone .................. |ParticleSystem:clone|
          2.5.2.5.2. emit ................... |ParticleSystem:emit|
          2.5.2.5.3. getCount ............... |ParticleSystem:getCount|
          2.5.2.5.4. getAreaSpread .......... |ParticleSystem:getAreaSpread|
          2.5.2.5.5. getBufferSize .......... |ParticleSystem:getBufferSize|
          2.5.2.5.6. getColors .............. |ParticleSystem:getColors|
          2.5.2.5.7. getDirection ........... |ParticleSystem:getDirection|
          2.5.2.5.8. getEmissionRate ........ |ParticleSystem:getEmissionRate|
          2.5.2.5.9. getInsertMode .......... |ParticleSystem:getInsertMode|
          2.5.2.5.10. getLinearAcceleration . |ParticleSystem:getLinearAcceleration|
          2.5.2.5.11. getLinearDamping ...... |ParticleSystem:getLinearDamping|
          2.5.2.5.12. getEmitterLifetime .... |ParticleSystem:getEmitterLifetime|
          2.5.2.5.13. getOffset ............. |ParticleSystem:getOffset|
          2.5.2.5.14. getParticleLifetime ... |ParticleSystem:getParticleLifetime|
          2.5.2.5.15. getPosition ........... |ParticleSystem:getPosition|
          2.5.2.5.16. getRadialAcceleration . |ParticleSystem:getRadialAcceleration|
          2.5.2.5.17. getRotation ........... |ParticleSystem:getRotation|
          2.5.2.5.18. getSizes .............. |ParticleSystem:getSizes|
          2.5.2.5.19. getSizeVariation ...... |ParticleSystem:getSizeVariation|
          2.5.2.5.20. getSpeed .............. |ParticleSystem:getSpeed|
          2.5.2.5.21. getSpin ............... |ParticleSystem:getSpin|
          2.5.2.5.22. getSpinVariation ...... |ParticleSystem:getSpinVariation|
          2.5.2.5.23. getSpread ............. |ParticleSystem:getSpread|
          2.5.2.5.24. getTexture ............ |ParticleSystem:getTexture|
          2.5.2.5.25. getTangentialAccelerat- |ParticleSystem:getTangentialAcceleration|
          2.5.2.5.26. hasRelativeRotation ... |ParticleSystem:hasRelativeRotation|
          2.5.2.5.27. isActive .............. |ParticleSystem:isActive|
          2.5.2.5.28. isPaused .............. |ParticleSystem:isPaused|
          2.5.2.5.29. isStopped ............. |ParticleSystem:isStopped|
          2.5.2.5.30. moveTo ................ |ParticleSystem:moveTo|
          2.5.2.5.31. pause ................. |ParticleSystem:pause|
          2.5.2.5.32. reset ................. |ParticleSystem:reset|
          2.5.2.5.33. setAreaSpread ......... |ParticleSystem:setAreaSpread|
          2.5.2.5.34. setBufferSize ......... |ParticleSystem:setBufferSize|
          2.5.2.5.35. setColors ............. |ParticleSystem:setColors|
          2.5.2.5.36. setDirection .......... |ParticleSystem:setDirection|
          2.5.2.5.37. setEmissionRate ....... |ParticleSystem:setEmissionRate|
          2.5.2.5.38. setEmitterLifetime .... |ParticleSystem:setEmitterLifetime|
          2.5.2.5.39. setInsertMode ......... |ParticleSystem:setInsertMode|
          2.5.2.5.40. setLinearAcceleration . |ParticleSystem:setLinearAcceleration|
          2.5.2.5.41. setLinearDamping ...... |ParticleSystem:setLinearDamping|
          2.5.2.5.42. setOffset ............. |ParticleSystem:setOffset|
          2.5.2.5.43. setParticleLifetime ... |ParticleSystem:setParticleLifetime|
          2.5.2.5.44. setPosition ........... |ParticleSystem:setPosition|
          2.5.2.5.45. setQuads .............. |ParticleSystem:setQuads|
          2.5.2.5.46. setRadialAcceleration . |ParticleSystem:setRadialAcceleration|
          2.5.2.5.47. setRelativeRotation ... |ParticleSystem:setRelativeRotation|
          2.5.2.5.48. setRotation ........... |ParticleSystem:setRotation|
          2.5.2.5.49. setSizes .............. |ParticleSystem:setSizes|
          2.5.2.5.50. setSizeVariation ...... |ParticleSystem:setSizeVariation|
          2.5.2.5.51. setSpeed .............. |ParticleSystem:setSpeed|
          2.5.2.5.52. setSpin ............... |ParticleSystem:setSpin|
          2.5.2.5.53. setSpinVariation ...... |ParticleSystem:setSpinVariation|
          2.5.2.5.54. setSpread ............. |ParticleSystem:setSpread|
          2.5.2.5.55. setTexture ............ |ParticleSystem:setTexture|
          2.5.2.5.56. setTangentialAccelerat- |ParticleSystem:setTangentialAcceleration|
          2.5.2.5.57. start ................. |ParticleSystem:start|
          2.5.2.5.58. stop .................. |ParticleSystem:stop|
          2.5.2.5.59. update ................ |ParticleSystem:update|
        2.5.2.6. Quad ....................... |love-Quad|
          2.5.2.6.1. getViewport ............ |Quad:getViewport|
          2.5.2.6.2. setViewport ............ |Quad:setViewport|
        2.5.2.7. Shader ..................... |love-Shader|
          2.5.2.7.1. getExternVariable ...... |Shader:getExternVariable|
          2.5.2.7.2. getWarnings ............ |Shader:getWarnings|
          2.5.2.7.3. send ................... |Shader:send|
          2.5.2.7.4. sendColor .............. |Shader:sendColor|
        2.5.2.8. SpriteBatch ................ |love-SpriteBatch|
          2.5.2.8.1. add .................... |SpriteBatch:add|
          2.5.2.8.2. attachAttribute ........ |SpriteBatch:attachAttribute|
          2.5.2.8.3. clear .................. |SpriteBatch:clear|
          2.5.2.8.4. flush .................. |SpriteBatch:flush|
          2.5.2.8.5. getBufferSize .......... |SpriteBatch:getBufferSize|
          2.5.2.8.6. getColor ............... |SpriteBatch:getColor|
          2.5.2.8.7. getCount ............... |SpriteBatch:getCount|
          2.5.2.8.8. getTexture ............. |SpriteBatch:getTexture|
          2.5.2.8.9. set .................... |SpriteBatch:set|
          2.5.2.8.10. setBufferSize ......... |SpriteBatch:setBufferSize|
          2.5.2.8.11. setColor .............. |SpriteBatch:setColor|
          2.5.2.8.12. setTexture ............ |SpriteBatch:setTexture|
        2.5.2.9. Text ....................... |love-Text|
          2.5.2.9.1. add .................... |Text:add|
          2.5.2.9.2. addf ................... |Text:addf|
          2.5.2.9.3. clear .................. |Text:clear|
          2.5.2.9.4. getDimensions .......... |Text:getDimensions|
          2.5.2.9.5. getFont ................ |Text:getFont|
          2.5.2.9.6. getHeight .............. |Text:getHeight|
          2.5.2.9.7. getWidth ............... |Text:getWidth|
          2.5.2.9.8. set .................... |Text:set|
          2.5.2.9.9. setf ................... |Text:setf|
          2.5.2.9.10. setFont ............... |Text:setFont|
        2.5.2.10. Texture ................... |love-Texture|
        2.5.2.11. Video ..................... |love-Video|
          2.5.2.11.1. getDimensions ......... |Video:getDimensions|
          2.5.2.11.2. getFilter ............. |Video:getFilter|
          2.5.2.11.3. getHeight ............. |Video:getHeight|
          2.5.2.11.4. getSource ............. |Video:getSource|
          2.5.2.11.5. getStream ............. |Video:getStream|
          2.5.2.11.6. getWidth .............. |Video:getWidth|
          2.5.2.11.7. isPlaying ............. |Video:isPlaying|
          2.5.2.11.8. pause ................. |Video:pause|
          2.5.2.11.9. play .................. |Video:play|
          2.5.2.11.10. rewind ............... |Video:rewind|
          2.5.2.11.11. seek ................. |Video:seek|
          2.5.2.11.12. setFilter ............ |Video:setFilter|
          2.5.2.11.13. setSource ............ |Video:setSource|
          2.5.2.11.14. tell ................. |Video:tell|
      2.5.3. enums .......................... |love.graphics-enums|
        2.5.3.1. AlignMode .................. |love-AlignMode|
        2.5.3.2. ArcType .................... |love-ArcType|
        2.5.3.3. AreaSpreadDistribution ..... |love-AreaSpreadDistribution|
        2.5.3.4. BlendAlphaMode ............. |love-BlendAlphaMode|
        2.5.3.5. BlendMode .................. |love-BlendMode|
        2.5.3.6. CanvasFormat ............... |love-CanvasFormat|
        2.5.3.7. CompareMode ................ |love-CompareMode|
        2.5.3.8. DrawMode ................... |love-DrawMode|
        2.5.3.9. FilterMode ................. |love-FilterMode|
        2.5.3.10. GraphicsFeature ........... |love-GraphicsFeature|
        2.5.3.11. GraphicsLimit ............. |love-GraphicsLimit|
        2.5.3.12. LineJoin .................. |love-LineJoin|
        2.5.3.13. LineStyle ................. |love-LineStyle|
        2.5.3.14. MeshDrawMode .............. |love-MeshDrawMode|
        2.5.3.15. ParticleInsertMode ........ |love-ParticleInsertMode|
        2.5.3.16. PointStyle ................ |love-PointStyle|
        2.5.3.17. SpriteBatchUsage .......... |love-SpriteBatchUsage|
        2.5.3.18. StackType ................. |love-StackType|
        2.5.3.19. StencilAction ............. |love-StencilAction|
        2.5.3.20. WrapMode .................. |love-WrapMode|
    2.6. image .............................. |love.image|
      2.6.1. functions ...................... |love.image-functions|
        2.6.1.1. isCompressed ............... |love.image.isCompressed|
        2.6.1.2. newCompressedData .......... |love.image.newCompressedData|
        2.6.1.3. newImageData ............... |love.image.newImageData|
      2.6.2. types .......................... |love.image-types|
        2.6.2.1. CompressedImageData ........ |love-CompressedImageData|
          2.6.2.1.1. getDimensions .......... |CompressedImageData:getDimensions|
          2.6.2.1.2. getFormat .............. |CompressedImageData:getFormat|
          2.6.2.1.3. getHeight .............. |CompressedImageData:getHeight|
          2.6.2.1.4. getMipmapCount ......... |CompressedImageData:getMipmapCount|
          2.6.2.1.5. getWidth ............... |CompressedImageData:getWidth|
        2.6.2.2. ImageData .................. |love-ImageData|
          2.6.2.2.1. encode ................. |ImageData:encode|
          2.6.2.2.2. getDimensions .......... |ImageData:getDimensions|
          2.6.2.2.3. getHeight .............. |ImageData:getHeight|
          2.6.2.2.4. getPixel ............... |ImageData:getPixel|
          2.6.2.2.5. getWidth ............... |ImageData:getWidth|
          2.6.2.2.6. mapPixel ............... |ImageData:mapPixel|
          2.6.2.2.7. paste .................. |ImageData:paste|
          2.6.2.2.8. setPixel ............... |ImageData:setPixel|
      2.6.3. enums .......................... |love.image-enums|
        2.6.3.1. CompressedImageFormat ...... |love-CompressedImageFormat|
        2.6.3.2. ImageFormat ................ |love-ImageFormat|
    2.7. joystick ........................... |love.joystick|
      2.7.1. functions ...................... |love.joystick-functions|
        2.7.1.1. getJoystickCount ........... |love.joystick.getJoystickCount|
        2.7.1.2. getJoysticks ............... |love.joystick.getJoysticks|
        2.7.1.3. loadGamepadMappings ........ |love.joystick.loadGamepadMappings|
        2.7.1.4. saveGamepadMappings ........ |love.joystick.saveGamepadMappings|
        2.7.1.5. setGamepadMapping .......... |love.joystick.setGamepadMapping|
      2.7.2. types .......................... |love.joystick-types|
        2.7.2.1. Joystick ................... |love-Joystick|
          2.7.2.1.1. getAxes ................ |Joystick:getAxes|
          2.7.2.1.2. getAxis ................ |Joystick:getAxis|
          2.7.2.1.3. getAxisCount ........... |Joystick:getAxisCount|
          2.7.2.1.4. getButtonCount ......... |Joystick:getButtonCount|
          2.7.2.1.5. getGUID ................ |Joystick:getGUID|
          2.7.2.1.6. getGamepadAxis ......... |Joystick:getGamepadAxis|
          2.7.2.1.7. getGamepadMapping ...... |Joystick:getGamepadMapping|
          2.7.2.1.8. getHat ................. |Joystick:getHat|
          2.7.2.1.9. getHatCount ............ |Joystick:getHatCount|
          2.7.2.1.10. getID ................. |Joystick:getID|
          2.7.2.1.11. getName ............... |Joystick:getName|
          2.7.2.1.12. getVibration .......... |Joystick:getVibration|
          2.7.2.1.13. isConnected ........... |Joystick:isConnected|
          2.7.2.1.14. isDown ................ |Joystick:isDown|
          2.7.2.1.15. isGamepad ............. |Joystick:isGamepad|
          2.7.2.1.16. isGamepadDown ......... |Joystick:isGamepadDown|
          2.7.2.1.17. isVibrationSupported .. |Joystick:isVibrationSupported|
          2.7.2.1.18. setVibration .......... |Joystick:setVibration|
      2.7.3. enums .......................... |love.joystick-enums|
        2.7.3.1. GamepadAxis ................ |love-GamepadAxis|
        2.7.3.2. GamepadButton .............. |love-GamepadButton|
        2.7.3.3. JoystickHat ................ |love-JoystickHat|
        2.7.3.4. JoystickInputType .......... |love-JoystickInputType|
    2.8. keyboard ........................... |love.keyboard|
      2.8.1. functions ...................... |love.keyboard-functions|
        2.8.1.1. getKeyFromScancode ......... |love.keyboard.getKeyFromScancode|
        2.8.1.2. getScancodeFromKey ......... |love.keyboard.getScancodeFromKey|
        2.8.1.3. hasKeyRepeat ............... |love.keyboard.hasKeyRepeat|
        2.8.1.4. hasTextInput ............... |love.keyboard.hasTextInput|
        2.8.1.5. isDown ..................... |love.keyboard.isDown|
        2.8.1.6. isScancodeDown ............. |love.keyboard.isScancodeDown|
        2.8.1.7. setKeyRepeat ............... |love.keyboard.setKeyRepeat|
        2.8.1.8. setTextInput ............... |love.keyboard.setTextInput|
      2.8.2. enums .......................... |love.keyboard-enums|
        2.8.2.1. KeyConstant ................ |love-KeyConstant|
        2.8.2.2. Scancode ................... |love-Scancode|
    2.9. math ............................... |love.math|
      2.9.1. functions ...................... |love.math-functions|
        2.9.1.1. compress ................... |love.math.compress|
        2.9.1.2. decompress ................. |love.math.decompress|
        2.9.1.3. gammaToLinear .............. |love.math.gammaToLinear|
        2.9.1.4. getRandomSeed .............. |love.math.getRandomSeed|
        2.9.1.5. getRandomState ............. |love.math.getRandomState|
        2.9.1.6. isConvex ................... |love.math.isConvex|
        2.9.1.7. linearToGamma .............. |love.math.linearToGamma|
        2.9.1.8. newBezierCurve ............. |love.math.newBezierCurve|
        2.9.1.9. newRandomGenerator ......... |love.math.newRandomGenerator|
        2.9.1.10. noise ..................... |love.math.noise|
        2.9.1.11. random .................... |love.math.random|
        2.9.1.12. randomNormal .............. |love.math.randomNormal|
        2.9.1.13. setRandomSeed ............. |love.math.setRandomSeed|
        2.9.1.14. setRandomState ............ |love.math.setRandomState|
        2.9.1.15. triangulate ............... |love.math.triangulate|
      2.9.2. types .......................... |love.math-types|
        2.9.2.1. BezierCurve ................ |love-BezierCurve|
          2.9.2.1.1. evalulate .............. |BezierCurve:evalulate|
          2.9.2.1.2. getControlPoint ........ |BezierCurve:getControlPoint|
          2.9.2.1.3. getControlPointCount ... |BezierCurve:getControlPointCount|
          2.9.2.1.4. getDegree .............. |BezierCurve:getDegree|
          2.9.2.1.5. getDerivative .......... |BezierCurve:getDerivative|
          2.9.2.1.6. getSegment ............. |BezierCurve:getSegment|
          2.9.2.1.7. insertControlPoint ..... |BezierCurve:insertControlPoint|
          2.9.2.1.8. removeControlPoint ..... |BezierCurve:removeControlPoint|
          2.9.2.1.9. render ................. |BezierCurve:render|
          2.9.2.1.10. renderSegment ......... |BezierCurve:renderSegment|
          2.9.2.1.11. rotate ................ |BezierCurve:rotate|
          2.9.2.1.12. scale ................. |BezierCurve:scale|
          2.9.2.1.13. setControlPoint ....... |BezierCurve:setControlPoint|
          2.9.2.1.14. translate ............. |BezierCurve:translate|
        2.9.2.2. CompressedData ............. |love-CompressedData|
          2.9.2.2.1. getFormat .............. |CompressedData:getFormat|
        2.9.2.3. RandomGenerator ............ |love-RandomGenerator|
          2.9.2.3.1. getSeed ................ |RandomGenerator:getSeed|
          2.9.2.3.2. getState ............... |RandomGenerator:getState|
          2.9.2.3.3. random ................. |RandomGenerator:random|
          2.9.2.3.4. randomNormal ........... |RandomGenerator:randomNormal|
          2.9.2.3.5. setSeed ................ |RandomGenerator:setSeed|
          2.9.2.3.6. setState ............... |RandomGenerator:setState|
      2.9.3. enums .......................... |love.math-enums|
        2.9.3.1. CompressedDataFormat ....... |love-CompressedDataFormat|
    2.10. mouse ............................. |love.mouse|
      2.10.1. functions ..................... |love.mouse-functions|
        2.10.1.1. getCursor ................. |love.mouse.getCursor|
        2.10.1.2. getPosition ............... |love.mouse.getPosition|
        2.10.1.3. getRelativeMode ........... |love.mouse.getRelativeMode|
        2.10.1.4. getSystemCursor ........... |love.mouse.getSystemCursor|
        2.10.1.5. getX ...................... |love.mouse.getX|
        2.10.1.6. getY ...................... |love.mouse.getY|
        2.10.1.7. hasCursor ................. |love.mouse.hasCursor|
        2.10.1.8. isDown .................... |love.mouse.isDown|
        2.10.1.9. isGrabbed ................. |love.mouse.isGrabbed|
        2.10.1.10. isVisible ................ |love.mouse.isVisible|
        2.10.1.11. newCursor ................ |love.mouse.newCursor|
        2.10.1.12. setCursor ................ |love.mouse.setCursor|
        2.10.1.13. setGrabbed ............... |love.mouse.setGrabbed|
        2.10.1.14. setPosition .............. |love.mouse.setPosition|
        2.10.1.15. setRelativeMode .......... |love.mouse.setRelativeMode|
        2.10.1.16. setVisible ............... |love.mouse.setVisible|
        2.10.1.17. setX ..................... |love.mouse.setX|
        2.10.1.18. setY ..................... |love.mouse.setY|
      2.10.2. types ......................... |love.mouse-types|
        2.10.2.1. Cursor .................... |love-Cursor|
          2.10.2.1.1. getType ............... |Cursor:getType|
      2.10.3. enums ......................... |love.mouse-enums|
        2.10.3.1. CursorType ................ |love-CursorType|
    2.11. physics ........................... |love.physics|
      2.11.1. functions ..................... |love.physics-functions|
        2.11.1.1. getDistance ............... |love.physics.getDistance|
        2.11.1.2. getMeter .................. |love.physics.getMeter|
        2.11.1.3. newBody ................... |love.physics.newBody|
        2.11.1.4. newChainShape ............. |love.physics.newChainShape|
        2.11.1.5. newCircleShape ............ |love.physics.newCircleShape|
        2.11.1.6. newDistanceJoint .......... |love.physics.newDistanceJoint|
        2.11.1.7. newEdgeShape .............. |love.physics.newEdgeShape|
        2.11.1.8. newFixture ................ |love.physics.newFixture|
        2.11.1.9. newFrictionJoint .......... |love.physics.newFrictionJoint|
        2.11.1.10. newGearJoint ............. |love.physics.newGearJoint|
        2.11.1.11. newMotorJoint ............ |love.physics.newMotorJoint|
        2.11.1.12. newMouseJoint ............ |love.physics.newMouseJoint|
        2.11.1.13. newPolygonShape .......... |love.physics.newPolygonShape|
        2.11.1.14. newPrismaticJoint ........ |love.physics.newPrismaticJoint|
        2.11.1.15. newPulleyJoint ........... |love.physics.newPulleyJoint|
        2.11.1.16. newRectangleShape ........ |love.physics.newRectangleShape|
        2.11.1.17. newRevoluteJoint ......... |love.physics.newRevoluteJoint|
        2.11.1.18. newRopeJoint ............. |love.physics.newRopeJoint|
        2.11.1.19. newWeldJoint ............. |love.physics.newWeldJoint|
        2.11.1.20. newWheelJoint ............ |love.physics.newWheelJoint|
        2.11.1.21. newWorld ................. |love.physics.newWorld|
        2.11.1.22. setMeter ................. |love.physics.setMeter|
      2.11.2. types ......................... |love.physics-types|
        2.11.2.1. Body ...................... |love-Body|
          2.11.2.1.1. applyAngularImpulse ... |Body:applyAngularImpulse|
          2.11.2.1.2. applyForce ............ |Body:applyForce|
          2.11.2.1.3. applyLinearImpulse .... |Body:applyLinearImpulse|
          2.11.2.1.4. applyTorque ........... |Body:applyTorque|
          2.11.2.1.5. destroy ............... |Body:destroy|
          2.11.2.1.6. getAngle .............. |Body:getAngle|
          2.11.2.1.7. getAngularDamping ..... |Body:getAngularDamping|
          2.11.2.1.8. getAngularVelocity .... |Body:getAngularVelocity|
          2.11.2.1.9. getContactList ........ |Body:getContactList|
          2.11.2.1.10. getFixtureList ....... |Body:getFixtureList|
          2.11.2.1.11. getGravityScale ...... |Body:getGravityScale|
          2.11.2.1.12. getInertia ........... |Body:getInertia|
          2.11.2.1.13. getJointList ......... |Body:getJointList|
          2.11.2.1.14. getLinearDamping ..... |Body:getLinearDamping|
          2.11.2.1.15. getLinearVelocity .... |Body:getLinearVelocity|
          2.11.2.1.16. getLinearVelocityFrom- |Body:getLinearVelocityFromLocalPoint|
          2.11.2.1.17. getLinearVelocityFrom- |Body:getLinearVelocityFromWorldPoint|
          2.11.2.1.18. getLocalCenter ....... |Body:getLocalCenter|
          2.11.2.1.19. getLocalPoint ........ |Body:getLocalPoint|
          2.11.2.1.20. getLocalVector ....... |Body:getLocalVector|
          2.11.2.1.21. getMass .............. |Body:getMass|
          2.11.2.1.22. getMassData .......... |Body:getMassData|
          2.11.2.1.23. getPosition .......... |Body:getPosition|
          2.11.2.1.24. getType .............. |Body:getType|
          2.11.2.1.25. getUserData .......... |Body:getUserData|
          2.11.2.1.26. getWorld ............. |Body:getWorld|
          2.11.2.1.27. getWorldCenter ....... |Body:getWorldCenter|
          2.11.2.1.28. getWorldPoint ........ |Body:getWorldPoint|
          2.11.2.1.29. getWorldPoints ....... |Body:getWorldPoints|
          2.11.2.1.30. getWorldVector ....... |Body:getWorldVector|
          2.11.2.1.31. getX ................. |Body:getX|
          2.11.2.1.32. getY ................. |Body:getY|
          2.11.2.1.33. isActive ............. |Body:isActive|
          2.11.2.1.34. isAwake .............. |Body:isAwake|
          2.11.2.1.35. isBullet ............. |Body:isBullet|
          2.11.2.1.36. isDestroyed .......... |Body:isDestroyed|
          2.11.2.1.37. isFixedRotation ...... |Body:isFixedRotation|
          2.11.2.1.38. isSleepingAllowed .... |Body:isSleepingAllowed|
          2.11.2.1.39. resetMassData ........ |Body:resetMassData|
          2.11.2.1.40. setActive ............ |Body:setActive|
          2.11.2.1.41. setAngle ............. |Body:setAngle|
          2.11.2.1.42. setAngularDamping .... |Body:setAngularDamping|
          2.11.2.1.43. setAngularVelocity ... |Body:setAngularVelocity|
          2.11.2.1.44. setAwake ............. |Body:setAwake|
          2.11.2.1.45. setBullet ............ |Body:setBullet|
          2.11.2.1.46. setFixedRotation ..... |Body:setFixedRotation|
          2.11.2.1.47. setGravityScale ...... |Body:setGravityScale|
          2.11.2.1.48. setInertia ........... |Body:setInertia|
          2.11.2.1.49. setLinearDamping ..... |Body:setLinearDamping|
          2.11.2.1.50. setLinearVelocity .... |Body:setLinearVelocity|
          2.11.2.1.51. setMass .............. |Body:setMass|
          2.11.2.1.52. setMassData .......... |Body:setMassData|
          2.11.2.1.53. setPosition .......... |Body:setPosition|
          2.11.2.1.54. setSleepingAllowed ... |Body:setSleepingAllowed|
          2.11.2.1.55. setType .............. |Body:setType|
          2.11.2.1.56. setUserData .......... |Body:setUserData|
          2.11.2.1.57. setX ................. |Body:setX|
          2.11.2.1.58. setY ................. |Body:setY|
        2.11.2.2. ChainShape ................ |love-ChainShape|
          2.11.2.2.1. getChildEdge .......... |ChainShape:getChildEdge|
          2.11.2.2.2. getPoint .............. |ChainShape:getPoint|
          2.11.2.2.3. getPoints ............. |ChainShape:getPoints|
          2.11.2.2.4. getVertexCount ........ |ChainShape:getVertexCount|
          2.11.2.2.5. setNextVertex ......... |ChainShape:setNextVertex|
          2.11.2.2.6. setPreviousVertex ..... |ChainShape:setPreviousVertex|
        2.11.2.3. CircleShape ............... |love-CircleShape|
          2.11.2.3.1. getPoint .............. |CircleShape:getPoint|
          2.11.2.3.2. getRadius ............. |CircleShape:getRadius|
          2.11.2.3.3. setPoint .............. |CircleShape:setPoint|
          2.11.2.3.4. setRadius ............. |CircleShape:setRadius|
        2.11.2.4. Contact ................... |love-Contact|
          2.11.2.4.1. getFixtures ........... |Contact:getFixtures|
          2.11.2.4.2. getFriction ........... |Contact:getFriction|
          2.11.2.4.3. getNormal ............. |Contact:getNormal|
          2.11.2.4.4. getPositions .......... |Contact:getPositions|
          2.11.2.4.5. getRestitution ........ |Contact:getRestitution|
          2.11.2.4.6. isEnabled ............. |Contact:isEnabled|
          2.11.2.4.7. isTouching ............ |Contact:isTouching|
          2.11.2.4.8. resetFriction ......... |Contact:resetFriction|
          2.11.2.4.9. resetRestitution ...... |Contact:resetRestitution|
          2.11.2.4.10. setEnabled ........... |Contact:setEnabled|
          2.11.2.4.11. setFriction .......... |Contact:setFriction|
          2.11.2.4.12. setRestitution ....... |Contact:setRestitution|
        2.11.2.5. EdgeShape ................. |love-EdgeShape|
          2.11.2.5.1. getPoints ............. |EdgeShape:getPoints|
        2.11.2.6. DistanceJoint ............. |love-DistanceJoint|
          2.11.2.6.1. getDampingRatio ....... |DistanceJoint:getDampingRatio|
          2.11.2.6.2. getFrequency .......... |DistanceJoint:getFrequency|
          2.11.2.6.3. getLength ............. |DistanceJoint:getLength|
          2.11.2.6.4. setDampingRatio ....... |DistanceJoint:setDampingRatio|
          2.11.2.6.5. setFrequency .......... |DistanceJoint:setFrequency|
          2.11.2.6.6. setLength ............. |DistanceJoint:setLength|
        2.11.2.7. Fixture ................... |love-Fixture|
          2.11.2.7.1. destroy ............... |Fixture:destroy|
          2.11.2.7.2. getBody ............... |Fixture:getBody|
          2.11.2.7.3. getBoundingBox ........ |Fixture:getBoundingBox|
          2.11.2.7.4. getCategory ........... |Fixture:getCategory|
          2.11.2.7.5. getDensity ............ |Fixture:getDensity|
          2.11.2.7.6. getFilterData ......... |Fixture:getFilterData|
          2.11.2.7.7. getFriction ........... |Fixture:getFriction|
          2.11.2.7.8. getGroupIndex ......... |Fixture:getGroupIndex|
          2.11.2.7.9. getMask ............... |Fixture:getMask|
          2.11.2.7.10. getMassData .......... |Fixture:getMassData|
          2.11.2.7.11. getRestitution ....... |Fixture:getRestitution|
          2.11.2.7.12. getShape ............. |Fixture:getShape|
          2.11.2.7.13. getUserData .......... |Fixture:getUserData|
          2.11.2.7.14. isDestroyed .......... |Fixture:isDestroyed|
          2.11.2.7.15. isSensor ............. |Fixture:isSensor|
          2.11.2.7.16. rayCast .............. |Fixture:rayCast|
          2.11.2.7.17. setCategory .......... |Fixture:setCategory|
          2.11.2.7.18. setDensity ........... |Fixture:setDensity|
          2.11.2.7.19. setFilterData ........ |Fixture:setFilterData|
          2.11.2.7.20. setFriction .......... |Fixture:setFriction|
          2.11.2.7.21. setGroupIndex ........ |Fixture:setGroupIndex|
          2.11.2.7.22. setMask .............. |Fixture:setMask|
          2.11.2.7.23. setRestitution ....... |Fixture:setRestitution|
          2.11.2.7.24. setSensor ............ |Fixture:setSensor|
          2.11.2.7.25. setUserData .......... |Fixture:setUserData|
          2.11.2.7.26. testPoint ............ |Fixture:testPoint|
        2.11.2.8. FrictionJoint ............. |love-FrictionJoint|
          2.11.2.8.1. getMaxForce ........... |FrictionJoint:getMaxForce|
          2.11.2.8.2. getMaxTorque .......... |FrictionJoint:getMaxTorque|
          2.11.2.8.3. setMaxForce ........... |FrictionJoint:setMaxForce|
          2.11.2.8.4. setMaxTorque .......... |FrictionJoint:setMaxTorque|
        2.11.2.9. GearJoint ................. |love-GearJoint|
          2.11.2.9.1. getJoints ............. |GearJoint:getJoints|
          2.11.2.9.2. getRatio .............. |GearJoint:getRatio|
          2.11.2.9.3. setRatio .............. |GearJoint:setRatio|
        2.11.2.10. Joint .................... |love-Joint|
          2.11.2.10.1. destroy .............. |Joint:destroy|
          2.11.2.10.2. getAnchors ........... |Joint:getAnchors|
          2.11.2.10.3. getBodies ............ |Joint:getBodies|
          2.11.2.10.4. getCollideConnected .. |Joint:getCollideConnected|
          2.11.2.10.5. getReactionForce ..... |Joint:getReactionForce|
          2.11.2.10.6. getReactionTorque .... |Joint:getReactionTorque|
          2.11.2.10.7. getType .............. |Joint:getType|
          2.11.2.10.8. getUserData .......... |Joint:getUserData|
          2.11.2.10.9. isDestroyed .......... |Joint:isDestroyed|
          2.11.2.10.10. setUserData ......... |Joint:setUserData|
        2.11.2.11. MotorJoint ............... |love-MotorJoint|
          2.11.2.11.1. getAngularOffset ..... |MotorJoint:getAngularOffset|
          2.11.2.11.2. getLinearOffset ...... |MotorJoint:getLinearOffset|
          2.11.2.11.3. setAngularOffset ..... |MotorJoint:setAngularOffset|
          2.11.2.11.4. setLinearOffset ...... |MotorJoint:setLinearOffset|
        2.11.2.12. MouseJoint ............... |love-MouseJoint|
          2.11.2.12.1. getDampingRatio ...... |MouseJoint:getDampingRatio|
          2.11.2.12.2. getFrequency ......... |MouseJoint:getFrequency|
          2.11.2.12.3. getMaxForce .......... |MouseJoint:getMaxForce|
          2.11.2.12.4. getTarget ............ |MouseJoint:getTarget|
          2.11.2.12.5. setDampingRatio ...... |MouseJoint:setDampingRatio|
          2.11.2.12.6. setFrequency ......... |MouseJoint:setFrequency|
          2.11.2.12.7. setMaxForce .......... |MouseJoint:setMaxForce|
          2.11.2.12.8. setTarget ............ |MouseJoint:setTarget|
        2.11.2.13. PolygonShape ............. |love-PolygonShape|
          2.11.2.13.1. getPoints ............ |PolygonShape:getPoints|
        2.11.2.14. PrismaticJoint ........... |love-PrismaticJoint|
          2.11.2.14.1. setLimitsEnabled ..... |PrismaticJoint:setLimitsEnabled|
          2.11.2.14.2. setMotorEnabled ...... |PrismaticJoint:setMotorEnabled|
          2.11.2.14.3. getJointSpeed ........ |PrismaticJoint:getJointSpeed|
          2.11.2.14.4. getJointTranslation .. |PrismaticJoint:getJointTranslation|
          2.11.2.14.5. getLimits ............ |PrismaticJoint:getLimits|
          2.11.2.14.6. getLowerLimit ........ |PrismaticJoint:getLowerLimit|
          2.11.2.14.7. getMaxMotorForce ..... |PrismaticJoint:getMaxMotorForce|
          2.11.2.14.8. getMotorForce ........ |PrismaticJoint:getMotorForce|
          2.11.2.14.9. getMotorSpeed ........ |PrismaticJoint:getMotorSpeed|
          2.11.2.14.10. getUpperLimit ....... |PrismaticJoint:getUpperLimit|
          2.11.2.14.11. hasLimitsEnabled .... |PrismaticJoint:hasLimitsEnabled|
          2.11.2.14.12. isMotorEnabled ...... |PrismaticJoint:isMotorEnabled|
          2.11.2.14.13. setLimits ........... |PrismaticJoint:setLimits|
          2.11.2.14.14. setLowerLimit ....... |PrismaticJoint:setLowerLimit|
          2.11.2.14.15. setMaxMotorForce .... |PrismaticJoint:setMaxMotorForce|
          2.11.2.14.16. setMotorSpeed ....... |PrismaticJoint:setMotorSpeed|
          2.11.2.14.17. setUpperLimit ....... |PrismaticJoint:setUpperLimit|
        2.11.2.15. PulleyJoint .............. |love-PulleyJoint|
          2.11.2.15.1. getConstant .......... |PulleyJoint:getConstant|
          2.11.2.15.2. getGroundAnchors ..... |PulleyJoint:getGroundAnchors|
          2.11.2.15.3. getLengthA ........... |PulleyJoint:getLengthA|
          2.11.2.15.4. getLengthB ........... |PulleyJoint:getLengthB|
          2.11.2.15.5. getMaxLengths ........ |PulleyJoint:getMaxLengths|
          2.11.2.15.6. getRatio ............. |PulleyJoint:getRatio|
          2.11.2.15.7. setConstant .......... |PulleyJoint:setConstant|
          2.11.2.15.8. setMaxLengths ........ |PulleyJoint:setMaxLengths|
          2.11.2.15.9. setRatio ............. |PulleyJoint:setRatio|
        2.11.2.16. RevoluteJoint ............ |love-RevoluteJoint|
          2.11.2.16.1. setLimitsEnabled ..... |RevoluteJoint:setLimitsEnabled|
          2.11.2.16.2. setMotorEnabled ...... |RevoluteJoint:setMotorEnabled|
          2.11.2.16.3. getJointAngle ........ |RevoluteJoint:getJointAngle|
          2.11.2.16.4. getJointSpeed ........ |RevoluteJoint:getJointSpeed|
          2.11.2.16.5. getLimits ............ |RevoluteJoint:getLimits|
          2.11.2.16.6. getLowerLimit ........ |RevoluteJoint:getLowerLimit|
          2.11.2.16.7. getMaxMotorTorque .... |RevoluteJoint:getMaxMotorTorque|
          2.11.2.16.8. getMotorSpeed ........ |RevoluteJoint:getMotorSpeed|
          2.11.2.16.9. getMotorTorque ....... |RevoluteJoint:getMotorTorque|
          2.11.2.16.10. getUpperLimit ....... |RevoluteJoint:getUpperLimit|
          2.11.2.16.11. hasLimitsEnabled .... |RevoluteJoint:hasLimitsEnabled|
          2.11.2.16.12. isMotorEnabled ...... |RevoluteJoint:isMotorEnabled|
          2.11.2.16.13. setLimits ........... |RevoluteJoint:setLimits|
          2.11.2.16.14. setLowerLimit ....... |RevoluteJoint:setLowerLimit|
          2.11.2.16.15. setMaxMotorTorque ... |RevoluteJoint:setMaxMotorTorque|
          2.11.2.16.16. setMotorSpeed ....... |RevoluteJoint:setMotorSpeed|
          2.11.2.16.17. setUpperLimit ....... |RevoluteJoint:setUpperLimit|
        2.11.2.17. RopeJoint ................ |love-RopeJoint|
          2.11.2.17.1. getMaxLength ......... |RopeJoint:getMaxLength|
        2.11.2.18. Shape .................... |love-Shape|
          2.11.2.18.1. computeAABB .......... |Shape:computeAABB|
          2.11.2.18.2. computeMass .......... |Shape:computeMass|
          2.11.2.18.3. getChildCount ........ |Shape:getChildCount|
          2.11.2.18.4. getRadius ............ |Shape:getRadius|
          2.11.2.18.5. getType .............. |Shape:getType|
          2.11.2.18.6. rayCast .............. |Shape:rayCast|
          2.11.2.18.7. testPoint ............ |Shape:testPoint|
        2.11.2.19. WeldJoint ................ |love-WeldJoint|
          2.11.2.19.1. getDampingRatio ...... |WeldJoint:getDampingRatio|
          2.11.2.19.2. getFrequency ......... |WeldJoint:getFrequency|
          2.11.2.19.3. setDampingRatio ...... |WeldJoint:setDampingRatio|
          2.11.2.19.4. setFrequency ......... |WeldJoint:setFrequency|
        2.11.2.20. WheelJoint ............... |love-WheelJoint|
          2.11.2.20.1. getJointSpeed ........ |WheelJoint:getJointSpeed|
          2.11.2.20.2. getJointTranslation .. |WheelJoint:getJointTranslation|
          2.11.2.20.3. getLimits ............ |WheelJoint:getLimits|
          2.11.2.20.4. getMaxMotorTorque .... |WheelJoint:getMaxMotorTorque|
          2.11.2.20.5. getMotorSpeed ........ |WheelJoint:getMotorSpeed|
          2.11.2.20.6. getMotorTorque ....... |WheelJoint:getMotorTorque|
          2.11.2.20.7. getSpringDampingRatio  |WheelJoint:getSpringDampingRatio|
          2.11.2.20.8. getSpringFrequency ... |WheelJoint:getSpringFrequency|
          2.11.2.20.9. setMaxMotorTorque .... |WheelJoint:setMaxMotorTorque|
          2.11.2.20.10. setMotorEnabled ..... |WheelJoint:setMotorEnabled|
          2.11.2.20.11. setMotorSpeed ....... |WheelJoint:setMotorSpeed|
          2.11.2.20.12. setSpringDampingRatio |WheelJoint:setSpringDampingRatio|
          2.11.2.20.13. setSpringFrequency .. |WheelJoint:setSpringFrequency|
        2.11.2.21. World .................... |love-World|
          2.11.2.21.1. destroy .............. |World:destroy|
          2.11.2.21.2. getBodyCount ......... |World:getBodyCount|
          2.11.2.21.3. getBodyList .......... |World:getBodyList|
          2.11.2.21.4. getCallbacks ......... |World:getCallbacks|
          2.11.2.21.5. getContactCount ...... |World:getContactCount|
          2.11.2.21.6. getContactFilter ..... |World:getContactFilter|
          2.11.2.21.7. getContactList ....... |World:getContactList|
          2.11.2.21.8. getGravity ........... |World:getGravity|
          2.11.2.21.9. getJointCount ........ |World:getJointCount|
          2.11.2.21.10. getJointList ........ |World:getJointList|
          2.11.2.21.11. isDestroyed ......... |World:isDestroyed|
          2.11.2.21.12. isLocked ............ |World:isLocked|
          2.11.2.21.13. isSleepingAllowed ... |World:isSleepingAllowed|
          2.11.2.21.14. queryBoundingBox .... |World:queryBoundingBox|
          2.11.2.21.15. rayCast ............. |World:rayCast|
          2.11.2.21.16. setCallbacks ........ |World:setCallbacks|
          2.11.2.21.17. setContactFilter .... |World:setContactFilter|
          2.11.2.21.18. setGravity .......... |World:setGravity|
          2.11.2.21.19. setSleepingAllowed .. |World:setSleepingAllowed|
          2.11.2.21.20. translateOrigin ..... |World:translateOrigin|
          2.11.2.21.21. update .............. |World:update|
      2.11.3. enums ......................... |love.physics-enums|
        2.11.3.1. BodyType .................. |love-BodyType|
        2.11.3.2. JointType ................. |love-JointType|
        2.11.3.3. ShapeType ................. |love-ShapeType|
    2.12. sound ............................. |love.sound|
      2.12.1. functions ..................... |love.sound-functions|
        2.12.1.1. newDecoder ................ |love.sound.newDecoder|
        2.12.1.2. newSoundData .............. |love.sound.newSoundData|
      2.12.2. types ......................... |love.sound-types|
        2.12.2.1. Decoder ................... |love-Decoder|
          2.12.2.1.1. getBitDepth ........... |Decoder:getBitDepth|
          2.12.2.1.2. getChannels ........... |Decoder:getChannels|
          2.12.2.1.3. getDuration ........... |Decoder:getDuration|
          2.12.2.1.4. getSampleRate ......... |Decoder:getSampleRate|
        2.12.2.2. SoundData ................. |love-SoundData|
          2.12.2.2.1. getBitDepth ........... |SoundData:getBitDepth|
          2.12.2.2.2. getChannels ........... |SoundData:getChannels|
          2.12.2.2.3. getDuration ........... |SoundData:getDuration|
          2.12.2.2.4. getSample ............. |SoundData:getSample|
          2.12.2.2.5. getSampleCount ........ |SoundData:getSampleCount|
          2.12.2.2.6. getSampleRate ......... |SoundData:getSampleRate|
          2.12.2.2.7. setSample ............. |SoundData:setSample|
    2.13. system ............................ |love.system|
      2.13.1. functions ..................... |love.system-functions|
        2.13.1.1. getClipboardText .......... |love.system.getClipboardText|
        2.13.1.2. getOS ..................... |love.system.getOS|
        2.13.1.3. getPowerInfo .............. |love.system.getPowerInfo|
        2.13.1.4. getProcessorCount ......... |love.system.getProcessorCount|
        2.13.1.5. openURL ................... |love.system.openURL|
        2.13.1.6. setClipboardText .......... |love.system.setClipboardText|
        2.13.1.7. vibrate ................... |love.system.vibrate|
      2.13.2. enums ......................... |love.system-enums|
        2.13.2.1. PowerState ................ |love-PowerState|
    2.14. thread ............................ |love.thread|
      2.14.1. functions ..................... |love.thread-functions|
        2.14.1.1. getChannel ................ |love.thread.getChannel|
        2.14.1.2. newChannel ................ |love.thread.newChannel|
        2.14.1.3. newThread ................. |love.thread.newThread|
      2.14.2. types ......................... |love.thread-types|
        2.14.2.1. Thread .................... |love-Thread|
          2.14.2.1.1. getError .............. |Thread:getError|
          2.14.2.1.2. start ................. |Thread:start|
          2.14.2.1.3. wait .................. |Thread:wait|
          2.14.2.1.4. isRunning ............. |Thread:isRunning|
        2.14.2.2. Channel ................... |love-Channel|
          2.14.2.2.1. clear ................. |Channel:clear|
          2.14.2.2.2. demand ................ |Channel:demand|
          2.14.2.2.3. getCount .............. |Channel:getCount|
          2.14.2.2.4. peek .................. |Channel:peek|
          2.14.2.2.5. performAtomic ......... |Channel:performAtomic|
          2.14.2.2.6. pop ................... |Channel:pop|
          2.14.2.2.7. push .................. |Channel:push|
          2.14.2.2.8. supply ................ |Channel:supply|
    2.15. timer ............................. |love.timer|
      2.15.1. functions ..................... |love.timer-functions|
        2.15.1.1. getAverageDelta ........... |love.timer.getAverageDelta|
        2.15.1.2. getDelta .................. |love.timer.getDelta|
        2.15.1.3. getFPS .................... |love.timer.getFPS|
        2.15.1.4. getTime ................... |love.timer.getTime|
        2.15.1.5. sleep ..................... |love.timer.sleep|
        2.15.1.6. step ...................... |love.timer.step|
    2.16. touch ............................. |love.touch|
      2.16.1. functions ..................... |love.touch-functions|
        2.16.1.1. getPosition ............... |love.touch.getPosition|
        2.16.1.2. getPressure ............... |love.touch.getPressure|
        2.16.1.3. getTouches ................ |love.touch.getTouches|
    2.17. video ............................. |love.video|
      2.17.1. functions ..................... |love.video-functions|
        2.17.1.1. newVideoStream ............ |love.video.newVideoStream|
      2.17.2. types ......................... |love.video-types|
        2.17.2.1. VideoStream ............... |love-VideoStream|
    2.18. window ............................ |love.window|
      2.18.1. functions ..................... |love.window-functions|
        2.18.1.1. close ..................... |love.window.close|
        2.18.1.2. fromPixels ................ |love.window.fromPixels|
        2.18.1.3. getDisplayName ............ |love.window.getDisplayName|
        2.18.1.4. getFullscreen ............. |love.window.getFullscreen|
        2.18.1.5. getFullscreenModes ........ |love.window.getFullscreenModes|
        2.18.1.6. getIcon ................... |love.window.getIcon|
        2.18.1.7. getMode ................... |love.window.getMode|
        2.18.1.8. getPixelScale ............. |love.window.getPixelScale|
        2.18.1.9. getPosition ............... |love.window.getPosition|
        2.18.1.10. getTitle ................. |love.window.getTitle|
        2.18.1.11. hasFocus ................. |love.window.hasFocus|
        2.18.1.12. hasMouseFocus ............ |love.window.hasMouseFocus|
        2.18.1.13. isCreated ................ |love.window.isCreated|
        2.18.1.14. isDisplaySleepEnabled .... |love.window.isDisplaySleepEnabled|
        2.18.1.15. isVisible ................ |love.window.isVisible|
        2.18.1.16. maximize ................. |love.window.maximize|
        2.18.1.17. minimize ................. |love.window.minimize|
        2.18.1.18. requestAttention ......... |love.window.requestAttention|
        2.18.1.19. setDisplaySleepEnabled ... |love.window.setDisplaySleepEnabled|
        2.18.1.20. setFullscreen ............ |love.window.setFullscreen|
        2.18.1.21. setIcon .................. |love.window.setIcon|
        2.18.1.22. setMode .................. |love.window.setMode|
        2.18.1.23. setPosition .............. |love.window.setPosition|
        2.18.1.24. setTitle ................. |love.window.setTitle|
        2.18.1.25. showMessageBox ........... |love.window.showMessageBox|
        2.18.1.26. toPixels ................. |love.window.toPixels|
      2.18.2. enums ......................... |love.window-enums|
        2.18.2.1. FullscreenType ............ |love-FullscreenType|
        2.18.2.2. MessageBoxType ............ |love-MessageBoxType|
  3. callbacks .............................. |love-callbacks|
      3.0.1. directorydropped ............... |love.directorydropped|
      3.0.2. draw ........................... |love.draw|
      3.0.3. errhand ........................ |love.errhand|
      3.0.4. filedropped .................... |love.filedropped|
      3.0.5. focus .......................... |love.focus|
      3.0.6. gamepadaxis .................... |love.gamepadaxis|
      3.0.7. gamepadpressed ................. |love.gamepadpressed|
      3.0.8. gamepadreleased ................ |love.gamepadreleased|
      3.0.9. joystickadded .................. |love.joystickadded|
      3.0.10. joystickaxis .................. |love.joystickaxis|
      3.0.11. joystickhat ................... |love.joystickhat|
      3.0.12. joystickpressed ............... |love.joystickpressed|
      3.0.13. joystickreleased .............. |love.joystickreleased|
      3.0.14. joystickremoved ............... |love.joystickremoved|
      3.0.15. keypressed .................... |love.keypressed|
      3.0.16. keyreleased ................... |love.keyreleased|
      3.0.17. load .......................... |love.load|
      3.0.18. lowmemory ..................... |love.lowmemory|
      3.0.19. mousefocus .................... |love.mousefocus|
      3.0.20. mousemoved .................... |love.mousemoved|
      3.0.21. mousepressed .................. |love.mousepressed|
      3.0.22. mousereleased ................. |love.mousereleased|
      3.0.23. quit .......................... |love.quit|
      3.0.24. resize ........................ |love.resize|
      3.0.25. run ........................... |love.run|
      3.0.26. textedited .................... |love.textedited|
      3.0.27. textinput ..................... |love.textinput|
      3.0.28. threaderror ................... |love.threaderror|
      3.0.29. touchmoved .................... |love.touchmoved|
      3.0.30. touchpressed .................. |love.touchpressed|
      3.0.31. touchreleased ................. |love.touchreleased|
      3.0.32. update ........................ |love.update|
      3.0.33. visible ....................... |love.visible|
      3.0.34. wheelmoved .................... |love.wheelmoved|
  4. config ................................. |love-config|
    4.1. identity ........................... |love-identity|
    4.2. version ............................ |love-version|
    4.3. console ............................ |love-console|
    4.4. accelerometerjoystick .............. |love-accelerometerjoystick|
    4.5. externalstorage .................... |love-externalstorage|
    4.6. gammacorrect ....................... |love-gammacorrect|
    4.7. window ............................. |love-window|
    4.8. modules ............................ |love-modules|

==============================================================================
1. About                                                          *love-about*

For LOVE (http://love2d.org) version 0.10.1.

Generated from https://github.com/love2d-community/love-api using
  https://github.com/davisdude/vim-love-docs

Made by Davis Claiborne under the zlib license. See LICENSE.md for more info.

==============================================================================
2. modules                                                      *love-modules*

All LOVE modules and their functions, enums, and types.

------------------------------------------------------------------------------
2.1. love                                                          *love.love*

General functions

- Types: 
    - Data                                                         |love-Data|
    - Drawable                                                 |love-Drawable|
    - Object                                                     |love-Object|
- Enums: None

------------------------------------------------------------------------------
2.1.1. functions                                              *love-functions*

The functions of love.

------------------------------------------------------------------------------
2.1.1.1. getVersion                                          *love.getVersion*

Gets the current running version of LÖVE.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - major: <number> The major version of LÖVE, i.e. 0 for version
              0.9.1.
            - minor: <number> The minor version of LÖVE, i.e. 9 for version
              0.9.1.
            - revision: <number> The revision version of LÖVE, i.e. 1 for
              version 0.9.1.
            - codename: <string> The codename of the current version, i.e.
              "Baby Inspector" for version 0.9.1.

------------------------------------------------------------------------------
2.1.2. types                                                      *love-types*

The types of love:

    - Data                                                         |love.Data|
    - Drawable                                                 |love.Drawable|
    - Object                                                     |love.Object|

------------------------------------------------------------------------------
2.1.2.1. Data                                                      *love-Data*

The superclass of all data.

Constructors: None

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: 
    - CompressedData                                     |love-CompressedData|
    - CompressedImageData                           |love-CompressedImageData|
    - FileData                                                 |love-FileData|
    - FontData                                                 |love-FontData|
    - GlyphData                                               |love-GlyphData|
    - ImageData                                               |love-ImageData|
    - SoundData                                               |love-SoundData|

Functions: 
    - getPointer                                             |Data:getPointer|
    - getSize                                                   |Data:getSize|
    - getString                                               |Data:getString|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.1.2.1.1. getPointer                                        *Data:getPointer*

Gets a pointer to the Data.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - pointer: <light userdata> A raw pointer to the Data.

------------------------------------------------------------------------------
2.1.2.1.2. getSize                                              *Data:getSize*

Gets the size of the Data.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - size: <number> The size of the Data in bytes.

------------------------------------------------------------------------------
2.1.2.1.3. getString                                          *Data:getString*

Gets the full Data as a string.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - data: <string> The raw data.

------------------------------------------------------------------------------
2.1.2.2. Drawable                                              *love-Drawable*

Superclass for all things that can be drawn on screen. This is an abstract
type that can't be created directly.

Constructors: None

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: 
    - Canvas                                                     |love-Canvas|
    - Framebuffer                                           |love-Framebuffer|
    - Image                                                       |love-Image|
    - Mesh                                                         |love-Mesh|
    - ParticleSystem                                     |love-ParticleSystem|
    - SpriteBatch                                           |love-SpriteBatch|
    - Text                                                         |love-Text|
    - Texture                                                   |love-Texture|
    - Video                                                       |love-Video|

Functions: None
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.1.2.3. Object                                                  *love-Object*

The superclass of all LÖVE types.

Constructors: None

Supertypes: None

Subtypes: 
    - BezierCurve                                           |love-BezierCurve|
    - Body                                                         |love-Body|
    - Canvas                                                     |love-Canvas|
    - ChainShape                                             |love-ChainShape|
    - Channel                                                   |love-Channel|
    - CircleShape                                           |love-CircleShape|
    - CompressedData                                     |love-CompressedData|
    - CompressedImageData                           |love-CompressedImageData|
    - Contact                                                   |love-Contact|
    - Cursor                                                     |love-Cursor|
    - Data                                                         |love-Data|
    - Decoder                                                   |love-Decoder|
    - DistanceJoint                                       |love-DistanceJoint|
    - Drawable                                                 |love-Drawable|
    - EdgeShape                                               |love-EdgeShape|
    - File                                                         |love-File|
    - FileData                                                 |love-FileData|
    - Fixture                                                   |love-Fixture|
    - Font                                                         |love-Font|
    - FontData                                                 |love-FontData|
    - Framebuffer                                           |love-Framebuffer|
    - FrictionJoint                                       |love-FrictionJoint|
    - GearJoint                                               |love-GearJoint|
    - GlyphData                                               |love-GlyphData|
    - Image                                                       |love-Image|
    - ImageData                                               |love-ImageData|
    - Joint                                                       |love-Joint|
    - Joystick                                                 |love-Joystick|
    - Mesh                                                         |love-Mesh|
    - MotorJoint                                             |love-MotorJoint|
    - MouseJoint                                             |love-MouseJoint|
    - ParticleSystem                                     |love-ParticleSystem|
    - PixelEffect                                           |love-PixelEffect|
    - PolygonShape                                         |love-PolygonShape|
    - PrismaticJoint                                     |love-PrismaticJoint|
    - PulleyJoint                                           |love-PulleyJoint|
    - Quad                                                         |love-Quad|
    - Quad                                                         |love-Quad|
    - RandomGenerator                                   |love-RandomGenerator|
    - Rasterizer                                             |love-Rasterizer|
    - RevoluteJoint                                       |love-RevoluteJoint|
    - RopeJoint                                               |love-RopeJoint|
    - Shader                                                     |love-Shader|
    - Shape                                                       |love-Shape|
    - SoundData                                               |love-SoundData|
    - Source                                                     |love-Source|
    - SpriteBatch                                           |love-SpriteBatch|
    - Text                                                         |love-Text|
    - Texture                                                   |love-Texture|
    - Thread                                                     |love-Thread|
    - Video                                                       |love-Video|
    - VideoStream                                           |love-VideoStream|
    - WeldJoint                                               |love-WeldJoint|
    - WheelJoint                                             |love-WheelJoint|
    - World                                                       |love-World|

Functions: 
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.1.2.3.1. type                                                  *Object:type*

Gets the type of the object as a string.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - type: <string> The type as a string.

------------------------------------------------------------------------------
2.1.2.3.2. typeOf                                              *Object:typeOf*

Checks whether an object is of a certain type. If the object has the type with
the specified name in its hierarchy, this function will return true.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name of the type to check for.
        - `Returns`:
            - b: <boolean> True if the object is of the specified type, false
              otherwise.

------------------------------------------------------------------------------
2.2. audio                                                        *love.audio*

Provides an interface to create noise with the user's speakers.

- Types: 
    - Source                                                     |love-Source|
- Enums: 
    - DistanceModel                                       |love-DistanceModel|
    - SourceType                                             |love-SourceType|
    - TimeUnit                                                 |love-TimeUnit|

------------------------------------------------------------------------------
2.2.1. functions                                        *love.audio-functions*

The functions of audio.

------------------------------------------------------------------------------
2.2.1.1. getDistanceModel                        *love.audio.getDistanceModel*

Returns the distance attenuation model.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - model: <DistanceModel> The current distance model. The default
              is 'inverseclamped'.

------------------------------------------------------------------------------
2.2.1.2. getDopplerScale                          *love.audio.getDopplerScale*

Gets the current global scale factor for velocity-based doppler effects.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - scale: <number> The current doppler scale factor.

------------------------------------------------------------------------------
2.2.1.3. getSourceCount                            *love.audio.getSourceCount*

Returns the number of sources which are currently playing or paused.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - numSources: <number> The number of sources which are currently
              playing or paused.

------------------------------------------------------------------------------
2.2.1.4. getOrientation                            *love.audio.getOrientation*

Returns the orientation of the listener.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - fx: <number> The X component of the forward vector of the
              listener orientation.
            - fy: <number> The Y component of the forward vector of the
              listener orientation.
            - fz: <number> The Z component of the forward vector of the
              listener orientation.
            - ux: <number> The X component of the up vector of the listener
              orientation.
            - uy: <number> The Y component of the up vector of the listener
              orientation.
            - uz: <number> The Z component of the up vector of the listener
              orientation.

------------------------------------------------------------------------------
2.2.1.5. getPosition                                  *love.audio.getPosition*

Returns the position of the listener.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The X position of the listener.
            - y: <number> The Y position of the listener.
            - z: <number> The Z position of the listener.

------------------------------------------------------------------------------
2.2.1.6. getVelocity                                  *love.audio.getVelocity*

Returns the velocity of the listener.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The X velocity of the listener.
            - y: <number> The Y velocity of the listener.
            - z: <number> The Z velocity of the listener.

------------------------------------------------------------------------------
2.2.1.7. getVolume                                      *love.audio.getVolume*

Returns the master volume.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - volume: <number> The current master volume.

------------------------------------------------------------------------------
2.2.1.8. newSource                                      *love.audio.newSource*

Creates a new Source from a file or SoundData. Sources created from SoundData
are always static.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filepath to create a Source from.
            - type: <SourceType> Streaming or static source.
        - `Returns`:
            - source: <Source> A new Source that can play the specified audio.
    2:
        - `Arguments`:
            - file: <File> A File pointing to an audio file.
            - type: <SourceType> Streaming or static source.
        - `Returns`:
            - source: <Source> A new Source that can play the specified audio.
    3:
        - `Arguments`:
            - decoder: <Decoder> The Decoder to create a Source from.
            - type: <SourceType> Streaming or static source.
        - `Returns`:
            - source: <Source> A new Source that can play the specified audio.
    4:
        - `Arguments`:
            - soundData: <SoundData> The SoundData to create a Source from.
        - `Returns`:
            - source: <Source> A new Source that can play the specified audio.
              The SourceType of the returned audio is "static".
    5:
        - `Arguments`:
            - fileData: <FileData> The FileData to create a Source from.
        - `Returns`:
            - source: <Source> A new Source that can play the specified audio.

------------------------------------------------------------------------------
2.2.1.9. pause                                              *love.audio.pause*

Pauses all audio

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - source: <Source> The source on which to pause the playback.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.10. play                                               *love.audio.play*

Plays the specified Source.

Variants:
    1:
        - `Arguments`:
            - source: <Source> The Source to play.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.11. resume                                           *love.audio.resume*

Resumes all audio

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - source: <Source> The source on which to resume the playback.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.12. rewind                                           *love.audio.rewind*

Rewinds all playing audio.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - source: <Source> The source to rewind.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.13. setDistanceModel                       *love.audio.setDistanceModel*

Sets the distance attenuation model.

Variants:
    1:
        - `Arguments`:
            - model: <DistanceModel> The new distance model.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.14. setDopplerScale                         *love.audio.setDopplerScale*

Sets a global scale factor for velocity-based doppler effects. The default
scale value is 1.

Variants:
    1:
        - `Arguments`:
            - scale: <number> The new doppler scale factor. The scale must be
              greater than 0.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.15. setOrientation                           *love.audio.setOrientation*

Sets the orientation of the listener.

Variants:
    1:
        - `Arguments`:
            - fx: <number> The X component of the forward vector of the
              listener orientation.
            - fy: <number> The Y component of the forward vector of the
              listener orientation.
            - fz: <number> The Z component of the forward vector of the
              listener orientation.
            - ux: <number> The X component of the up vector of the listener
              orientation.
            - uy: <number> The Y component of the up vector of the listener
              orientation.
            - uz: <number> The Z component of the up vector of the listener
              orientation.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.16. setPosition                                 *love.audio.setPosition*

Sets the position of the listener, which determines how sounds play.

Variants:
    1:
        - `Arguments`:
            - x: <number> The X position of the listener.
            - y: <number> The Y position of the listener.
            - z: <number> The Z position of the listener.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.17. setVelocity                                 *love.audio.setVelocity*

Sets the velocity of the listener.

Variants:
    1:
        - `Arguments`:
            - x: <number> The X velocity of the listener.
            - y: <number> The Y velocity of the listener.
            - z: <number> The Z velocity of the listener.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.18. setVolume                                     *love.audio.setVolume*

Sets the master volume.

Variants:
    1:
        - `Arguments`:
            - volume: <number> 1.0f is max and 0.0f is off.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.1.19. stop                                               *love.audio.stop*

Stops all playing audio.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - source: <Source> The source on which to stop the playback.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2. types                                                *love.audio-types*

The types of audio:

    - Source                                                     |love.Source|

------------------------------------------------------------------------------
2.2.2.1. Source                              *love-Source* *love.audio-Source*

A Source represents audio you can play back. You can do interesting things
with Sources, like set the volume, pitch, and its position relative to the
listener.

Constructors: 
    - newSource                                         |love.audio.newSource|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - clone                                                     |Source:clone|
    - getAttenuationDistances                 |Source:getAttenuationDistances|
    - getChannels                                         |Source:getChannels|
    - getCone                                                 |Source:getCone|
    - getDirection                                       |Source:getDirection|
    - getDuration                                         |Source:getDuration|
    - getPitch                                               |Source:getPitch|
    - getPosition                                         |Source:getPosition|
    - getRolloff                                           |Source:getRolloff|
    - getType                                                 |Source:getType|
    - getVelocity                                         |Source:getVelocity|
    - getVolume                                             |Source:getVolume|
    - getVolumeLimits                                 |Source:getVolumeLimits|
    - isLooping                                             |Source:isLooping|
    - isPaused                                               |Source:isPaused|
    - isPlaying                                             |Source:isPlaying|
    - isStopped                                             |Source:isStopped|
    - pause                                                     |Source:pause|
    - play                                                       |Source:play|
    - resume                                                   |Source:resume|
    - rewind                                                   |Source:rewind|
    - seek                                                       |Source:seek|
    - setDirection                                       |Source:setDirection|
    - setAttenuationDistances                 |Source:setAttenuationDistances|
    - setCone                                                 |Source:setCone|
    - setLooping                                           |Source:setLooping|
    - setPitch                                               |Source:setPitch|
    - setPosition                                         |Source:setPosition|
    - setRolloff                                           |Source:setRolloff|
    - setVelocity                                         |Source:setVelocity|
    - setVolume                                             |Source:setVolume|
    - setVolumeLimits                                 |Source:setVolumeLimits|
    - stop                                                       |Source:stop|
    - tell                                                       |Source:tell|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.2.2.1.1. clone                                                *Source:clone*

Creates an identical copy of the Source in the stopped state.

Static Sources will use significantly less memory and take much less time to
be created if Source:clone is used to create them instead of
love.audio.newSource, so this method should be preferred when making multiple
Sources which play the same sound.

Cloned Sources inherit all the set-able state of the original Source, but they
are initialized stopped.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - source: <Source> The new identical copy of this Source.

------------------------------------------------------------------------------
2.2.2.1.2. getAttenuationDistances            *Source:getAttenuationDistances*

Returns the reference and maximum distance of the source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ref: <number> The reference distance.
            - max: <number> The maximum distance.

------------------------------------------------------------------------------
2.2.2.1.3. getChannels                                    *Source:getChannels*

Gets the number of channels in the Source. Only 1-channel (mono) Sources can
use directional and positional effects.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - channels: <number> 1 for mono, 2 for stereo.

------------------------------------------------------------------------------
2.2.2.1.4. getCone                                            *Source:getCone*

Gets the Source's directional volume cones. Together with Source:setDirection,
the cone angles allow for the Source's volume to vary depending on its
direction.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - innerAngle: <number> The inner angle from the Source's
              direction, in radians. The Source will play at normal volume if
              the listener is inside the cone defined by this angle.
            - outerAngle: <number> The outer angle from the Source's
              direction, in radians. The Source will play at a volume between
              the normal and outer volumes, if the listener is in between the
              cones defined by the inner and outer angles.
            - outerVolume: <number> The Source's volume when the listener is
              outside both the inner and outer cone angles.

------------------------------------------------------------------------------
2.2.2.1.5. getDirection                                  *Source:getDirection*

Gets the direction of the Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The X part of the direction vector.
            - y: <number> The Y part of the direction vector.
            - z: <number> The Z part of the direction vector.

------------------------------------------------------------------------------
2.2.2.1.6. getDuration                                    *Source:getDuration*

Gets the duration of the Source. For streaming Sources it may not always be
sample-accurate, and may return -1 if the duration cannot be determined at
all.

Variants:
    1:
        - `Arguments`:
            - unit: <TimeUnit> The time unit for the return value.
        - `Returns`:
            - duration: <number> The duration of the Source, or -1 if it
              cannot be determined.

------------------------------------------------------------------------------
2.2.2.1.7. getPitch                                          *Source:getPitch*

Gets the current pitch of the Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - pitch: <number> The pitch, where 1.0 is normal.

------------------------------------------------------------------------------
2.2.2.1.8. getPosition                                    *Source:getPosition*

Gets the position of the Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The X position of the Source.
            - y: <number> The Y position of the Source.
            - z: <number> The Z position of the Source.

------------------------------------------------------------------------------
2.2.2.1.9. getRolloff                                      *Source:getRolloff*

Returns the rolloff factor of the source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - rolloff: <number> The rolloff factor.

------------------------------------------------------------------------------
2.2.2.1.10. getType                                           *Source:getType*

Gets the type (static or stream) of the Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - sourcetype: <SourceType> The type of the source.

------------------------------------------------------------------------------
2.2.2.1.11. getVelocity                                   *Source:getVelocity*

Gets the velocity of the Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The X part of the velocity vector.
            - y: <number> The Y part of the velocity vector.
            - z: <number> The Z part of the velocity vector.

------------------------------------------------------------------------------
2.2.2.1.12. getVolume                                       *Source:getVolume*

Gets the current volume of the Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - volume: <number> The volume of the Source, where 1.0 is normal
              volume.

------------------------------------------------------------------------------
2.2.2.1.13. getVolumeLimits                           *Source:getVolumeLimits*

Returns the volume limits of the source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The minimum volume.
            - max: <number> The maximum volume.

------------------------------------------------------------------------------
2.2.2.1.14. isLooping                                       *Source:isLooping*

Returns whether the Source will loop.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - loop: <boolean> True if the Source will loop, false otherwise.

------------------------------------------------------------------------------
2.2.2.1.15. isPaused                                         *Source:isPaused*

Returns whether the Source is paused.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - paused: <boolean> True if the Source is paused, false otherwise.

------------------------------------------------------------------------------
2.2.2.1.16. isPlaying                                       *Source:isPlaying*

Returns whether the Source is playing.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - playing: <boolean> True if the Source is playing, false
              otherwise.

------------------------------------------------------------------------------
2.2.2.1.17. isStopped                                       *Source:isStopped*

Returns whether the Source is stopped.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - stopped: <boolean> True if the Source is stopped, false
              otherwise.

------------------------------------------------------------------------------
2.2.2.1.18. pause                                               *Source:pause*

Pauses the Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.19. play                                                 *Source:play*

Starts playing the Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - success: <boolean> True if the Source started playing
              successfully, false otherwise.

------------------------------------------------------------------------------
2.2.2.1.20. resume                                             *Source:resume*

Resumes a paused Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.21. rewind                                             *Source:rewind*

Rewinds a Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.22. seek                                                 *Source:seek*

Sets the playing position of the Source.

Variants:
    1:
        - `Arguments`:
            - position: <number> The position to seek to.
            - unit: <TimeUnit> The unit of the position value.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.23. setDirection                                 *Source:setDirection*

Sets the direction vector of the Source. A zero vector makes the source
non-directional.

Variants:
    1:
        - `Arguments`:
            - x: <number> The X part of the direction vector.
            - y: <number> The Y part of the direction vector.
            - z: <number> The Z part of the direction vector.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.24. setAttenuationDistances           *Source:setAttenuationDistances*

Sets the reference and maximum distance of the source.

Variants:
    1:
        - `Arguments`:
            - ref: <number> The new reference distance.
            - max: <number> The new maximum distance.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.25. setCone                                           *Source:setCone*

Sets the Source's directional volume cones. Together with Source:setDirection,
the cone angles allow for the Source's volume to vary depending on its
direction.

Variants:
    1:
        - `Arguments`:
            - innerAngle: <number> The inner angle from the Source's
              direction, in radians. The Source will play at normal volume if
              the listener is inside the cone defined by this angle.
            - outerAngle: <number> The outer angle from the Source's
              direction, in radians. The Source will play at a volume between
              the normal and outer volumes, if the listener is in between the
              cones defined by the inner and outer angles.
            - outerVolume: <number> The Source's volume when the listener is
              outside both the inner and outer cone angles.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.26. setLooping                                     *Source:setLooping*

Sets whether the Source should loop.

Variants:
    1:
        - `Arguments`:
            - loop: <boolean> True if the source should loop, false otherwise.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.27. setPitch                                         *Source:setPitch*

Sets the pitch of the Source.

Variants:
    1:
        - `Arguments`:
            - pitch: <number> Calculated with regard to 1 being the base
              pitch. Each reduction by 50 percent equals a pitch shift of -12
              semitones (one octave reduction). Each doubling equals a pitch
              shift of 12 semitones (one octave increase). Zero is not a legal
              value.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.28. setPosition                                   *Source:setPosition*

Sets the position of the Source.

Variants:
    1:
        - `Arguments`:
            - x: <number> The X position of the Source.
            - y: <number> The Y position of the Source.
            - z: <number> The Z position of the Source.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.29. setRolloff                                     *Source:setRolloff*

Sets the rolloff factor.

Variants:
    1:
        - `Arguments`:
            - rolloff: <number> The new rolloff factor.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.30. setVelocity                                   *Source:setVelocity*

Sets the velocity of the Source.

This does not change the position of the Source, but is used to calculate the
doppler effect.

Variants:
    1:
        - `Arguments`:
            - x: <number> The X part of the velocity vector.
            - y: <number> The Y part of the velocity vector.
            - z: <number> The Z part of the velocity vector.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.31. setVolume                                       *Source:setVolume*

Sets the volume of the Source.

Variants:
    1:
        - `Arguments`:
            - volume: <number> The volume of the Source, where 1.0 is normal
              volume.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.32. setVolumeLimits                           *Source:setVolumeLimits*

Sets the volume limits of the source. The limits have to be numbers from 0 to
1.

Variants:
    1:
        - `Arguments`:
            - min: <number> The minimum volume.
            - max: <number> The maximum volume.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.33. stop                                                 *Source:stop*

Stops a Source.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.2.2.1.34. tell                                                 *Source:tell*

Gets the currently playing position of the Source.

Variants:
    1:
        - `Arguments`:
            - unit: <TimeUnit> The type of unit for the return value.
        - `Returns`:
            - position: <number> The currently playing position of the Source.

------------------------------------------------------------------------------
2.2.3. enums                                                *love.audio-enums*

Enums within love.audio:
    DistanceModel                                         |love.DistanceModel|
    SourceType                                               |love.SourceType|
    TimeUnit                                                   |love.TimeUnit|

------------------------------------------------------------------------------
2.2.3.1. DistanceModel         *love-DistanceModel* *love.audio-DistanceModel*

The different distance models.

Constants:

    none                   Sources do not get attenuated.
    inverse                Inverse distance attenuation.
    inverseclamped         Inverse distance attenuation. Gain is clamped. In
                           version 0.9.2 and older this is named inverse
                           clamped.
    linear                 Linear attenuation.
    linearclamped          Linear attenuation. Gain is clamped. In version
                           0.9.2 and older this is named linear clamped.
    exponent               Exponential attenuation.
    exponentclamped        Exponential attenuation. Gain is clamped. In
                           version 0.9.2 and older this is named exponent
                           clamped.

------------------------------------------------------------------------------
2.2.3.2. SourceType                  *love-SourceType* *love.audio-SourceType*

Types of audio sources.

A good rule of thumb is to use stream for music files and static for all short
sound effects. Basically, you want to avoid loading large files into memory at
once.

Constants:

    static                 Decode the entire sound at once.
    stream                 Stream the sound; decode it gradually.

------------------------------------------------------------------------------
2.2.3.3. TimeUnit                        *love-TimeUnit* *love.audio-TimeUnit*

Units that represent time.

Constants:

    seconds                Regular seconds.
    samples                Audio samples.

------------------------------------------------------------------------------
2.3. event                                                        *love.event*

Manages events, like keypresses.

- Types: None
- Enums: 
    - Event                                                       |love-Event|

------------------------------------------------------------------------------
2.3.1. functions                                        *love.event-functions*

The functions of event.

------------------------------------------------------------------------------
2.3.1.1. clear                                              *love.event.clear*

Clears the event queue.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.3.1.2. poll                                                *love.event.poll*

Returns an iterator for messages in the event queue.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - i: <function> Iterator function usable in a for loop.

------------------------------------------------------------------------------
2.3.1.3. pump                                                *love.event.pump*

Pump events into the event queue. This is a low-level function, and is usually
not called by the user, but by love.run. Note that this does need to be called
for any OS to think you're still running, and if you want to handle
OS-generated events at all (think callbacks). love.event.pump can only be
called from the main thread, but afterwards, the rest of love.event can be
used from any other thread.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.3.1.4. push                                                *love.event.push*

Adds an event to the event queue.

Variants:
    1:
        - `Arguments`:
            - e: <Event> The name of the event.
            - a: <mixed> First event argument.
            - b: <mixed> Second event argument.
            - c: <mixed> Third event argument.
            - d: <mixed> Fourth event argument.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.3.1.5. quit                                                *love.event.quit*

Adds the quit event to the queue.

The quit event is a signal for the event handler to close LÖVE. It's possible
to abort the exit process with the love.quit callback.

Variants:
    1:
        - `Arguments`:
            - exitstatus: <number> The program exit status to use when closing
              the application.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.3.1.6. wait                                                *love.event.wait*

Like love.event.poll but blocks until there is an event in the queue.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - e: <Event> The type of event.
            - a: <mixed> First event argument.
            - b: <mixed> Second event argument.
            - c: <mixed> Third event argument.
            - d: <mixed> Fourth event argument.

------------------------------------------------------------------------------
2.3.2. enums                                                *love.event-enums*

Enums within love.event:
    Event                                                         |love.Event|

------------------------------------------------------------------------------
2.3.2.1. Event                                 *love-Event* *love.event-Event*

Arguments to love.event.push() and the like.

Constants:

    focus                  Window focus gained or lost
    joystickaxis           Joystick axis motion
    joystickhat            Joystick hat pressed
    joystickpressed        Joystick pressed
    joystickreleased       Joystick released
    keypressed             Key pressed
    keyreleased            Key released
    mousefocus             Window mouse focus gained or lost
    mousepressed           Mouse pressed
    mousereleased          Mouse released
    resize                 Window size changed by the user
    threaderror            A Lua error has occurred in a thread.
    quit                   
    visible                Window is minimized or un-minimized by the user

------------------------------------------------------------------------------
2.4. filesystem                                              *love.filesystem*

Provides an interface to the user's filesystem.

- Types: 
    - File                                                         |love-File|
    - FileData                                                 |love-FileData|
- Enums: 
    - BufferMode                                             |love-BufferMode|
    - FileDecoder                                           |love-FileDecoder|
    - FileMode                                                 |love-FileMode|

------------------------------------------------------------------------------
2.4.1. functions                                   *love.filesystem-functions*

The functions of filesystem.

------------------------------------------------------------------------------
2.4.1.1. append                                       *love.filesystem.append*

Append data to an existing file.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name (and path) of the file.
            - data: <string> The data that should be written to the file
            - size: <number> How many bytes to write.
        - `Returns`:
            - success: <boolean> True if the operation was successful, or nil
              if there was an error.
            - errormsg: <string> The error message on failure.

------------------------------------------------------------------------------
2.4.1.2. areSymlinksEnabled               *love.filesystem.areSymlinksEnabled*

Gets whether love.filesystem follows symbolic links.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enable: <boolean> Whether love.filesystem follows symbolic
              links.

------------------------------------------------------------------------------
2.4.1.3. createDirectory                     *love.filesystem.createDirectory*

Creates a directory.

Variants:
    1:
        - `Arguments`:
            - name: <string> The directory to create.
        - `Returns`:
            - success: <boolean> True if the directory was created, false if
              not.

------------------------------------------------------------------------------
2.4.1.4. exists                                       *love.filesystem.exists*

Check whether a file or directory exists.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The path to a potential file or directory.
        - `Returns`:
            - exists: <boolean> True if there is a file or directory with the
              specified name. False otherwise.

------------------------------------------------------------------------------
2.4.1.5. getAppdataDirectory             *love.filesystem.getAppdataDirectory*

Returns the application data directory (could be the same as getUserDirectory)

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - path: <string> The path of the application data directory.

------------------------------------------------------------------------------
2.4.1.6. getDirectoryItems                 *love.filesystem.getDirectoryItems*

Returns a table with the names of files and subdirectories in the specified
path. The table is not sorted in any way; the order is undefined.

If the path passed to the function exists in the game and the save directory,
it will list the files and directories from both places.

Variants:
    1:
        - `Arguments`:
            - dir: <string> The directory.
        - `Returns`:
            - items: <table> A sequence with the names of all files and
              subdirectories as strings.

------------------------------------------------------------------------------
2.4.1.7. getIdentity                             *love.filesystem.getIdentity*

Gets the write directory name for your game. Note that this only returns the
name of the folder to store your files in, not the full location.

Variants:
    1:
        - `Arguments`:
            - name: <string> The identity that is used as write directory.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.4.1.8. getLastModified                     *love.filesystem.getLastModified*

Gets the last modification time of a file.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The path and name to a file.
        - `Returns`:
            - modtime: <number> The last modification time in seconds since
              the unix epoch or nil on failure.
            - errormsg: <string> The error message on failure.

------------------------------------------------------------------------------
2.4.1.9. getRealDirectory                   *love.filesystem.getRealDirectory*

Gets the platform-specific absolute path of the directory containing a
filepath.

This can be used to determine whether a file is inside the save directory or
the game's source .love.

Variants:
    1:
        - `Arguments`:
            - filepath: <string> The filepath to get the directory of.
        - `Returns`:
            - realdir: <string> The platform-specific full path of the
              directory containing the filepath.

------------------------------------------------------------------------------
2.4.1.10. getRequirePath                      *love.filesystem.getRequirePath*

Gets the filesystem paths that will be searched when require is called.

The paths string returned by this function is a sequence of path templates
separated by semicolons. The argument passed to require will be inserted in
place of any question mark ("?") character in each template (after the dot
characters in the argument passed to require are replaced by directory
separators.)

The paths are relative to the game's source and save directories, as well as
any paths mounted with love.filesystem.mount.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - paths: <string> The paths that the require function will check
              in love's filesystem.

------------------------------------------------------------------------------
2.4.1.11. getSaveDirectory                  *love.filesystem.getSaveDirectory*

Gets the full path to the designated save directory. This can be useful if you
want to use the standard io library (or something else) to read or write in
the save directory.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - path: <string> The absolute path to the save directory.

------------------------------------------------------------------------------
2.4.1.12. getSize                                    *love.filesystem.getSize*

Gets the size in bytes of a file.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The path and name to a file.
        - `Returns`:
            - size: <number> The size in bytes of the file, or nil on failure.
            - errormsg: <string> The error message on failure.

------------------------------------------------------------------------------
2.4.1.13. getSourceBaseDirectory      *love.filesystem.getSourceBaseDirectory*

Returns the full path to the directory containing the .love file. If the game
is fused to the LÖVE executable, then the directory containing the executable
is returned.

If love.filesystem.isFused is true, the path returned by this function can be
passed to love.filesystem.mount, which will make the directory containing the
main game readable by love.filesystem.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - path: <string> The full platform-dependent path of the directory
              containing the .love file.

------------------------------------------------------------------------------
2.4.1.14. getUserDirectory                  *love.filesystem.getUserDirectory*

Returns the path of the user's directory.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - path: <string> The path of the user's directory.

------------------------------------------------------------------------------
2.4.1.15. getWorkingDirectory            *love.filesystem.getWorkingDirectory*

Gets the current working directory.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - path: <string> The current working directory.

------------------------------------------------------------------------------
2.4.1.16. isDirectory                            *love.filesystem.isDirectory*

Check whether something is a directory.

Variants:
    1:
        - `Arguments`:
            - path: <string> The path to a potential directory.
        - `Returns`:
            - isDir: <boolean> True if there is a directory with the specified
              name. False otherwise.

------------------------------------------------------------------------------
2.4.1.17. isFile                                      *love.filesystem.isFile*

Check whether something is a file.

Variants:
    1:
        - `Arguments`:
            - path: <string> The path to a potential file.
        - `Returns`:
            - isFile: <boolean> True if there is a file with the specified
              name. False otherwise.

------------------------------------------------------------------------------
2.4.1.18. isFused                                    *love.filesystem.isFused*

Gets whether the game is in fused mode or not.

If a game is in fused mode, its save directory will be directly in the Appdata
directory instead of Appdata/LOVE/. The game will also be able to load C Lua
dynamic libraries which are located in the save directory.

A game is in fused mode if the source .love has been fused to the executable
(see Game Distribution), or if "--fused" has been given as a command-line
argument when starting the game.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - fused: <boolean> True if the game is in fused mode, false
              otherwise.

------------------------------------------------------------------------------
2.4.1.19. isSymlink                                *love.filesystem.isSymlink*

Gets whether a filepath is actually a symbolic link.

If symbolic links are not enabled (via love.filesystem.setSymlinksEnabled),
this function will always return false.

Variants:
    1:
        - `Arguments`:
            - path: <string> The file or directory path to check.
        - `Returns`:
            - symlink: <boolean> True if the path is a symbolic link, false
              otherwise.

------------------------------------------------------------------------------
2.4.1.20. lines                                        *love.filesystem.lines*

Iterate over the lines in a file.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name (and path) of the file.
        - `Returns`:
            - iterator: <function> A function that iterates over all the lines
              in the file.

------------------------------------------------------------------------------
2.4.1.21. load                                          *love.filesystem.load*

Load a file (but not run it).

Variants:
    1:
        - `Arguments`:
            - name: <string> The name (and path) of the file.
        - `Returns`:
            - chunk: <function> The loaded chunk.

------------------------------------------------------------------------------
2.4.1.22. mount                                        *love.filesystem.mount*

Mounts a zip file or folder in the game's save directory for reading.

Variants:
    1:
        - `Arguments`:
            - archive: <string> The folder or zip file in the game's save
              directory to mount.
            - mountpoint: <string> The new path the archive will be mounted
              to.
        - `Returns`:
            - success: <boolean> True if the archive was successfully mounted,
              false otherwise.
    2:
        - `Arguments`:
            - archive: <string> The folder or zip file in the game's save
              directory to mount.
            - mountpoint: <string> The new path the archive will be mounted
              to.
            - appendToPath: <string> Whether the archive will be searched when
              reading a filepath before or after already-mounted archives.
              This includes the game's source and save directories.
        - `Returns`:
            - success: <boolean> True if the archive was successfully mounted,
              false otherwise.

------------------------------------------------------------------------------
2.4.1.23. newFile                                    *love.filesystem.newFile*

Creates a new File object. It needs to be opened before it can be accessed.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filename of the file to read.
            - mode: <FileMode> The mode to open the file in.
        - `Returns`:
            - file: <File> The new File object, or nil if an error occurred.
            - errorstr: <string> The error string if an error occurred.

------------------------------------------------------------------------------
2.4.1.24. newFileData                            *love.filesystem.newFileData*

Creates a new FileData object.

Variants:
    1:
        - `Arguments`:
            - contents: <string> The contents of the file.
            - name: <string> The name of the file.
            - decoder: <FileDecoder> The method to use when decoding the
              contents.
        - `Returns`:
            - data: <FileData> Your new FileData.
    2:
        - `Arguments`:
            - filepath: <string> Path to the file.
        - `Returns`:
            - data: <FileData> The new FileData, or nil if an error occurred.
            - err: <string> The error string, if an error occurred.

------------------------------------------------------------------------------
2.4.1.25. read                                          *love.filesystem.read*

Read the contents of a file.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name (and path) of the file.
            - bytes: <number> How many bytes to read.
        - `Returns`:
            - contents: <string> The file contents.
            - size: <number> How many bytes have been read.

------------------------------------------------------------------------------
2.4.1.26. remove                                      *love.filesystem.remove*

Removes a file or directory.

Variants:
    1:
        - `Arguments`:
            - name: <string> The file or directory to remove.
        - `Returns`:
            - success: <boolean> True if the file/directory was removed, false
              otherwise.

------------------------------------------------------------------------------
2.4.1.27. setIdentity                            *love.filesystem.setIdentity*

Sets the write directory for your game. Note that you can only set the name of
the folder to store your files in, not the location.

Variants:
    1:
        - `Arguments`:
            - name: <string> The new identity that will be used as write
              directory.
            - appendToPath: <boolean> Whether the identity directory will be
              searched when reading a filepath before or after the game's
              source directory and any currently mounted archives.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.4.1.28. setRequirePath                      *love.filesystem.setRequirePath*

Sets the filesystem paths that will be searched when require is called.

The paths string given to this function is a sequence of path templates
separated by semicolons. The argument passed to require will be inserted in
place of any question mark ("?") character in each template (after the dot
characters in the argument passed to require are replaced by directory
separators.)

The paths are relative to the game's source and save directories, as well as
any paths mounted with love.filesystem.mount.

Variants:
    1:
        - `Arguments`:
            - paths: <string> The paths that the require function will check
              in love's filesystem.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.4.1.29. setSource                                *love.filesystem.setSource*

Sets the source of the game, where the code is present. This function can only
be called once, and is normally automatically done by LÖVE.

Variants:
    1:
        - `Arguments`:
            - path: <string> Absolute path to the game's source folder.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.4.1.30. setSymlinksEnabled              *love.filesystem.setSymlinksEnabled*

Sets whether love.filesystem follows symbolic links. It is enabled by default
in version 0.10.0 and newer, and disabled by default in 0.9.2.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> Whether love.filesystem should follow symbolic
              links.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.4.1.31. unmount                                    *love.filesystem.unmount*

Unmounts a zip file or folder previously mounted for reading with
love.filesystem.mount.

Variants:
    1:
        - `Arguments`:
            - archive: <string> The folder or zip file in the game's save
              directory which is currently mounted.
        - `Returns`:
            - success: <boolean> True if the archive was successfully
              unmounted, false otherwise.

------------------------------------------------------------------------------
2.4.1.32. write                                        *love.filesystem.write*

Write data to a file.

If you are getting the error message "Could not set write directory", try
setting the save directory. This is done either with
love.filesystem.setIdentity or by setting the identity field in love.conf.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name (and path) of the file.
            - data: <string> The data that should be written to the file
            - size: <number> How many bytes to write.
        - `Returns`:
            - success: <boolean> If the operation was successful

------------------------------------------------------------------------------
2.4.2. types                                           *love.filesystem-types*

The types of filesystem:

    - File                                                         |love.File|
    - FileData                                                 |love.FileData|

------------------------------------------------------------------------------
2.4.2.1. File                               *love-File* *love.filesystem-File*

Represents a file on the filesystem.

Constructors: 
    - newFile                                        |love.filesystem.newFile|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - close                                                       |File:close|
    - flush                                                       |File:flush|
    - getBuffer                                               |File:getBuffer|
    - getFilename                                           |File:getFilename|
    - getMode                                                   |File:getMode|
    - getSize                                                   |File:getSize|
    - isEOF                                                       |File:isEOF|
    - isOpen                                                     |File:isOpen|
    - lines                                                       |File:lines|
    - open                                                         |File:open|
    - read                                                         |File:read|
    - seek                                                         |File:seek|
    - setBuffer                                               |File:setBuffer|
    - write                                                       |File:write|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.4.2.1.1. close                                                  *File:close*

Closes a file.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - success: <boolean> Whether closing was successful.

------------------------------------------------------------------------------
2.4.2.1.2. flush                                                  *File:flush*

Flushes any buffered written data in the file to the disk.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - success: <boolean> Whether the file successfully flushed any
              buffered data to the disk.
            - err: <string> The error string, if an error occurred and the
              file could not be flushed.

------------------------------------------------------------------------------
2.4.2.1.3. getBuffer                                          *File:getBuffer*

Gets the buffer mode of a file.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - mode: <BufferMode> The current buffer mode of the file.
            - size: <number> The maximum size in bytes of the file's buffer.

------------------------------------------------------------------------------
2.4.2.1.4. getFilename                                      *File:getFilename*

Gets the filename that the File object was created with. If the file object
originated from the love.filedropped callback, the filename will be the full
platform-dependent file path.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - filename: <string> The filename of the File.

------------------------------------------------------------------------------
2.4.2.1.5. getMode                                              *File:getMode*

Gets the FileMode the file has been opened with.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - mode: <FileMode> The mode this file has been opened with.

------------------------------------------------------------------------------
2.4.2.1.6. getSize                                              *File:getSize*

Returns the file size.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - size: <number> The file size

------------------------------------------------------------------------------
2.4.2.1.7. isEOF                                                  *File:isEOF*

Gets whether end-of-file has been reached.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - eof: <boolean> Whether EOF has been reached.

------------------------------------------------------------------------------
2.4.2.1.8. isOpen                                                *File:isOpen*

Gets whether the file is open.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - open: <boolean> True if the file is currently open, false
              otherwise.

------------------------------------------------------------------------------
2.4.2.1.9. lines                                                  *File:lines*

Iterate over all the lines in a file

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - iterator: <function> The iterator (can be used in for loops)

------------------------------------------------------------------------------
2.4.2.1.10. open                                                   *File:open*

Open the file for write, read or append.

If you are getting the error message "Could not set write directory", try
setting the save directory. This is done either with
love.filesystem.setIdentity or by setting the identity field in love.conf.

Variants:
    1:
        - `Arguments`:
            - mode: <FileMode> The mode to open the file in.
        - `Returns`:
            - success: <boolean> True on success, false otherwise.

------------------------------------------------------------------------------
2.4.2.1.11. read                                                   *File:read*

Read a number of bytes from a file.

Variants:
    1:
        - `Arguments`:
            - bytes: <number> The number of bytes to read
        - `Returns`:
            - contents: <string> The contents of the read bytes.
            - size: <number> How many bytes have been read.

------------------------------------------------------------------------------
2.4.2.1.12. seek                                                   *File:seek*

Seek to a position in a file.

Variants:
    1:
        - `Arguments`:
            - position: <number> The position to seek to.
        - `Returns`:
            - success: <boolean> Whether the operation was successful.

------------------------------------------------------------------------------
2.4.2.1.13. setBuffer                                         *File:setBuffer*

Sets the buffer mode for a file opened for writing or appending. Files with
buffering enabled will not write data to the disk until the buffer size limit
is reached, depending on the buffer mode.

Variants:
    1:
        - `Arguments`:
            - mode: <BufferMode> The buffer mode to use.
            - size: <number> The maximum size in bytes of the file's buffer.
        - `Returns`:
            - success: <boolean> Whether the buffer mode was successfully set.
            - errorstr: <string> The error string, if the buffer mode could
              not be set and an error occurred.

------------------------------------------------------------------------------
2.4.2.1.14. write                                                 *File:write*

Write data to a file.

Variants:
    1:
        - `Arguments`:
            - data: <string> The data to write.
            - size: <number> How many bytes to write.
        - `Returns`:
            - success: <boolean> Whether the operation was successful.

------------------------------------------------------------------------------
2.4.2.2. FileData                   *love-FileData* *love.filesystem-FileData*

Data representing the contents of a file.

Constructors: 
    - newFileData                                |love.filesystem.newFileData|

Supertypes: 
    - Data                                                         |love-Data|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getExtension                                     |FileData:getExtension|
    - getFilename                                       |FileData:getFilename|
    - getPointer                                             |Data:getPointer|
    - getSize                                                   |Data:getSize|
    - getString                                               |Data:getString|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.4.2.2.1. getExtension                                *FileData:getExtension*

Gets the extension of the FileData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ext: <string> The extension of the file the FileData represents.

------------------------------------------------------------------------------
2.4.2.2.2. getFilename                                  *FileData:getFilename*

Gets the filename of the FileData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - name: <string> The name of the file the FileData represents.

------------------------------------------------------------------------------
2.4.3. enums                                           *love.filesystem-enums*

Enums within love.filesystem:
    BufferMode                                               |love.BufferMode|
    FileDecoder                                             |love.FileDecoder|
    FileMode                                                   |love.FileMode|

------------------------------------------------------------------------------
2.4.3.1. BufferMode             *love-BufferMode* *love.filesystem-BufferMode*

Buffer modes for File objects.

Constants:

    none                   No buffering. The result of write and append
                           operations appears immediately.
    line                   Line buffering. Write and append operations are
                           buffered until a newline is output or the buffer
                           size limit is reached.
    full                   Full buffering. Write and append operations are
                           always buffered until the buffer size limit is
                           reached.

------------------------------------------------------------------------------
2.4.3.2. FileDecoder          *love-FileDecoder* *love.filesystem-FileDecoder*

How to decode a given FileData.

Constants:

    file                   The data is unencoded.
    base64                 The data is base64-encoded.

------------------------------------------------------------------------------
2.4.3.3. FileMode                   *love-FileMode* *love.filesystem-FileMode*

The different modes you can open a file in.

Constants:

    r                      Open a file for read.
    w                      Open a file for write.
    a                      Open a file for append.
    c                      Do not open a file (represents a closed file.)

------------------------------------------------------------------------------
2.5. graphics                                                  *love.graphics*

The primary responsibility for the love.graphics module is the drawing of
lines, shapes, text, Images and other Drawable objects onto the screen. Its
secondary responsibilities include loading external files (including Images
and Fonts) into memory, creating specialized objects (such as ParticleSystems
or Framebuffers) and managing screen geometry.

LÖVE's coordinate system is rooted in the upper-left corner of the screen,
which is at location (0, 0). The x-axis is horizontal: larger values are
further to the right. The y-axis is vertical: larger values are further
towards the bottom.

In many cases, you draw images or shapes in terms of their upper-left corner
(See the picture above).

Many of the functions are used to manipulate the graphics coordinate system,
which is essentially the way coordinates are mapped to the display. You can
change the position, scale, and even rotation in this way.

- Types: 
    - Canvas                                                     |love-Canvas|
    - Font                                                         |love-Font|
    - Mesh                                                         |love-Mesh|
    - Image                                                       |love-Image|
    - ParticleSystem                                     |love-ParticleSystem|
    - Quad                                                         |love-Quad|
    - Shader                                                     |love-Shader|
    - SpriteBatch                                           |love-SpriteBatch|
    - Text                                                         |love-Text|
    - Texture                                                   |love-Texture|
    - Video                                                       |love-Video|
- Enums: 
    - AlignMode                                               |love-AlignMode|
    - ArcType                                                   |love-ArcType|
    - AreaSpreadDistribution                     |love-AreaSpreadDistribution|
    - BlendAlphaMode                                     |love-BlendAlphaMode|
    - BlendMode                                               |love-BlendMode|
    - CanvasFormat                                         |love-CanvasFormat|
    - CompareMode                                           |love-CompareMode|
    - DrawMode                                                 |love-DrawMode|
    - FilterMode                                             |love-FilterMode|
    - GraphicsFeature                                   |love-GraphicsFeature|
    - GraphicsLimit                                       |love-GraphicsLimit|
    - LineJoin                                                 |love-LineJoin|
    - LineStyle                                               |love-LineStyle|
    - MeshDrawMode                                         |love-MeshDrawMode|
    - ParticleInsertMode                             |love-ParticleInsertMode|
    - PointStyle                                             |love-PointStyle|
    - SpriteBatchUsage                                 |love-SpriteBatchUsage|
    - StackType                                               |love-StackType|
    - StencilAction                                       |love-StencilAction|
    - WrapMode                                                 |love-WrapMode|

------------------------------------------------------------------------------
2.5.1. functions                                     *love.graphics-functions*

The functions of graphics.

------------------------------------------------------------------------------
2.5.1.1. arc                                               *love.graphics.arc*

Draws a filled or unfilled arc at position (x, y). The arc is drawn from
angle1 to angle2 in radians. The segments parameter determines how many
segments are used to draw the arc. The more segments, the smoother the edge.

Variants:
    1:
        - 'Description': Draws an arc using the "pie" ArcType.
        - `Arguments`:
            - drawmode: <DrawMode> How to draw the arc.
            - x: <number> The position of the center along x-axis.
            - y: <number> The position of the center along y-axis.
            - radius: <number> Radius of the arc.
            - angle1: <number> The angle at which the arc begins.
            - angle2: <number> The angle at which the arc terminates.
            - segments: <number> The number of segments used for drawing the
              arc.
        - `Returns`: Nothing
    2:
        - 'Description': Draws an arc using the "pie" ArcType.
        - `Arguments`:
            - drawmode: <DrawMode> How to draw the arc.
            - arctype: <ArcType> The type of arc to draw.
            - x: <number> The position of the center along x-axis.
            - y: <number> The position of the center along y-axis.
            - radius: <number> Radius of the arc.
            - angle1: <number> The angle at which the arc begins.
            - angle2: <number> The angle at which the arc terminates.
            - segments: <number> The number of segments used for drawing the
              arc.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.2. circle                                         *love.graphics.circle*

Draws a circle.

Variants:
    1:
        - `Arguments`:
            - mode: <DrawMode> How to draw the circle.
            - x: <number> The position of the center along x-axis.
            - y: <number> The position of the center along y-axis.
            - radius: <number> The radius of the circle.
            - segments: <number> The number of segments used for drawing the
              circle.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.3. clear                                           *love.graphics.clear*

Clears the screen to the background color in LÖVE 0.9.2 and earlier, or to
the specified color in 0.10.0 and newer.

This function is called automatically before love.draw in the default love.run
function. See the example in love.run for a typical use of this function.

Note that the scissor area bounds the cleared region.

Variants:
    1:
        - 'Description': Clears the screen to the background color in 0.9.2
          and earlier, or to transparent black (0, 0, 0, 0) in LÖVE 0.10.0
          and newer.
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - 'Description': Clears the screen or active Canvas to the specified
          color.
        - `Arguments`:
            - r: <number> The red channel of the color to clear the screen to.
            - g: <number> The green channel of the color to clear the screen
              to.
            - b: <number> The blue channel of the color to clear the screen
              to.
            - a: <number> The alpha channel of the color to clear the screen
              to.
        - `Returns`: Nothing
    3:
        - 'Description': Clears multiple active Canvases to different colors,
          if multiple Canvases are active at once via love.graphics.setCanvas.
        - `Arguments`:
            - color: <table> A table in the form of {r, g, b, a} containing
              the color to clear the first active Canvas to.
            - ...: <table> Additional tables for each active Canvas.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.4. discard                                       *love.graphics.discard*

Discards (trashes) the contents of the screen or active Canvas. This is a
performance optimization function with niche use cases.

If the active Canvas has just been changed and the "replace" BlendMode is
about to be used to draw something which covers the entire screen, calling
love.graphics.discard rather than calling love.graphics.clear or doing nothing
may improve performance on mobile devices.

On some desktop systems this function may do nothing.

Variants:
    1:
        - `Arguments`:
            - discardcolor: <boolean> Whether to discard the texture(s) of the
              active Canvas(es) (the contents of the screen if no Canvas is
              active).
            - discardstencil: <boolean> Whether to discard the contents of the
              stencil buffer of the screen / active Canvas.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - discardcolors: <table> An array containing boolean values
              indicating whether to discard the texture of each active Canvas,
              when multiple simultaneous Canvases are active.
            - discardstencil: <boolean> Whether to discard the contents of the
              stencil buffer of the screen / active Canvas.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.5. draw                                             *love.graphics.draw*

Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh,
or Video) on the screen with optional rotation, scaling and shearing.

Objects are drawn relative to their local coordinate system. The origin is by
default located at the top left corner of Image and Canvas. All scaling,
shearing, and rotation arguments transform the object relative to that point.
Also, the position of the origin can be specified on the screen coordinate
system.

It's possible to rotate an object about its center by offsetting the origin to
the center. Angles must be given in radians for rotation. One can also use a
negative scaling factor to flip about its centerline.

Note that the offsets are applied before rotation, scaling, or shearing;
scaling and shearing are applied before rotation.

The right and bottom edges of the object are shifted at an angle defined by
the shearing factors.

Variants:
    1:
        - `Arguments`:
            - drawable: <Drawable> A drawable object.
            - x: <number> The position to draw the object (x-axis).
            - y: <number> The position to draw the object (y-axis).
            - r: <number> Orientation (radians).
            - sx: <number> Scale factor (x-axis). Can be negative.
            - sy: <number> Scale factor (y-axis). Can be negative.
            - ox: <number> Origin offset (x-axis). (A value of 20 would
              effectively move your drawable object 20 pixels to the left.)
            - oy: <number> Origin offset (y-axis). (A value of 20 would
              effectively move your drawable object 20 pixels up.)
            - kx: <number> Shearing factor (x-axis).
            - ky: <number> Shearing factor (y-axis).
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - texture: <Texture> A Texture (Image or Canvas) to texture the
              Quad with.
            - quad: <Quad> The Quad to draw on screen.
            - x: <number> The position to draw the object (x-axis).
            - y: <number> The position to draw the object (y-axis).
            - r: <number> Orientation (radians).
            - sx: <number> Scale factor (x-axis). Can be negative.
            - sy: <number> Scale factor (y-axis). Can be negative.
            - ox: <number> Origin offset (x-axis).
            - oy: <number> Origin offset (y-axis)
            - kx: <number> Shearing factor (x-axis).
            - ky: <number> Shearing factor (y-axis).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.6. ellipse                                       *love.graphics.ellipse*

Draws an ellipse.

Variants:
    1:
        - `Arguments`:
            - mode: <DrawMode> How to draw the ellipse.
            - x: <number> The position of the center along x-axis.
            - y: <number> The position of the center along y-axis.
            - radiusx: <number> The radius of the ellipse along the x-axis
              (half the ellipse's width.)
            - radiusy: <number> The radius of the ellipse along the y-axis
              (half the ellipse's height.)
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - mode: <DrawMode> How to draw the ellipse.
            - x: <number> The position of the center along x-axis.
            - y: <number> The position of the center along y-axis.
            - radiusx: <number> The radius of the ellipse along the x-axis
              (half the ellipse's width.)
            - radiusy: <number> The radius of the ellipse along the y-axis
              (half the ellipse's height.)
            - segments: <number> The number of segments used for drawing the
              ellipse.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.7. getBackgroundColor                 *love.graphics.getBackgroundColor*

Gets the current background color.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - r: <number> The red component (0-255).
            - g: <number> The green component (0-255).
            - b: <number> The blue component (0-255).
            - a: <number> The alpha component (0-255).

------------------------------------------------------------------------------
2.5.1.8. getBlendMode                             *love.graphics.getBlendMode*

Gets the blending mode.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - mode: <BlendMode> The current blend mode.
            - alphamode: <BlendAlphaMode> The current blend alpha mode – it
              determines how the alpha of drawn objects affects blending.

------------------------------------------------------------------------------
2.5.1.9. getCanvas                                   *love.graphics.getCanvas*

Gets the current target Canvas.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - canvas: <Canvas> The Canvas set by setCanvas. Returns nil if
              drawing to the real screen.

------------------------------------------------------------------------------
2.5.1.10. getCanvasFormats                    *love.graphics.getCanvasFormats*

Gets the available Canvas formats, and whether each is supported.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - formats: <table> A table containing CanvasFormats as keys, and a
              boolean indicating whether the format is supported as values.
              Not all systems support all formats.

------------------------------------------------------------------------------
2.5.1.11. getColor                                    *love.graphics.getColor*

Gets the current color.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - r: <number> The red component (0-255).
            - g: <number> The red component (0-255).
            - b: <number> The blue component (0-255).
            - a: <number> The alpha component (0-255).

------------------------------------------------------------------------------
2.5.1.12. getColorMask                            *love.graphics.getColorMask*

Gets the active color components used when drawing. Normally all 4 components
are active unless love.graphics.setColorMask has been used.

The color mask determines whether individual components of the colors of drawn
objects will affect the color of the screen. They affect love.graphics.clear
and Canvas:clear as well.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - r: <boolean> Whether the red color component is active when
              rendering.
            - g: <boolean> Whether the green color component is active when
              rendering.
            - b: <boolean> Whether the blue color component is active when
              rendering.
            - a: <boolean> Whether the alpha color component is active when
              rendering.

------------------------------------------------------------------------------
2.5.1.13. getCompressedImageFormats  *love.graphics.getCompressedImageFormats*

Gets the available compressed image formats, and whether each is supported.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - formats: <table> A table containing CompressedFormats as keys,
              and a boolean indicating whether the format is supported as
              values. Not all systems support all formats.

------------------------------------------------------------------------------
2.5.1.14. getDefaultFilter                    *love.graphics.getDefaultFilter*

Returns the default scaling filters used with Images, Canvases, and Fonts.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <FilterMode> Filter mode used when scaling the image down.
            - mag: <FilterMode> Filter mode used when scaling the image up.
            - anisotropy: <number> Maximum amount of Anisotropic Filtering
              used.

------------------------------------------------------------------------------
2.5.1.15. getDimensions                          *love.graphics.getDimensions*

Gets the width and height of the window.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the window.
            - height: <number> The height of the window.

------------------------------------------------------------------------------
2.5.1.16. getFont                                      *love.graphics.getFont*

Gets the current Font object.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - font: <Font> The current Font, or nil if none is set.

------------------------------------------------------------------------------
2.5.1.17. getHeight                                  *love.graphics.getHeight*

Gets the height of the window.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The height of the window.

------------------------------------------------------------------------------
2.5.1.18. getLineJoin                              *love.graphics.getLineJoin*

Gets the line join style.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - join: <LineJoin> The LineJoin style.

------------------------------------------------------------------------------
2.5.1.19. getLineStyle                            *love.graphics.getLineStyle*

Gets the line style.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - style: <LineStyle> The current line style.

------------------------------------------------------------------------------
2.5.1.20. getLineWidth                            *love.graphics.getLineWidth*

Gets the current line width.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The current line width.

------------------------------------------------------------------------------
2.5.1.21. getShader                                  *love.graphics.getShader*

Returns the current Shader. Returns nil if none is set.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - shader: <Shader> The current Shader.

------------------------------------------------------------------------------
2.5.1.22. getStats                                    *love.graphics.getStats*

Gets performance-related rendering statistics.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - drawcalls: <number> The number of draw calls made so far during
              the current frame. This includes all internal draw calls – for
              example, drawing smooth lines takes two draw calls.
            - canvasswitches: <number> The number of times the active Canvas
              has been switched so far during the current frame. This includes
              all internal canvas switches – for example, calling
              Canvas:clear if the Canvas isn't active will trigger two canvas
              switches.
            - texturememory: <number> The estimated total size in bytes of
              video memory used by all loaded Images, Canvases, and Fonts.
            - images: <number> The number of Image objects currently loaded.
            - canvases: <number> The number of Canvas objects currently
              loaded.
            - fonts: <number> The number of Font objects currently loaded.

------------------------------------------------------------------------------
2.5.1.23. getStencilTest                        *love.graphics.getStencilTest*

Gets whether stencil testing is enabled.

When stencil testing is enabled, the geometry of everything that is drawn will
be clipped / stencilled out based on whether it intersects with what has been
previously drawn to the stencil buffer.

Each Canvas has its own stencil buffer.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> Whether stencil testing is enabled.
            - inverted: <boolean> Whether the stencil test is inverted or not.

------------------------------------------------------------------------------
2.5.1.24. getSupported                            *love.graphics.getSupported*

Gets the optional graphics features and whether they're supported on the
system.

Some older or low-end systems don't always support all graphics features.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - features: <table> A table containing GraphicsFeature keys, and
              boolean values indicating whether each feature is supported.

------------------------------------------------------------------------------
2.5.1.25. getSystemLimits                      *love.graphics.getSystemLimits*

Gets the system-dependent maximum values for love.graphics features.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - limits: <table> A table containing GraphicsLimit keys, and
              number values.

------------------------------------------------------------------------------
2.5.1.26. getPointSize                            *love.graphics.getPointSize*

Gets the point size.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - size: <number> The current point size.

------------------------------------------------------------------------------
2.5.1.27. getRendererInfo                      *love.graphics.getRendererInfo*

Gets information about the system's video card and drivers.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - name: <string> The name of the renderer, e.g. "OpenGL" or
              "OpenGL ES".
            - version: <string> The version of the renderer with some extra
              driver-dependent version info, e.g. "2.1 INTEL-8.10.44".
            - vendor: <string> The name of the graphics card vendor, e.g.
              "Intel Inc".
            - device: <string> The name of the graphics card, e.g. "Intel HD
              Graphics 3000 OpenGL Engine".

------------------------------------------------------------------------------
2.5.1.28. getScissor                                *love.graphics.getScissor*

Gets the current scissor box.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x component of the top-left point of the box.
            - y: <number> The y component of the top-left point of the box.
            - width: <number> The width of the box.
            - height: <number> The height of the box.

------------------------------------------------------------------------------
2.5.1.29. getWidth                                    *love.graphics.getWidth*

Gets the width of the window.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the window.

------------------------------------------------------------------------------
2.5.1.30. intersectScissor                    *love.graphics.intersectScissor*

Sets the scissor to the rectangle created by the intersection of the specified
rectangle with the existing scissor. If no scissor is active yet, it behaves
like love.graphics.setScissor.

The scissor limits the drawing area to a specified rectangle. This affects all
graphics calls, including love.graphics.clear.

The dimensions of the scissor is unaffected by graphical transformations
(translate, scale, ...).

Variants:
    1:
        - `Arguments`:
            - x: <number> The x-coordinate of the upper left corner of the
              rectangle to intersect with the existing scissor rectangle.
            - y: <number> The y-coordinate of the upper left corner of the
              rectangle to intersect with the existing scissor rectangle.
            - width: <number> The width of the rectangle to intersect with the
              existing scissor rectangle.
            - height: <number> The height of the rectangle to intersect with
              the existing scissor rectangle.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.31. isGammaCorrect                        *love.graphics.isGammaCorrect*

Gets whether gamma-correct rendering is supported and enabled. It can be
enabled by setting t.gammacorrect = true in love.conf.

Not all devices support gamma-correct rendering, in which case it will be
automatically disabled and this function will return false. It is supported on
desktop systems which have graphics cards that are capable of using OpenGL 3 /
DIrectX 10, and iOS devices that can use OpenGL ES 3.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - gammacorrect: <boolean> True if gamma-correct rendering is
              supported and was enabled in love.conf, false otherwise.

------------------------------------------------------------------------------
2.5.1.32. isWireframe                              *love.graphics.isWireframe*

Gets whether wireframe mode is used when drawing.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - wireframe: <boolean> True if wireframe lines are used when
              drawing, false if it's not.

------------------------------------------------------------------------------
2.5.1.33. line                                            *love.graphics.line*

Draws lines between points.

Variants:
    1:
        - `Arguments`:
            - x1: <number> The position of first point on the x-axis.
            - y1: <number> The position of first point on the y-axis.
            - x2: <number> The position of second point on the x-axis.
            - y2: <number> The position of second point on the y-axis.
            - ...: <number> You can continue passing point positions to draw a
              polyline.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - points: <table> A table of point positions.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.34. newCanvas                                  *love.graphics.newCanvas*

Creates a new Canvas object for offscreen rendering.

Antialiased Canvases have slightly higher system requirements than normal
Canvases. Additionally, the supported maximum number of MSAA samples varies
depending on the system. Use love.graphics.getSystemLimit to check.

If the number of MSAA samples specified is greater than the maximum supported
by the system, the Canvas will still be created but only using the maximum
supported amount (this includes 0.)

Variants:
    1:
        - `Arguments`:
            - width: <number> The width of the Canvas.
            - height: <number> The height of the Canvas.
            - format: <CanvasFormat> The desired texture mode of the Canvas.
            - msaa: <number> The desired number of antialiasing samples used
              when drawing to the Canvas.
        - `Returns`:
            - canvas: <Canvas> A new Canvas object.

------------------------------------------------------------------------------
2.5.1.35. newFont                                      *love.graphics.newFont*

Creates a new Font.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filepath to the font file.
            - size: <number> The size of the font in pixels.
        - `Returns`:
            - font: <Font> A Font object which can be used to draw text on
              screen.
    2:
        - `Arguments`:
            - file: <File> A File pointing to a font.
            - size: <number> The size of the font in pixels.
        - `Returns`:
            - font: <Font> A Font object which can be used to draw text on
              screen.
    3:
        - `Arguments`:
            - filedata: <FileData> The encoded data to decode into a font.
            - size: <number> The size of the font in pixels.
        - `Returns`:
            - font: <Font> A Font object which can be used to draw text on
              screen.
    4:
        - 'Description': This variant uses the default font (Vera Sans) with a
          custom size.
        - `Arguments`:
            - size: <number> The size of the font in pixels.
        - `Returns`:
            - font: <Font> A Font object which can be used to draw text on
              screen.

------------------------------------------------------------------------------
2.5.1.36. newMesh                                      *love.graphics.newMesh*

Creates a new Mesh.

Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas
when it's drawn.

Variants:
    1:
        - 'Description': Creates a standard Mesh with the specified vertices.
        - `Arguments`:
            - vertices: <table> The table filled with vertex information
              tables for each vertex as follows:
            - mode: <MeshDrawMode> How the vertices are used when drawing. The
              default mode "fan" is sufficient for simple convex polygons.
            - usage: <SpriteBatchUsage> The expected usage of the Mesh. The
              specified usage mode affects the Mesh's memory usage and
              performance.
        - `Returns`:
            - mesh: <Mesh> The new Mesh.
    2:
        - 'Description': Creates a standard Mesh with the specified number of
          vertices.
        - `Arguments`:
            - vertexcount: <number> The total number of vertices the Mesh will
              use. Each vertex is initialized to {0,0, 0,0, 255,255,255,255}.
            - mode: <MeshDrawMode> How the vertices are used when drawing. The
              default mode "fan" is sufficient for simple convex polygons.
            - usage: <SpriteBatchUsage> The expected usage of the Mesh. The
              specified usage mode affects the Mesh's memory usage and
              performance.
        - `Returns`:
            - mesh: <Mesh> The new Mesh.
    3:
        - 'Description': Creates a Mesh with custom vertex attributes and the
          specified vertex data.
        - `Arguments`:
            - vertexformat: <table> A table in the form of {attribute, ...}.
              Each attribute is a table which specifies a custom vertex
              attribute used for each vertex.
            - vertices: <table> The table filled with vertex information
              tables for each vertex, in the form of {vertex, ...} where each
              vertex is a table in the form of {attributecomponent, ...}.
            - mode: <MeshDrawMode> How the vertices are used when drawing. The
              default mode "fan" is sufficient for simple convex polygons.
            - usage: <SpriteBatchUsage> The expected usage of the Mesh. The
              specified usage mode affects the Mesh's memory usage and
              performance.
        - `Returns`:
            - mesh: <Mesh> The new Mesh.
    4:
        - 'Description': Creates a Mesh with custom vertex attributes and the
          specified number of vertices.
        - `Arguments`:
            - vertexformat: <table> A table in the form of {attribute, ...}.
              Each attribute is a table which specifies a custom vertex
              attribute used for each vertex.
            - vertexcount: <number> The total number of vertices the Mesh will
              use.
            - mode: <MeshDrawMode> How the vertices are used when drawing. The
              default mode "fan" is sufficient for simple convex polygons.
            - usage: <SpriteBatchUsage> The expected usage of the Mesh. The
              specified usage mode affects the Mesh's memory usage and
              performance.
        - `Returns`:
            - mesh: <Mesh> The new Mesh.

------------------------------------------------------------------------------
2.5.1.37. newImage                                    *love.graphics.newImage*

Creates a new Image from a filepath, FileData, an ImageData, or a
CompressedImageData, and optionally generates or specifies mipmaps for the
image.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filepath to the image file.
        - `Returns`:
            - image: <Image> An Image object which can be drawn on screen.
    2:
        - `Arguments`:
            - imageData: <ImageData> An ImageData object. The Image will use
              this ImageData to reload itself when love.window.setMode is
              called.
        - `Returns`:
            - image: <Image> An Image object which can be drawn on screen.
    3:
        - `Arguments`:
            - compressedImageData: <CompressedImageData> A CompressedImageData
              object. The Image will use this CompressedImageData to reload
              itself when love.window.setMode is called.
        - `Returns`:
            - image: <Image> An Image object which can be drawn on screen.
    4:
        - `Arguments`:
            - filename: <string> The filepath to the image file (or a FileData
              or ImageData or CompressedImageData object).
            - flags: <table> A table containing the following fields:
        - `Returns`:
            - image: <Image> An Image object which can be drawn on screen.

------------------------------------------------------------------------------
2.5.1.38. newImageFont                            *love.graphics.newImageFont*

Creates a new Font by loading a specifically formatted image. There can be up
to 256 glyphs.

In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs
string.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filepath to the image file.
            - glyphs: <string> A string of the characters in the image in
              order from left to right.
            - extraspacing: <number> Additional spacing (positive or negative)
              to apply to each glyph in the Font.
        - `Returns`:
            - font: <Font> A Font object which can be used to draw text on
              screen.

------------------------------------------------------------------------------
2.5.1.39. newParticleSystem                  *love.graphics.newParticleSystem*

Creates a new ParticleSystem.

Variants:
    1:
        - `Arguments`:
            - texture: <Texture> The Image or Canvas to use.
            - buffer: <number> The max number of particles at the same time.
        - `Returns`:
            - system: <ParticleSystem> A new ParticleSystem.

------------------------------------------------------------------------------
2.5.1.40. newShader                                  *love.graphics.newShader*

Creates a new Shader object for hardware-accelerated vertex and pixel effects.
A Shader contains either vertex shader code, pixel shader code, or both.

Vertex shader code must contain at least one function, named position, which
is the function that will produce transformed vertex positions of drawn
objects in screen-space.

Pixel shader code must contain at least one function, named effect, which is
the function that will produce the color which is blended onto the screen for
each pixel a drawn object touches.

Variants:
    1:
        - `Arguments`:
            - code: <string> The pixel shader or vertex shader code, or a
              filename pointing to a file with the code.
        - `Returns`:
            - shader: <Shader> A Shader object for use in drawing operations.
    2:
        - `Arguments`:
            - pixelcode: <string> The pixel shader code, or a filename
              pointing to a file with the code.
            - vertexcode: <string> The vertex shader code, or a filename
              pointing to a file with the code.
        - `Returns`:
            - shader: <Shader> A Shader object for use in drawing operations.

------------------------------------------------------------------------------
2.5.1.41. newText                                      *love.graphics.newText*

Creates a new Font.

Variants:
    1:
        - `Arguments`:
            - font: <Font> The font to use for the text.
            - textstring: <string> The initial string of text that the new
              Text object will contain. May be nil.
        - `Returns`:
            - text: <Text> The new drawable Text object.

------------------------------------------------------------------------------
2.5.1.42. newQuad                                      *love.graphics.newQuad*

Creates a new Quad.

The purpose of a Quad is to describe the result of the following
transformation on any drawable object. The object is first scaled to
dimensions sw * sh. The Quad then describes the rectangular area of dimensions
width * height whose upper left corner is at position (x, y) inside the scaled
object.

Variants:
    1:
        - `Arguments`:
            - x: <number> The top-left position along the x-axis.
            - y: <number> The top-left position along the y-axis.
            - width: <number> The width of the Quad.
            - height: <number> The height of the Quad.
            - sw: <number> The reference width, the width of the Image.
            - sh: <number> The reference height, the height of the Image.
        - `Returns`:
            - quad: <Quad> The new Quad.

------------------------------------------------------------------------------
2.5.1.43. newScreenshot                          *love.graphics.newScreenshot*

Creates a screenshot and returns the image data.

Variants:
    1:
        - `Arguments`:
            - copyAlpha: <boolean> Whether to include the screen's alpha
              channel in the ImageData. If false, the screenshot will be fully
              opaque.
        - `Returns`:
            - screenshot: <ImageData> The image data of the screenshot.

------------------------------------------------------------------------------
2.5.1.44. newSpriteBatch                        *love.graphics.newSpriteBatch*

Creates a new SpriteBatch object.

Variants:
    1:
        - `Arguments`:
            - texture: <Texture> The Image or Canvas to use for the sprites.
            - maxsprites: <number> The max number of sprites.
            - usage: <SpriteBatchUsage> The expected usage of the SpriteBatch.
              The specified usage mode affects the SpriteBatch's memory usage
              and performance.
        - `Returns`:
            - spriteBatch: <SpriteBatch> The new SpriteBatch.

------------------------------------------------------------------------------
2.5.1.45. newVideo                                    *love.graphics.newVideo*

Creates a new drawable Video. Currently only Ogg Theora video files are
supported.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The file path to the Ogg Theora video file.
            - loadaudio: <boolean> Whether to try to load the video's audio
              into an audio Source. If not explicitly set to true or false, it
              will try without causing an error if the video has no audio.
        - `Returns`:
            - video: <Video> A new Video.
    2:
        - `Arguments`:
            - videostream: <VideoStream> A video stream object.
            - loadaudio: <boolean> Whether to try to load the video's audio
              into an audio Source. If not explicitly set to true or false, it
              will try without causing an error if the video has no audio.
        - `Returns`:
            - video: <Video> A new Video.

------------------------------------------------------------------------------
2.5.1.46. origin                                        *love.graphics.origin*

Resets the current coordinate transformation.

This function is always used to reverse any previous calls to
love.graphics.rotate, love.graphics.scale, love.graphics.shear or
love.graphics.translate. It returns the current transformation state to its
defaults.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.47. points                                        *love.graphics.points*

Draws one or more points.

Variants:
    1:
        - `Arguments`:
            - x: <number> The position of the first point on the x-axis.
            - y: <number> The position of the first point on the y-axis.
            - ...: <number> The x and y coordinates of additional points.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - points: <table> A table containing multiple point positions, in
              the form of {x, y, ...}.
        - `Returns`: Nothing
    3:
        - `Arguments`:
            - points: <table> A table containing multiple individually colored
              points, in the form of {point, ...}. Each table contains the
              position and color of a point in the form of {x, y, r, g, b, a}.
              The color components are optional.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.48. polygon                                      *love.graphics.polygon*

Draw a polygon.

Following the mode argument, this function can accept multiple numeric
arguments or a single table of numeric arguments. In either case the arguments
are interpreted as alternating x and y coordinates of the polygon's vertices.

When in fill mode, the polygon must be convex and simple or rendering
artifacts may occur.

Variants:
    1:
        - `Arguments`:
            - mode: <DrawMode> How to draw the polygon.
            - ...: <number> The vertices of the polygon.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - mode: <DrawMode> How to draw the polygon.
            - vertices: <table> The vertices of the polygon as a table.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.49. pop                                              *love.graphics.pop*

Pops the current coordinate transformation from the transformation stack.

This function is always used to reverse a previous push operation. It returns
the current transformation state to what it was before the last preceding
push. For an example, see the description of love.graphics.push.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.50. present                                      *love.graphics.present*

Displays the results of drawing operations on the screen.

This function is used when writing your own love.run function. It presents all
the results of your drawing operations on the screen. See the example in
love.run for a typical use of this function.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.51. print                                          *love.graphics.print*

Draws text on screen. If no Font is set, one will be created and set (once) if
needed.

When using translation and scaling functions while drawing text, this function
assumes the scale occurs first. If you don't script with this in mind, the
text won't be in the right position, or possibly even on screen.

love.graphics.print stops at the first ' ' (null) character. This can bite you
if you are appending keystrokes to form your string, as some of those are
multi-byte unicode characters which will likely contain null bytes.

Variants:
    1:
        - `Arguments`:
            - text: <string> The text to draw.
            - x: <number> The position to draw the object (x-axis).
            - y: <number> The position to draw the object (y-axis).
            - r: <number> Orientation (radians).
            - sx: <number> Scale factor (x-axis).
            - sy: <number> Scale factor (y-axis).
            - ox: <number> Origin offset (x-axis).
            - oy: <number> Origin offset (y-axis).
            - kx: <number> Shear factor (x-axis).
            - ky: <number> Shear factor (y-axis).
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - coloredtext: <table> A table containing colors and strings to
              add to the object, in the form of {color1, string1, color2,
              string2, ...}.
            - x: <number> The position of the new text on the x-axis.
            - y: <number> The position of the new text on the y-axis.
            - angle: <number> The orientation of the object in radians.
            - sx: <number> Scale factor on the x-axis.
            - sy: <number> Scale factor on the y-axis.
            - ox: <number> Origin offset on the x-axis.
            - oy: <number> Origin offset on the y-axis.
            - kx: <number> Shearing / skew factor on the x-axis.
            - ky: <number> Shearing / skew factor on the y-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.52. printf                                        *love.graphics.printf*

Draws formatted text, with word wrap and alignment.

See additional notes in love.graphics.print.

In version 0.9.2 and earlier, wrapping was implemented by breaking up words by
spaces and putting them back together to make sure things fit nicely within
the limit provided. However, due to the way this is done, extra spaces between
words would end up missing when printed on the screen, and some lines could
overflow past the provided wrap limit. In version 0.10.0 and newer this is no
longer the case.

Variants:
    1:
        - `Arguments`:
            - text: <string> A text string.
            - x: <number> The position on the x-axis.
            - y: <number> The position on the y-axis.
            - limit: <number> Wrap the line after this many horizontal pixels.
            - align: <AlignMode> The alignment.
            - r: <number> Orientation (radians).
            - sx: <number> Scale factor (x-axis).
            - sy: <number> Scale factor (y-axis).
            - ox: <number> Origin offset (x-axis).
            - oy: <number> Origin offset (y-axis).
            - kx: <number> Shear factor (x-axis).
            - ky: <number> Shear factor (y-axis).
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - coloredtext: <table> A table containing colors and strings to
              add to the object, in the form of {color1, string1, color2,
              string2, ...}.
            - x: <number> The position of the new text on the x-axis.
            - y: <number> The position of the new text on the y-axis.
            - wraplimit: <number> The maximum width in pixels of the text
              before it gets automatically wrapped to a new line.
            - align: <AlignMode> The alignment of the text.
            - angle: <number> The orientation of the object in radians.
            - sx: <number> Scale factor on the x-axis.
            - sy: <number> Scale factor on the y-axis.
            - ox: <number> Origin offset on the x-axis.
            - oy: <number> Origin offset on the y-axis.
            - kx: <number> Shearing / skew factor on the x-axis.
            - ky: <number> Shearing / skew factor on the y-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.53. push                                            *love.graphics.push*

Copies and pushes the current coordinate transformation to the transformation
stack.

This function is always used to prepare for a corresponding pop operation
later. It stores the current coordinate transformation state into the
transformation stack and keeps it active. Later changes to the transformation
can be undone by using the pop operation, which returns the coordinate
transform to the state it was in before calling push.

Variants:
    1:
        - 'Description': Pushes the current transformation to the
          transformation stack.
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - 'Description': Pushes a specific type of state to the stack.
        - `Arguments`:
            - stack: <StackType> The type of stack to push (e.g. just
              transformation state, or all love.graphics state).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.54. rectangle                                  *love.graphics.rectangle*

Draws a rectangle.

Variants:
    1:
        - `Arguments`:
            - mode: <DrawMode> How to draw the rectangle.
            - x: <number> The position of top-left corner along the x-axis.
            - y: <number> The position of top-left corner along the y-axis.
            - width: <number> Width of the rectangle.
            - height: <number> Height of the rectangle.
        - `Returns`: Nothing
    2:
        - 'Description': Draws a rectangle with rounded corners.
        - `Arguments`:
            - mode: <DrawMode> How to draw the rectangle.
            - x: <number> The position of top-left corner along the x-axis.
            - y: <number> The position of top-left corner along the y-axis.
            - width: <number> Width of the rectangle.
            - height: <number> Height of the rectangle.
            - rx: <number> The x-axis radius of each round corner. Cannot be
              greater than half the rectangle's width.
            - ry: <number> The y-axis radius of each round corner. Cannot be
              greater than half the rectangle's height.
            - segments: <number> The number of segments used for drawing the
              round corners. A default amount will be chosen if no number is
              given.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.55. reset                                          *love.graphics.reset*

Resets the current graphics settings.

Calling reset makes the current drawing color white, the current background
color black, resets any active Canvas or Shader, and removes any scissor
settings. It sets the BlendMode to alpha. It also sets both the point and line
drawing modes to smooth and their sizes to 1.0.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.56. rotate                                        *love.graphics.rotate*

Rotates the coordinate system in two dimensions.

Calling this function affects all future drawing operations by rotating the
coordinate system around the origin by the given amount of radians. This
change lasts until love.draw exits.

Variants:
    1:
        - `Arguments`:
            - angle: <number> The amount to rotate the coordinate system in
              radians.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.57. scale                                          *love.graphics.scale*

Scales the coordinate system in two dimensions.

By default the coordinate system in LÖVE corresponds to the display pixels in
horizontal and vertical directions one-to-one, and the x-axis increases
towards the right while the y-axis increases downwards. Scaling the coordinate
system changes this relation.

After scaling by sx and sy, all coordinates are treated as if they were
multiplied by sx and sy. Every result of a drawing operation is also
correspondingly scaled, so scaling by (2, 2) for example would mean making
everything twice as large in both x- and y-directions. Scaling by a negative
value flips the coordinate system in the corresponding direction, which also
means everything will be drawn flipped or upside down, or both. Scaling by
zero is not a useful operation.

Scale and translate are not commutative operations, therefore, calling them in
different orders will change the outcome.

Scaling lasts until love.draw exits.

Variants:
    1:
        - `Arguments`:
            - sx: <number> The scaling in the direction of the x-axis.
            - sy: <number> The scaling in the direction of the y-axis. If
              omitted, it defaults to same as parameter sx.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.58. setBackgroundColor                *love.graphics.setBackgroundColor*

Sets the background color.

Variants:
    1:
        - `Arguments`:
            - r: <number> The red component (0-255).
            - g: <number> The green component (0-255).
            - b: <number> The blue component (0-255).
            - a: <number> The alpha component (0-255).
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - rgba: <table> A numerical indexed table with the red, green and
              blue values as numbers. Alpha is 255 if it is not in the table
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.59. setBlendMode                            *love.graphics.setBlendMode*

Sets the blending mode.

Variants:
    1:
        - `Arguments`:
            - mode: <BlendMode> The blend mode to use.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - mode: <BlendMode> The blend mode to use.
            - alphamode: <BlendAlphaMode> What to do with the alpha of drawn
              objects when blending.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.60. setCanvas                                  *love.graphics.setCanvas*

Sets the render target to one or more Canvases. All drawing operations until
the next love.graphics.setCanvas call will be redirected to the specified
canvases and not shown on the screen.

All canvas arguments must have the same widths and heights and the same
texture type. Normally the same thing will be drawn on each canvas, but that
can be changed if a pixel shader is used with the "effects" function instead
of the regular effect.

Not all computers support Canvases, and not all computers which support
Canvases will support multiple render targets. Use love.graphics.isSupported
to check.

nWhen called without arguments, the render target is reset to the screen.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - canvas: <Canvas> A render target.
            - ...: <Canvas> Additional render targets.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.61. setColor                                    *love.graphics.setColor*

Sets the color used for drawing.

Variants:
    1:
        - `Arguments`:
            - red: <number> The amount of red.
            - green: <number> The amount of green.
            - blue: <number> The amount of blue.
            - alpha: <number> The amount of alpha. The alpha value will be
              applied to all subsequent draw operations, even the drawing of
              an image.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - rgba: <table> A numerical indexed table with the red, green,
              blue and alpha values as numbers. The alpha is optional and
              defaults to 255 if it is left out.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.62. setColorMask                            *love.graphics.setColorMask*

Sets the color mask. Enables or disables specific color components when
rendering and clearing the screen. For example, if red is set to false, no
further changes will be made to the red component of any pixels.

Enables all color components when called without arguments.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - red: <boolean> Render red component.
            - green: <boolean> Render green component.
            - blue: <boolean> Render blue component.
            - alpha: <boolean> Render alpha component.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.63. setDefaultFilter                    *love.graphics.setDefaultFilter*

Sets the default scaling filters used with Images, Canvases, and Fonts.

This function does not apply retroactively to loaded images.

Variants:
    1:
        - `Arguments`:
            - min: <FilterMode> Filter mode used when scaling the image down.
            - mag: <FilterMode> Filter mode used when scaling the image up.
            - anisotropy: <number> Maximum amount of Anisotropic Filtering
              used.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.64. setFont                                      *love.graphics.setFont*

Set an already-loaded Font as the current font or create and load a new one
from the file and size.

It's recommended that Font objects are created with love.graphics.newFont in
the loading stage and then passed to this function in the drawing stage.

Variants:
    1:
        - `Arguments`:
            - font: <Font> The Font object to use.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.65. setLineJoin                              *love.graphics.setLineJoin*

Sets the line join style.

Variants:
    1:
        - `Arguments`:
            - join: <LineJoin> The LineJoin to use.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.66. setLineStyle                            *love.graphics.setLineStyle*

Sets the line style.

Variants:
    1:
        - `Arguments`:
            - style: <LineStyle> The LineStyle to use.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.67. setLineWidth                            *love.graphics.setLineWidth*

Sets the line width.

Variants:
    1:
        - `Arguments`:
            - width: <number> The width of the line.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.68. setNewFont                                *love.graphics.setNewFont*

Creates and sets a new font.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The path and name of the file with the font.
            - size: <number> The size of the font.
        - `Returns`:
            - font: <Font> The new font.
    2:
        - `Arguments`:
            - file: <File> A File with the font.
            - size: <number> The size of the font.
        - `Returns`:
            - font: <Font> The new font.
    3:
        - `Arguments`:
            - data: <Data> A Data with the font.
            - size: <number> The size of the font.
        - `Returns`:
            - font: <Font> The new font.

------------------------------------------------------------------------------
2.5.1.69. setShader                                  *love.graphics.setShader*

Sets or resets a Shader as the current pixel effect or vertex shaders. All
drawing operations until the next love.graphics.setShader will be drawn using
the Shader object specified.

Disables the shaders when called without arguments.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - shader: <Shader> The new shader.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.70. setPointSize                            *love.graphics.setPointSize*

Sets the point size.

Variants:
    1:
        - `Arguments`:
            - size: <number> The new point size.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.71. setScissor                                *love.graphics.setScissor*

Sets or disables scissor.

The scissor limits the drawing area to a specified rectangle. This affects all
graphics calls, including love.graphics.clear.

Variants:
    1:
        - 'Description': Limits the drawing area to a specified rectangle.
        - `Arguments`:
            - x: <number> The X coordinate of upper left corner.
            - y: <number> The Y coordinate of upper left corner.
            - width: <number> The width of clipping rectangle.
            - height: <number> The height of clipping rectangle.
        - `Returns`: Nothing
    2:
        - 'Description': Disables scissor.
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.72. setStencilTest                        *love.graphics.setStencilTest*

Configures or disables stencil testing.

When stencil testing is enabled, the geometry of everything that is drawn
afterward will be clipped / stencilled out based on a comparison between the
arguments of this function and the stencil value of each pixel that the
geometry touches. The stencil values of pixels are affected via
love.graphics.stencil.

Each Canvas has its own per-pixel stencil values.

Variants:
    1:
        - `Arguments`:
            - comparemode: <CompareMode> The type of comparison to make for
              each pixel.
            - comparevalue: <number> The value to use when comparing with the
              stencil value of each pixel. Must be between 0 and 255.
        - `Returns`: Nothing
    2:
        - 'Description': Disables stencil testing.
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.73. setWireframe                            *love.graphics.setWireframe*

Sets whether wireframe lines will be used when drawing.

Wireframe mode should only be used for debugging. The lines drawn with it
enabled do not behave like regular love.graphics lines: their widths don't
scale with the coordinate transformations or with love.graphics.setLineWidth,
and they don't use the smooth LineStyle.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True to enable wireframe mode when drawing,
              false to disable it.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.74. shear                                          *love.graphics.shear*

Shears the coordinate system.

Variants:
    1:
        - `Arguments`:
            - kx: <number> The shear factor on the x-axis.
            - ky: <number> The shear factor on the y-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.75. stencil                                      *love.graphics.stencil*

Draws geometry as a stencil.

The geometry drawn by the supplied function sets invisible stencil values of
pixels, instead of setting pixel colors. The stencil values of pixels can act
like a mask / stencil - love.graphics.setStencilTest can be used afterward to
determine how further rendering is affected by the stencil values in each
pixel.

Each Canvas has its own per-pixel stencil values. Stencil values are within
the range of [0, 255].

Variants:
    1:
        - `Arguments`:
            - stencilfunction: <function> Function which draws geometry. The
              stencil values of pixels, rather than the color of each pixel,
              will be affected by the geometry.
            - action: <StencilAction> How to modify any stencil values of
              pixels that are touched by what's drawn in the stencil function.
            - value: <number> The new stencil value to use for pixels if the
              "replace" stencil action is used. Has no effect with other
              stencil actions. Must be between 0 and 255.
            - keepvalues: <boolean> True to preserve old stencil values of
              pixels, false to re-set every pixel's stencil value to 0 before
              executing the stencil function. love.graphics.clear will also
              re-set all stencil values.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.1.76. translate                                  *love.graphics.translate*

Translates the coordinate system in two dimensions.

When this function is called with two numbers, dx, and dy, all the following
drawing operations take effect as if their x and y coordinates were x+dx and
y+dy.

Scale and translate are not commutative operations, therefore, calling them in
different orders will change the outcome.

This change lasts until love.graphics.clear is called (which is called
automatically before love.draw in the default love.run function), or a
love.graphics.pop reverts to a previous coordinate system state.

Translating using whole numbers will prevent tearing/blurring of images and
fonts draw after translating.

Variants:
    1:
        - `Arguments`:
            - dx: <number> The translation relative to the x-axis.
            - dy: <number> The translation relative to the y-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2. types                                             *love.graphics-types*

The types of graphics:

    - Canvas                                                     |love.Canvas|
    - Font                                                         |love.Font|
    - Mesh                                                         |love.Mesh|
    - Image                                                       |love.Image|
    - ParticleSystem                                     |love.ParticleSystem|
    - Quad                                                         |love.Quad|
    - Shader                                                     |love.Shader|
    - SpriteBatch                                           |love.SpriteBatch|
    - Text                                                         |love.Text|
    - Texture                                                   |love.Texture|
    - Video                                                       |love.Video|

------------------------------------------------------------------------------
2.5.2.1. Canvas                           *love-Canvas* *love.graphics-Canvas*

A Canvas is used for off-screen rendering. Think of it as an invisible screen
that you can draw to, but that will not be visible until you draw it to the
actual visible screen. It is also known as "render to texture".

By drawing things that do not change position often (such as background items)
to the Canvas, and then drawing the entire Canvas instead of each item, you
can reduce the number of draw operations performed each frame.

In versions prior to 0.10.0, not all graphics cards that LÖVE supported could
use Canvases. love.graphics.isSupported("canvas") could be used to check for
support at runtime.

Constructors: 
    - newCanvas                                      |love.graphics.newCanvas|

Supertypes: 
    - Object                                                     |love-Object|
    - Drawable                                                 |love-Drawable|
    - Texture                                                   |love-Texture|

Subtypes: None

Functions: 
    - getDimensions                                     |Canvas:getDimensions|
    - getFilter                                             |Canvas:getFilter|
    - getFormat                                             |Canvas:getFormat|
    - getHeight                                             |Canvas:getHeight|
    - getMSAA                                                 |Canvas:getMSAA|
    - getWidth                                               |Canvas:getWidth|
    - getWrap                                                 |Canvas:getWrap|
    - isActive                                               |Canvas:isActive|
    - newImageData                                       |Canvas:newImageData|
    - renderTo                                               |Canvas:renderTo|
    - setFilter                                             |Canvas:setFilter|
    - setWrap                                                 |Canvas:setWrap|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.1.1. getDimensions                                *Canvas:getDimensions*

Gets the width and height of the Canvas.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the Canvas, in pixels.
            - height: <number> The height of the Canvas, in pixels.

------------------------------------------------------------------------------
2.5.2.1.2. getFilter                                        *Canvas:getFilter*

Gets the filter mode of the Canvas.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <FilterMode> Filter mode used when minifying the canvas.
            - mag: <FilterMode> Filter mode used when magnifying the canvas.
            - anisotropy: <number> Maximum amount of anisotropic filtering
              used.

------------------------------------------------------------------------------
2.5.2.1.3. getFormat                                        *Canvas:getFormat*

Gets the texture format of the Canvas.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - format: <CanvasFormat> The format of the Canvas.

------------------------------------------------------------------------------
2.5.2.1.4. getHeight                                        *Canvas:getHeight*

Gets the height of the Canvas.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The height of the Canvas, in pixels.

------------------------------------------------------------------------------
2.5.2.1.5. getMSAA                                            *Canvas:getMSAA*

Gets the number of multisample antialiasing (MSAA) samples used when drawing
to the Canvas.

This may be different than the number used as an argument to
love.graphics.newCanvas if the system running LÖVE doesn't support that
number.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - samples: <number> The number of multisample antialiasing samples
              used by the canvas when drawing to it.

------------------------------------------------------------------------------
2.5.2.1.6. getWidth                                          *Canvas:getWidth*

Gets the width of the Canvas.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the Canvas, in pixels.

------------------------------------------------------------------------------
2.5.2.1.7. getWrap                                            *Canvas:getWrap*

Gets the wrapping properties of a Canvas.

This function returns the currently set horizontal and vertical wrapping modes
for the Canvas.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - horizontal: <WrapMode> Horizontal wrapping mode of the Canvas.
            - vertical: <WrapMode> Vertical wrapping mode of the Canvas.

------------------------------------------------------------------------------
2.5.2.1.8. isActive                                          *Canvas:isActive*

Gets whether the graphics module is able to be used. If it is not active,
love.graphics function and method calls will not work correctly and may cause
the program to crash. The graphics module is inactive if a window is not open,
or if the app is in the background on iOS. Typically the app's execution will
be automatically paused by the system, in the latter case.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - active: <boolean> Whether the graphics module is active and able
              to be used.

------------------------------------------------------------------------------
2.5.2.1.9. newImageData                                  *Canvas:newImageData*

Generates ImageData from the contents of the Canvas.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - data: <ImageData> The image data stored in the Canvas.
    2:
        - `Arguments`:
            - x: <number> The x-axis of the top-left corner of the area within
              the Canvas to capture.
            - y: <number> The y-axis of the top-left corner of the area within
              the Canvas to capture.
            - width: <number> The width of the area within the Canvas to
              capture.
            - height: <number> The height of the area within the Canvas to
              capture.
        - `Returns`:
            - data: <ImageData> The new ImageData made from the Canvas'
              contents.

------------------------------------------------------------------------------
2.5.2.1.10. renderTo                                         *Canvas:renderTo*

Render to the Canvas using a function.

Variants:
    1:
        - `Arguments`:
            - func: <function> A function performing drawing operations.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.1.11. setFilter                                       *Canvas:setFilter*

Sets the filter of the Canvas.

Variants:
    1:
        - `Arguments`:
            - min: <FilterMode> How to scale a canvas down.
            - mag: <FilterMode> How to scale a canvas up.
            - anisotropy: <number> Maximum amount of anisotropic filtering
              used.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.1.12. setWrap                                           *Canvas:setWrap*

Sets the wrapping properties of a Canvas.

This function sets the way the edges of a Canvas are treated if it is scaled
or rotated. If the WrapMode is set to "clamp", the edge will not be
interpolated. If set to "repeat", the edge will be interpolated with the
pixels on the opposing side of the framebuffer.

Variants:
    1:
        - `Arguments`:
            - horizontal: <WrapMode> Horizontal wrapping mode of the Canvas.
            - vertical: <WrapMode> Vertical wrapping mode of the Canvas.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.2. Font                                 *love-Font* *love.graphics-Font*

Defines the shape of characters than can be drawn onto the screen.

Constructors: 
    - newFont                                          |love.graphics.newFont|
    - newImageFont                                |love.graphics.newImageFont|
    - setNewFont                                    |love.graphics.setNewFont|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getAscent                                               |Font:getAscent|
    - getBaseline                                           |Font:getBaseline|
    - getDescent                                             |Font:getDescent|
    - getFilter                                               |Font:getFilter|
    - getHeight                                               |Font:getHeight|
    - getLineHeight                                       |Font:getLineHeight|
    - getWidth                                                 |Font:getWidth|
    - getWrap                                                   |Font:getWrap|
    - hasGlyph                                                 |Font:hasGlyph|
    - setFallbacks                                         |Font:setFallbacks|
    - setFilter                                               |Font:setFilter|
    - setLineHeight                                       |Font:setLineHeight|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.2.1. getAscent                                          *Font:getAscent*

Gets the ascent of the Font. The ascent spans the distance between the
baseline and the top of the glyph that reaches farthest from the baseline.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ascent: <number> The ascent of the Font in pixels.

------------------------------------------------------------------------------
2.5.2.2.2. getBaseline                                      *Font:getBaseline*

Gets the baseline of the Font. Most scripts share the notion of a baseline: an
imaginary horizontal line on which characters rest. In some scripts, parts of
glyphs lie below the baseline.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - baseline: <number> The baseline of the Font in pixels.

------------------------------------------------------------------------------
2.5.2.2.3. getDescent                                        *Font:getDescent*

Gets the descent of the Font. The descent spans the distance between the
baseline and the lowest descending glyph in a typeface.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - descent: <number> The descent of the Font in pixels.

------------------------------------------------------------------------------
2.5.2.2.4. getFilter                                          *Font:getFilter*

Gets the filter mode for a font.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <FilterMode> Filter mode used when minifying the font.
            - mag: <FilterMode> Filter mode used when magnifying the font.
            - anisotropy: <number> Maximum amount of anisotropic filtering
              used.

------------------------------------------------------------------------------
2.5.2.2.5. getHeight                                          *Font:getHeight*

Gets the height of the Font. The height of the font is the size including any
spacing; the height which it will need.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The height of the Font in pixels.

------------------------------------------------------------------------------
2.5.2.2.6. getLineHeight                                  *Font:getLineHeight*

Gets the line height. This will be the value previously set by
Font:setLineHeight, or 1.0 by default.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The current line height.

------------------------------------------------------------------------------
2.5.2.2.7. getWidth                                            *Font:getWidth*

Determines the horizontal size a line of text needs. Does not support
line-breaks.

Variants:
    1:
        - `Arguments`:
            - line: <string> A line of text.
        - `Returns`:
            - width: <number> The width of the line.

------------------------------------------------------------------------------
2.5.2.2.8. getWrap                                              *Font:getWrap*

Gets formatting information for text, given a wrap limit.

This function accounts for newlines correctly (i.e. '\n').

Variants:
    1:
        - `Arguments`:
            - text: <string> The text that will be wrapped.
            - wraplimit: <number> The maximum width in pixels of each line
              that text is allowed before wrapping.
        - `Returns`:
            - width: <number> The maximum width of the wrapped text.
            - wrappedtext: <table> A table containing each line of text that
              was wrapped.

------------------------------------------------------------------------------
2.5.2.2.9. hasGlyph                                            *Font:hasGlyph*

Gets whether the font can render a particular character.

Variants:
    1:
        - `Arguments`:
            - character: <string> A unicode character.
        - `Returns`:
            - hasglyph: <boolean> Whether the font can render the glyph
              represented by the character.
    2:
        - `Arguments`:
            - codepoint: <number> A unicode codepoint number.
        - `Returns`:
            - hasglyph: <boolean> Whether the font can render the glyph
              represented by the codepoint number.

------------------------------------------------------------------------------
2.5.2.2.10. setFallbacks                                   *Font:setFallbacks*

Sets the fallback fonts. When the Font doesn't contain a glyph, it will
substitute the glyph from the next subsequent fallback Fonts. This is akin to
setting a "font stack" in Cascading Style Sheets (CSS).

Variants:
    1:
        - `Arguments`:
            - fallbackfont1: <Font> The first fallback Font to use.
            - ...: <Font> Additionall fallback Fonts.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.2.11. setFilter                                         *Font:setFilter*

Sets the filter mode for a font.

Variants:
    1:
        - `Arguments`:
            - min: <FilterMode> How to scale a font down.
            - mag: <FilterMode> How to scale a font up.
            - anisotropy: <number> Maximum amount of anisotropic filtering
              used.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.2.12. setLineHeight                                 *Font:setLineHeight*

Sets the line height. When rendering the font in lines the actual height will
be determined by the line height multiplied by the height of the font. The
default is 1.0.

Variants:
    1:
        - `Arguments`:
            - height: <number> The new line height.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3. Mesh                                 *love-Mesh* *love.graphics-Mesh*

A 2D polygon mesh used for drawing arbitrary textured shapes.

Constructors: 
    - newMesh                                          |love.graphics.newMesh|

Supertypes: 
    - Drawable                                                 |love-Drawable|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - attachAttribute                                   |Mesh:attachAttribute|
    - getDrawMode                                           |Mesh:getDrawMode|
    - getDrawRange                                         |Mesh:getDrawRange|
    - getTexture                                             |Mesh:getTexture|
    - getVertex                                               |Mesh:getVertex|
    - getVertexAttribute                             |Mesh:getVertexAttribute|
    - getVertexCount                                     |Mesh:getVertexCount|
    - getVertexFormat                                   |Mesh:getVertexFormat|
    - getVertexMap                                         |Mesh:getVertexMap|
    - isAttributeEnabled                             |Mesh:isAttributeEnabled|
    - setAttributeEnabled                           |Mesh:setAttributeEnabled|
    - setDrawMode                                           |Mesh:setDrawMode|
    - setDrawRange                                         |Mesh:setDrawRange|
    - setTexture                                             |Mesh:setTexture|
    - setVertex                                               |Mesh:setVertex|
    - setVertexAttribute                             |Mesh:setVertexAttribute|
    - setVertexColors                                   |Mesh:setVertexColors|
    - setVertexMap                                         |Mesh:setVertexMap|
    - setVertices                                           |Mesh:setVertices|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.3.1. attachAttribute                              *Mesh:attachAttribute*

Attaches a vertex attribute from a different Mesh onto this Mesh, for use when
drawing. This can be used to share vertex attribute data between several
different Meshes.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name of the vertex attribute to attach.
            - mesh: <Mesh> The Mesh to get the vertex attribute from.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.2. getDrawMode                                      *Mesh:getDrawMode*

Gets the mode used when drawing the Mesh.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - mode: <MeshDrawMode> The mode used when drawing the Mesh.

------------------------------------------------------------------------------
2.5.2.3.3. getDrawRange                                    *Mesh:getDrawRange*

Gets the range of vertices used when drawing the Mesh.

If the Mesh's draw range has not been set previously with Mesh:setDrawRange,
this function will return nil.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The index of the first vertex used when drawing,
              or the index of the first value in the vertex map used if one is
              set for this Mesh.
            - max: <number> The index of the last vertex used when drawing, or
              the index of the last value in the vertex map used if one is set
              for this Mesh.

------------------------------------------------------------------------------
2.5.2.3.4. getTexture                                        *Mesh:getTexture*

Gets the texture (Image or Canvas) used when drawing the Mesh.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - texture: <Texture> The Image or Canvas to texture the Mesh with
              when drawing, or nil if none is set.

------------------------------------------------------------------------------
2.5.2.3.5. getVertex                                          *Mesh:getVertex*

Gets the properties of a vertex in the Mesh.

Variants:
    1:
        - `Arguments`:
            - index: <number> The index of the the vertex you want to retrieve
              the information for.
        - `Returns`:
            - attributecomponent: <number> The first component of the first
              vertex attribute in the specified vertex.
            - ...: <number> Additional components of all vertex attributes in
              the specified vertex.
    2:
        - `Arguments`:
            - index: <number> The index of the the vertex you want to retrieve
              the information for.
        - `Returns`:
            - x: <number> The position of the vertex on the x-axis.
            - y: <number> The position of the vertex on the y-axis.
            - u: <number> The horizontal component of the texture coordinate.
            - v: <number> The vertical component of the texture coordinate.
            - r: <number> The red component of the vertex's color.
            - g: <number> The green component of the vertex's color.
            - b: <number> The blue component of the vertex's color.
            - a: <number> The alpha component of the vertex's color.

------------------------------------------------------------------------------
2.5.2.3.6. getVertexAttribute                        *Mesh:getVertexAttribute*

Gets the properties of a specific attribute within a vertex in the Mesh.

Meshes without a custom vertex format specified in love.graphics.newMesh have
position as their first attribute, texture coordinates as their second
attribute, and color as their third attribute.

Variants:
    1:
        - `Arguments`:
            - vertexindex: <number> The index of the the vertex to be
              modified.
            - attributeindex: <number> The index of the attribute within the
              vertex to be modified.
        - `Returns`:
            - value1: <number> The value of the first component of the
              attribute.
            - value2: <number> The value of the second component of the
              attribute.
            - ...: <number> Any additional vertex attribute components.

------------------------------------------------------------------------------
2.5.2.3.7. getVertexCount                                *Mesh:getVertexCount*

Returns the total number of vertices in the Mesh.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - num: <number> The total number of vertices in this Mesh.

------------------------------------------------------------------------------
2.5.2.3.8. getVertexFormat                              *Mesh:getVertexFormat*

Gets the vertex format that the Mesh was created with.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - format: <table> The vertex format of the Mesh, which is a table
              containing tables for each vertex attribute the Mesh was created
              with, in the form of {attribute, ...}.

------------------------------------------------------------------------------
2.5.2.3.9. getVertexMap                                    *Mesh:getVertexMap*

Gets the vertex map for the Mesh. The vertex map describes the order in which
the vertices are used when the Mesh is drawn. The vertices, vertex map, and
mesh draw mode work together to determine what exactly is displayed on the
screen.

If no vertex map has been set previously via Mesh:setVertexMap, then this
function will return nil in LÖVE 0.10.0+, or an empty table in 0.9.2 and
older.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - map: <table> A table containing a list of vertex indices used
              when drawing.

------------------------------------------------------------------------------
2.5.2.3.10. isAttributeEnabled                       *Mesh:isAttributeEnabled*

Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data
from disabled attributes is not used when drawing the Mesh.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name of the vertex attribute to enable or
              disable.
        - `Returns`:
            - enabled: <boolean> Whether the vertex attribute is used when
              drawing this Mesh.

------------------------------------------------------------------------------
2.5.2.3.11. setAttributeEnabled                     *Mesh:setAttributeEnabled*

Enables or disables a specific vertex attribute in the Mesh. Vertex data from
disabled attributes is not used when drawing the Mesh.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name of the vertex attribute to enable or
              disable.
            - enable: <boolean> Whether the vertex attribute is used when
              drawing this Mesh.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.12. setDrawMode                                     *Mesh:setDrawMode*

Sets the mode used when drawing the Mesh.

Variants:
    1:
        - `Arguments`:
            - mode: <MeshDrawMode> The mode to use when drawing the Mesh.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.13. setDrawRange                                   *Mesh:setDrawRange*

Restricts the drawn vertices of the Mesh to a subset of the total.

If a vertex map is used with the Mesh, this method will set a subset of the
values in the vertex map array to use, instead of a subset of the total
vertices in the Mesh.

For example, if Mesh:setVertexMap(1, 2, 3, 1, 3, 4) and Mesh:setDrawRange(4,
6) are called, vertices 1, 3, and 4 will be drawn.

Variants:
    1:
        - `Arguments`:
            - min: <number> The index of the first vertex to use when drawing,
              or the index of the first value in the vertex map to use if one
              is set for this Mesh.
            - max: <number> The index of the last vertex to use when drawing,
              or the index of the last value in the vertex map to use if one
              is set for this Mesh.
        - `Returns`: Nothing
    2:
        - 'Description': Allows all vertices in the Mesh to be drawn.
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.14. setTexture                                       *Mesh:setTexture*

Sets the texture (Image or Canvas) used when drawing the Mesh.

When called without an argument disables the texture. Untextured meshes have a
white color by default.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - texture: <Texture> The Image or Canvas to texture the Mesh with
              when drawing.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.15. setVertex                                         *Mesh:setVertex*

Sets the properties of a vertex in the Mesh.

Variants:
    1:
        - `Arguments`:
            - index: <number> The index of the the vertex you want to modify.
            - attributecomponent: <number> The first component of the first
              vertex attribute in the specified vertex.
            - ...: <number> Additional components of all vertex attributes in
              the specified vertex.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - index: <number> The index of the the vertex you want to modify.
            - vertex: <table> A table with vertex information, in the form of
              {attributecomponent, ...}.
        - `Returns`: Nothing
    3:
        - 'Description': Sets the vertex components of a Mesh that wasn't
          created with a custom vertex format.
        - `Arguments`:
            - index: <number> The index of the the vertex you want to modify.
            - x: <number> The position of the vertex on the x-axis.
            - y: <number> The position of the vertex on the y-axis.
            - u: <number> The horizontal component of the texture coordinate.
            - v: <number> The vertical component of the texture coordinate.
            - r: <number> The red component of the vertex's color.
            - g: <number> The green component of the vertex's color.
            - b: <number> The blue component of the vertex's color.
            - a: <number> The alpha component of the vertex's color.
        - `Returns`: Nothing
    4:
        - 'Description': Sets the vertex components of a Mesh that wasn't
          created with a custom vertex format.
        - `Arguments`:
            - index: <number> The index of the the vertex you want to modify.
            - vertex: <table> A table with vertex information.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.16. setVertexAttribute                       *Mesh:setVertexAttribute*

Sets the properties of a specific attribute within a vertex in the Mesh.

Meshes without a custom vertex format specified in love.graphics.newMesh have
position as their first attribute, texture coordinates as their second
attribute, and color as their third attribute.

Variants:
    1:
        - `Arguments`:
            - vertexindex: <number> The index of the the vertex to be
              modified.
            - attributeindex: <number> The index of the attribute within the
              vertex to be modified.
            - value1: <number> The value of the first component of the
              attribute.
            - value2: <number> The value of the second component of the
              attribute.
            - ...: <number> Any additional vertex attribute components.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.17. setVertexColors                             *Mesh:setVertexColors*

Sets if the per-vertex colors are used when rendering instead of the constant
color (constant color being love.graphics.setColor or SpriteBatch:setColor)

The per-vertex colors are automatically enabled by default when making a new
Mesh or when doing Mesh:setVertex, but only if at least one vertex color is
not the default (255,255,255,255).

Variants:
    1:
        - `Arguments`:
            - on: <boolean> True to use per-vertex coloring.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.18. setVertexMap                                   *Mesh:setVertexMap*

Sets the vertex map for the Mesh. The vertex map describes the order in which
the vertices are used when the Mesh is drawn. The vertices, vertex map, and
mesh draw mode work together to determine what exactly is displayed on the
screen.

The vertex map allows you to re-order or reuse vertices when drawing without
changing the actual vertex parameters or duplicating vertices. It is
especially useful when combined with different Mesh Draw Modes.

Variants:
    1:
        - `Arguments`:
            - map: <table> A table containing a list of vertex indices to use
              when drawing. Values must be in the range of [1,
              Mesh:getVertexCount()].
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - vi1: <number> The index of the first vertex to use when drawing.
              Must be in the range of [1, Mesh:getVertexCount()].
            - vi2: <number> The index of the second vertex to use when
              drawing.
            - vi3: <number> The index of the third vertex to use when drawing.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.3.19. setVertices                                     *Mesh:setVertices*

Replaces a range of vertices in the Mesh with new ones. The total number of
vertices in a Mesh cannot be changed after it has been created.

Variants:
    1:
        - `Arguments`:
            - vertices: <table> The table filled with vertex information
              tables for each vertex, in the form of {vertex, ...} where each
              vertex is a table in the form of {attributecomponent, ...}.
        - `Returns`: Nothing
    2:
        - 'Description': Sets the vertex components of a Mesh that wasn't
          created with a custom vertex format.
        - `Arguments`:
            - vertices: <table> The table filled with vertex information
              tables for each vertex as follows:
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.4. Image                              *love-Image* *love.graphics-Image*

Drawable image type.

Constructors: 
    - newImage                                        |love.graphics.newImage|

Supertypes: 
    - Object                                                     |love-Object|
    - Drawable                                                 |love-Drawable|
    - Texture                                                   |love-Texture|

Subtypes: None

Functions: 
    - getData                                                  |Image:getData|
    - getDimensions                                      |Image:getDimensions|
    - getFilter                                              |Image:getFilter|
    - getFlags                                                |Image:getFlags|
    - getHeight                                              |Image:getHeight|
    - getMipmapFilter                                  |Image:getMipmapFilter|
    - getWidth                                                |Image:getWidth|
    - getWrap                                                  |Image:getWrap|
    - refresh                                                  |Image:refresh|
    - setFilter                                              |Image:setFilter|
    - setMipmapFilter                                  |Image:setMipmapFilter|
    - setWrap                                                  |Image:setWrap|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.4.1. getData                                             *Image:getData*

Gets the original ImageData or CompressedData used to create the Image.

All Images keep a reference to the Data that was used to create the Image. The
Data is used to refresh the Image when love.window.setMode or Image:refresh is
called.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - data: <ImageData> The original ImageData used to create the
              Image, if the image is not compressed.
    2:
        - `Arguments`: None
        - `Returns`:
            - data: <CompressedData> The original CompressedData used to
              create the Image, if the image is compressed.

------------------------------------------------------------------------------
2.5.2.4.2. getDimensions                                 *Image:getDimensions*

Gets the width and height of the Image.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the Image, in pixels.
            - height: <number> The height of the Image, in pixels.

------------------------------------------------------------------------------
2.5.2.4.3. getFilter                                         *Image:getFilter*

Gets the filter mode for an image.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <FilterMode> Filter mode used when minifying the image.
            - mag: <FilterMode> Filter mode used when magnifying the image.

------------------------------------------------------------------------------
2.5.2.4.4. getFlags                                           *Image:getFlags*

Gets the flags used when the image was created.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - flags: <table> A table with ImageFlag keys.

------------------------------------------------------------------------------
2.5.2.4.5. getHeight                                         *Image:getHeight*

Gets the height of the Image.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The height of the Image, in pixels.

------------------------------------------------------------------------------
2.5.2.4.6. getMipmapFilter                             *Image:getMipmapFilter*

Gets the mipmap filter mode for an Image.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - mode: <FilterMode> The filter mode used in between mipmap
              levels. nil if mipmap filtering is not enabled.
            - sharpness: <number> Value used to determine whether the image
              should use more or less detailed mipmap levels than normal when
              drawing.

------------------------------------------------------------------------------
2.5.2.4.7. getWidth                                           *Image:getWidth*

Gets the width of the Image.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the Image, in pixels.

------------------------------------------------------------------------------
2.5.2.4.8. getWrap                                             *Image:getWrap*

Gets the wrapping properties of an Image.

This function returns the currently set horizontal and vertical wrapping modes
for the image.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - horizontal: <WrapMode> Horizontal wrapping mode of the image.
            - vertical: <WrapMode> Vertical wrapping mode of the image.

------------------------------------------------------------------------------
2.5.2.4.9. refresh                                             *Image:refresh*

Reloads the Image's contents from the ImageData or CompressedData used to
create the image.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - x: <number> The x-axis of the top-left corner of the area within
              the Image to reload.
            - y: <number> The y-axis of the top-left corner of the area within
              the Image to reload.
            - width: <number> The width of the area within the Image to
              reload.
            - height: <number> The height of the area within the Image to
              reload.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.4.10. setFilter                                        *Image:setFilter*

Sets the filter mode for an image.

Variants:
    1:
        - `Arguments`:
            - min: <FilterMode> How to scale an image down.
            - mag: <FilterMode> How to scale an image up.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.4.11. setMipmapFilter                            *Image:setMipmapFilter*

Sets the mipmap filter mode for an Image.

Mipmapping is useful when drawing an image at a reduced scale. It can improve
performance and reduce aliasing issues.

In 0.10.0 and newer, the Image must be created with the mipmaps flag enabled
for the mipmap filter to have any effect.

Variants:
    1:
        - `Arguments`:
            - filtermode: <FilterMode> The filter mode to use in between
              mipmap levels. "nearest" will often give better performance.
            - sharpness: <number> A positive sharpness value makes the image
              use a more detailed mipmap level when drawing, at the expense of
              performance. A negative value does the reverse.
        - `Returns`: Nothing
    2:
        - 'Description': Disables mipmap filtering.
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.4.12. setWrap                                            *Image:setWrap*

Sets the wrapping properties of an Image.

This function sets the way an Image is repeated when it is drawn with a Quad
that is larger than the image's extent. An image may be clamped or set to
repeat in both horizontal and vertical directions. Clamped images appear only
once, but repeated ones repeat as many times as there is room in the Quad.

If you use a Quad that is larger than the image extent and do not use repeated
tiling, there may be an unwanted visual effect of the image stretching all the
way to fill the Quad. If this is the case, setting Image:getWrap("repeat",
"repeat") for all the images to be repeated, and using Quad of appropriate
size will result in the best visual appearance.

Variants:
    1:
        - `Arguments`:
            - horizontal: <WrapMode> Horizontal wrapping mode of the image.
            - vertical: <WrapMode> Vertical wrapping mode of the image.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5. ParticleSystem   *love-ParticleSystem* *love.graphics-ParticleSystem*

Used to create cool effects, like fire. The particle systems are created and
drawn on the screen using functions in love.graphics. They also need to be
updated in the update(dt) callback for you to see any changes in the particles
emitted.

Constructors: 
    - newParticleSystem                      |love.graphics.newParticleSystem|

Supertypes: 
    - Drawable                                                 |love-Drawable|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - clone                                             |ParticleSystem:clone|
    - emit                                               |ParticleSystem:emit|
    - getCount                                       |ParticleSystem:getCount|
    - getAreaSpread                             |ParticleSystem:getAreaSpread|
    - getBufferSize                             |ParticleSystem:getBufferSize|
    - getColors                                     |ParticleSystem:getColors|
    - getDirection                               |ParticleSystem:getDirection|
    - getEmissionRate                         |ParticleSystem:getEmissionRate|
    - getInsertMode                             |ParticleSystem:getInsertMode|
    - getLinearAcceleration             |ParticleSystem:getLinearAcceleration|
    - getLinearDamping                       |ParticleSystem:getLinearDamping|
    - getEmitterLifetime                   |ParticleSystem:getEmitterLifetime|
    - getOffset                                     |ParticleSystem:getOffset|
    - getParticleLifetime                 |ParticleSystem:getParticleLifetime|
    - getPosition                                 |ParticleSystem:getPosition|
    - getRadialAcceleration             |ParticleSystem:getRadialAcceleration|
    - getRotation                                 |ParticleSystem:getRotation|
    - getSizes                                       |ParticleSystem:getSizes|
    - getSizeVariation                       |ParticleSystem:getSizeVariation|
    - getSpeed                                       |ParticleSystem:getSpeed|
    - getSpin                                         |ParticleSystem:getSpin|
    - getSpinVariation                       |ParticleSystem:getSpinVariation|
    - getSpread                                     |ParticleSystem:getSpread|
    - getTexture                                   |ParticleSystem:getTexture|
    - getTangentialAcceleration     |ParticleSystem:getTangentialAcceleration|
    - hasRelativeRotation                 |ParticleSystem:hasRelativeRotation|
    - isActive                                       |ParticleSystem:isActive|
    - isPaused                                       |ParticleSystem:isPaused|
    - isStopped                                     |ParticleSystem:isStopped|
    - moveTo                                           |ParticleSystem:moveTo|
    - pause                                             |ParticleSystem:pause|
    - reset                                             |ParticleSystem:reset|
    - setAreaSpread                             |ParticleSystem:setAreaSpread|
    - setBufferSize                             |ParticleSystem:setBufferSize|
    - setColors                                     |ParticleSystem:setColors|
    - setDirection                               |ParticleSystem:setDirection|
    - setEmissionRate                         |ParticleSystem:setEmissionRate|
    - setEmitterLifetime                   |ParticleSystem:setEmitterLifetime|
    - setInsertMode                             |ParticleSystem:setInsertMode|
    - setLinearAcceleration             |ParticleSystem:setLinearAcceleration|
    - setLinearDamping                       |ParticleSystem:setLinearDamping|
    - setOffset                                     |ParticleSystem:setOffset|
    - setParticleLifetime                 |ParticleSystem:setParticleLifetime|
    - setPosition                                 |ParticleSystem:setPosition|
    - setQuads                                       |ParticleSystem:setQuads|
    - setRadialAcceleration             |ParticleSystem:setRadialAcceleration|
    - setRelativeRotation                 |ParticleSystem:setRelativeRotation|
    - setRotation                                 |ParticleSystem:setRotation|
    - setSizes                                       |ParticleSystem:setSizes|
    - setSizeVariation                       |ParticleSystem:setSizeVariation|
    - setSpeed                                       |ParticleSystem:setSpeed|
    - setSpin                                         |ParticleSystem:setSpin|
    - setSpinVariation                       |ParticleSystem:setSpinVariation|
    - setSpread                                     |ParticleSystem:setSpread|
    - setTexture                                   |ParticleSystem:setTexture|
    - setTangentialAcceleration     |ParticleSystem:setTangentialAcceleration|
    - start                                             |ParticleSystem:start|
    - stop                                               |ParticleSystem:stop|
    - update                                           |ParticleSystem:update|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.5.1. clone                                        *ParticleSystem:clone*

Creates an identical copy of the ParticleSystem in the stopped state.

Cloned ParticleSystem inherit all the set-able state of the original
ParticleSystem, but they are initialized stopped.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - particlesystem: <ParticleSystem> The new identical copy of this
              ParticleSystem.

------------------------------------------------------------------------------
2.5.2.5.2. emit                                          *ParticleSystem:emit*

Emits a burst of particles from the particle emitter.

Variants:
    1:
        - `Arguments`:
            - numparticles: <number> The amount of particles to emit. The
              number of emitted particles will be truncated if the particle
              system's max buffer size is reached.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.3. getCount                                  *ParticleSystem:getCount*

Gets the amount of particles that are currently in the system.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - count: <number> The current number of live particles.

------------------------------------------------------------------------------
2.5.2.5.4. getAreaSpread                        *ParticleSystem:getAreaSpread*

Gets the area-based spawn parameters for the particles.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - distribution: <AreaSpreadDistribution> The type of distribution
              for new particles.
            - dx: <number> The maximum spawn distance from the emitter along
              the x-axis for uniform distribution, or the standard deviation
              along the x-axis for normal distribution.
            - dy: <number> The maximum spawn distance from the emitter along
              the y-axis for uniform distribution, or the standard deviation
              along the y-axis for normal distribution.

------------------------------------------------------------------------------
2.5.2.5.5. getBufferSize                        *ParticleSystem:getBufferSize*

Gets the size of the buffer (the max allowed amount of particles in the
system).

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - buffer: <number> The buffer size.

------------------------------------------------------------------------------
2.5.2.5.6. getColors                                *ParticleSystem:getColors*

Gets a series of colors to apply to the particle sprite. The particle system
will interpolate between each color evenly over the particle's lifetime. Color
modulation needs to be activated for this function to have any effect.

Arguments are passed in groups of four, representing the components of the
desired RGBA value. At least one color must be specified. A maximum of eight
may be used.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - r1: <number> First color, red component (0-255).
            - g1: <number> First color, green component (0-255).
            - b1: <number> First color, blue component (0-255).
            - a1: <number> First color, alpha component (0-255).
            - r2: <number> Second color, red component (0-255).
            - g2: <number> Second color, green component (0-255).
            - b2: <number> Second color, blue component (0-255).
            - a2: <number> Second color, alpha component (0-255).
            - ...: <number> Etc.

------------------------------------------------------------------------------
2.5.2.5.7. getDirection                          *ParticleSystem:getDirection*

Gets the direction the particles will be emitted in.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - direction: <number> The direction of the particles (in radians).

------------------------------------------------------------------------------
2.5.2.5.8. getEmissionRate                    *ParticleSystem:getEmissionRate*

Gets the amount of particles emitted per second.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - rate: <number> The amount of particles per second.

------------------------------------------------------------------------------
2.5.2.5.9. getInsertMode                        *ParticleSystem:getInsertMode*

Gets the mode to use when the ParticleSystem adds new particles.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - mode: <ParticleInsertMode> The mode to use when the
              ParticleSystem adds new particles.

------------------------------------------------------------------------------
2.5.2.5.10. getLinearAcceleration       *ParticleSystem:getLinearAcceleration*

Gets the linear acceleration (acceleration along the x and y axes) for
particles.

Every particle created will accelerate along the x and y axes between
xmin,ymin and xmax,ymax.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - xmin: <number> The minimum acceleration along the x axis.
            - ymin: <number> The minimum acceleration along the y axis.
            - xmax: <number> The maximum acceleration along the x axis.
            - ymax: <number> The maximum acceleration along the y axis.

------------------------------------------------------------------------------
2.5.2.5.11. getLinearDamping                 *ParticleSystem:getLinearDamping*

Gets the amount of linear damping (constant deceleration) for particles.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The minimum amount of linear damping applied to
              particles.
            - max: <number> The maximum amount of linear damping applied to
              particles.

------------------------------------------------------------------------------
2.5.2.5.12. getEmitterLifetime             *ParticleSystem:getEmitterLifetime*

Gets how long the particle system should emit particles (if -1 then it emits
particles forever).

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - life: <number> The lifetime of the emitter (in seconds).

------------------------------------------------------------------------------
2.5.2.5.13. getOffset                               *ParticleSystem:getOffset*

Get the offget position which the particle sprite is rotated around. If this
function is not used, the particles rotate around their center.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x coordinate of the rotation offget.
            - y: <number> The y coordinate of the rotation offget.

------------------------------------------------------------------------------
2.5.2.5.14. getParticleLifetime           *ParticleSystem:getParticleLifetime*

Gets the life of the particles.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The minimum life of the particles (seconds).
            - max: <number> The maximum life of the particles (seconds).

------------------------------------------------------------------------------
2.5.2.5.15. getPosition                           *ParticleSystem:getPosition*

Gets the position of the emitter.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> Position along x-axis.
            - y: <number> Position along y-axis.

------------------------------------------------------------------------------
2.5.2.5.16. getRadialAcceleration       *ParticleSystem:getRadialAcceleration*

Get the radial acceleration (away from the emitter).

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The minimum acceleration.
            - max: <number> The maximum acceleration.

------------------------------------------------------------------------------
2.5.2.5.17. getRotation                           *ParticleSystem:getRotation*

Gets the rotation of the image upon particle creation (in radians).

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The minimum initial angle (radians).
            - max: <number> The maximum initial angle (radians).

------------------------------------------------------------------------------
2.5.2.5.18. getSizes                                 *ParticleSystem:getSizes*

Gets a series of sizes by which to scale a particle sprite. 1.0 is normal
size. The particle system will interpolate between each size evenly over the
particle's lifetime.

At least one size must be specified. A maximum of eight may be used.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - size1: <number> The first size.
            - size2: <number> The second size.
            - ...: <number> Etc.

------------------------------------------------------------------------------
2.5.2.5.19. getSizeVariation                 *ParticleSystem:getSizeVariation*

Gets the degree of variation (0 meaning no variation and 1 meaning full
variation between start and end).

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - variation: <number> The degree of variation (0 meaning no
              variation and 1 meaning full variation between start and end).

------------------------------------------------------------------------------
2.5.2.5.20. getSpeed                                 *ParticleSystem:getSpeed*

Gets the speed of the particles.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The minimum linear speed of the particles.
            - max: <number> The maximum linear speed of the particles.

------------------------------------------------------------------------------
2.5.2.5.21. getSpin                                   *ParticleSystem:getSpin*

Gets the spin of the sprite.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The minimum spin (radians per second).
            - max: <number> The maximum spin (radians per second).

------------------------------------------------------------------------------
2.5.2.5.22. getSpinVariation                 *ParticleSystem:getSpinVariation*

Gets the degree of variation (0 meaning no variation and 1 meaning full
variation between start and end).

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - variation: <number> The degree of variation (0 meaning no
              variation and 1 meaning full variation between start and end).

------------------------------------------------------------------------------
2.5.2.5.23. getSpread                               *ParticleSystem:getSpread*

Gets the amount of spread for the system.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - spread: <number> The amount of spread (radians).

------------------------------------------------------------------------------
2.5.2.5.24. getTexture                             *ParticleSystem:getTexture*

Gets the Image or Canvas which is to be emitted.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - texture: <Texture> An Image or Canvas to use for the particle.

------------------------------------------------------------------------------
2.5.2.5.25. getTangentialAcceleration                                         
                                    *ParticleSystem:getTangentialAcceleration*

Gets the tangential acceleration (acceleration perpendicular to the particle's
direction).

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <number> The minimum acceleration.
            - max: <number> The maximum acceleration.

------------------------------------------------------------------------------
2.5.2.5.26. hasRelativeRotation           *ParticleSystem:hasRelativeRotation*

Gets whether particle angles and rotations are relative to their velocities.
If enabled, particles are aligned to the angle of their velocities and rotate
relative to that angle.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> True if relative particle rotation is
              enabled, false if it's disabled.

------------------------------------------------------------------------------
2.5.2.5.27. isActive                                 *ParticleSystem:isActive*

Checks whether the particle system is actively emitting particles.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - active: <boolean> True if system is active, false otherwise.

------------------------------------------------------------------------------
2.5.2.5.28. isPaused                                 *ParticleSystem:isPaused*

Checks whether the particle system is paused.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - paused: <boolean> True if system is paused, false otherwise.

------------------------------------------------------------------------------
2.5.2.5.29. isStopped                               *ParticleSystem:isStopped*

Checks whether the particle system is stopped.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - stopped: <boolean> True if system is stopped, false otherwise.

------------------------------------------------------------------------------
2.5.2.5.30. moveTo                                     *ParticleSystem:moveTo*

Moves the position of the emitter. This results in smoother particle spawning
behaviour than if ParticleSystem:setPosition is used every frame.

Variants:
    1:
        - `Arguments`:
            - x: <number> Position along x-axis.
            - y: <number> Position along y-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.31. pause                                       *ParticleSystem:pause*

Pauses the particle emitter.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.32. reset                                       *ParticleSystem:reset*

Resets the particle emitter, removing any existing particles and resetting the
lifetime counter.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.33. setAreaSpread                       *ParticleSystem:setAreaSpread*

Sets area-based spawn parameters for the particles. Newly created particles
will spawn in an area around the emitter based on the parameters to this
function.

Variants:
    1:
        - `Arguments`:
            - distribution: <AreaSpreadDistribution> The type of distribution
              for new particles.
            - dx: <number> The maximum spawn distance from the emitter along
              the x-axis for uniform distribution, or the standard deviation
              along the x-axis for normal distribution.
            - dy: <number> The maximum spawn distance from the emitter along
              the y-axis for uniform distribution, or the standard deviation
              along the y-axis for normal distribution.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.34. setBufferSize                       *ParticleSystem:setBufferSize*

Sets the size of the buffer (the max allowed amount of particles in the
system).

Variants:
    1:
        - `Arguments`:
            - buffer: <number> The buffer size.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.35. setColors                               *ParticleSystem:setColors*

Sets a series of colors to apply to the particle sprite. The particle system
will interpolate between each color evenly over the particle's lifetime. Color
modulation needs to be activated for this function to have any effect.

Arguments are passed in groups of four, representing the components of the
desired RGBA value. At least one color must be specified. A maximum of eight
may be used.

Variants:
    1:
        - `Arguments`:
            - r1: <number> First color, red component (0-255).
            - g1: <number> First color, green component (0-255).
            - b1: <number> First color, blue component (0-255).
            - a1: <number> First color, alpha component (0-255).
            - r2: <number> Second color, red component (0-255).
            - g2: <number> Second color, green component (0-255).
            - b2: <number> Second color, blue component (0-255).
            - a2: <number> Second color, alpha component (0-255).
            - ...: <number> Etc.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.36. setDirection                         *ParticleSystem:setDirection*

Sets the direction the particles will be emitted in.

Variants:
    1:
        - `Arguments`:
            - direction: <number> The direction of the particles (in radians).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.37. setEmissionRate                   *ParticleSystem:setEmissionRate*

Sets the amount of particles emitted per second.

Variants:
    1:
        - `Arguments`:
            - rate: <number> The amount of particles per second.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.38. setEmitterLifetime             *ParticleSystem:setEmitterLifetime*

Sets how long the particle system should emit particles (if -1 then it emits
particles forever).

Variants:
    1:
        - `Arguments`:
            - life: <number> The lifetime of the emitter (in seconds).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.39. setInsertMode                       *ParticleSystem:setInsertMode*

Sets the mode to use when the ParticleSystem adds new particles.

Variants:
    1:
        - `Arguments`:
            - mode: <ParticleInsertMode> The mode to use when the
              ParticleSystem adds new particles.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.40. setLinearAcceleration       *ParticleSystem:setLinearAcceleration*

Sets the linear acceleration (acceleration along the x and y axes) for
particles.

Every particle created will accelerate along the x and y axes between
xmin,ymin and xmax,ymax.

Variants:
    1:
        - `Arguments`:
            - xmin: <number> The minimum acceleration along the x axis.
            - ymin: <number> The minimum acceleration along the y axis.
            - xmax: <number> The maximum acceleration along the x axis.
            - ymax: <number> The maximum acceleration along the y axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.41. setLinearDamping                 *ParticleSystem:setLinearDamping*

Sets the amount of linear damping (constant deceleration) for particles.

Variants:
    1:
        - `Arguments`:
            - min: <number> The minimum amount of linear damping applied to
              particles.
            - max: <number> The maximum amount of linear damping applied to
              particles.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.42. setOffset                               *ParticleSystem:setOffset*

Set the offset position which the particle sprite is rotated around. If this
function is not used, the particles rotate around their center.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x coordinate of the rotation offset.
            - y: <number> The y coordinate of the rotation offset.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.43. setParticleLifetime           *ParticleSystem:setParticleLifetime*

Sets the life of the particles.

Variants:
    1:
        - `Arguments`:
            - min: <number> The minimum life of the particles (seconds).
            - max: <number> The maximum life of the particles (seconds).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.44. setPosition                           *ParticleSystem:setPosition*

Sets the position of the emitter.

Variants:
    1:
        - `Arguments`:
            - x: <number> Position along x-axis.
            - y: <number> Position along y-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.45. setQuads                                 *ParticleSystem:setQuads*

Sets a series of Quads to use for the particle sprites. Particles will choose
a Quad from the list based on the particle's current lifetime, allowing for
the use of animated sprite sheets with ParticleSystems.

Variants:
    1:
        - `Arguments`:
            - quad1: <Quad> The first Quad to use.
            - quad2: <Quad> The second Quad to use.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.46. setRadialAcceleration       *ParticleSystem:setRadialAcceleration*

Set the radial acceleration (away from the emitter).

Variants:
    1:
        - `Arguments`:
            - min: <number> The minimum acceleration.
            - max: <number> The maximum acceleration.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.47. setRelativeRotation           *ParticleSystem:setRelativeRotation*

Sets whether particle angles and rotations are relative to their velocities.
If enabled, particles are aligned to the angle of their velocities and rotate
relative to that angle.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True to enable relative particle rotation,
              false to disable it.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.48. setRotation                           *ParticleSystem:setRotation*

Sets the rotation of the image upon particle creation (in radians).

Variants:
    1:
        - `Arguments`:
            - min: <number> The minimum initial angle (radians).
            - max: <number> The maximum initial angle (radians).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.49. setSizes                                 *ParticleSystem:setSizes*

Sets a series of sizes by which to scale a particle sprite. 1.0 is normal
size. The particle system will interpolate between each size evenly over the
particle's lifetime.

At least one size must be specified. A maximum of eight may be used.

Variants:
    1:
        - `Arguments`:
            - size1: <number> The first size.
            - size2: <number> The second size.
            - ...: <number> Etc.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.50. setSizeVariation                 *ParticleSystem:setSizeVariation*

Sets the degree of variation (0 meaning no variation and 1 meaning full
variation between start and end).

Variants:
    1:
        - `Arguments`:
            - variation: <number> The degree of variation (0 meaning no
              variation and 1 meaning full variation between start and end).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.51. setSpeed                                 *ParticleSystem:setSpeed*

Sets the speed of the particles.

Variants:
    1:
        - `Arguments`:
            - min: <number> The minimum linear speed of the particles.
            - max: <number> The maximum linear speed of the particles.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.52. setSpin                                   *ParticleSystem:setSpin*

Sets the spin of the sprite.

Variants:
    1:
        - `Arguments`:
            - min: <number> The minimum spin (radians per second).
            - max: <number> The maximum spin (radians per second).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.53. setSpinVariation                 *ParticleSystem:setSpinVariation*

Sets the degree of variation (0 meaning no variation and 1 meaning full
variation between start and end).

Variants:
    1:
        - `Arguments`:
            - variation: <number> The degree of variation (0 meaning no
              variation and 1 meaning full variation between start and end).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.54. setSpread                               *ParticleSystem:setSpread*

Sets the amount of spread for the system.

Variants:
    1:
        - `Arguments`:
            - spread: <number> The amount of spread (radians).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.55. setTexture                             *ParticleSystem:setTexture*

Sets the Image or Canvas which is to be emitted.

Variants:
    1:
        - `Arguments`:
            - texture: <Texture> An Image or Canvas to use for the particle.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.56. setTangentialAcceleration                                         
                                    *ParticleSystem:setTangentialAcceleration*

Sets the tangential acceleration (acceleration perpendicular to the particle's
direction).

Variants:
    1:
        - `Arguments`:
            - min: <number> The minimum acceleration.
            - max: <number> The maximum acceleration.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.57. start                                       *ParticleSystem:start*

Starts the particle emitter.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.58. stop                                         *ParticleSystem:stop*

Stops the particle emitter, resetting the lifetime counter.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.5.59. update                                     *ParticleSystem:update*

Updates the particle system; moving, creating and killing particles.

Variants:
    1:
        - `Arguments`:
            - dt: <number> The time (seconds) since last frame.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.6. Quad                                 *love-Quad* *love.graphics-Quad*

A quadrilateral (a polygon with four sides and four corners) with texture
coordinate information.

Quads can be used to select part of a texture to draw. In this way, one large
texture atlas can be loaded, and then split up into sub-images.

Constructors: 
    - newQuad                                          |love.graphics.newQuad|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getViewport                                           |Quad:getViewport|
    - setViewport                                           |Quad:setViewport|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.6.1. getViewport                                      *Quad:getViewport*

Gets the current viewport of this Quad.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The top-left corner along the x-axis.
            - y: <number> The top-right corner along the y-axis.
            - w: <number> The width of the viewport.
            - h: <number> The height of the viewport.

------------------------------------------------------------------------------
2.5.2.6.2. setViewport                                      *Quad:setViewport*

Sets the texture coordinates according to a viewport.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The top-left corner along the x-axis.
            - y: <number> The top-right corner along the y-axis.
            - w: <number> The width of the viewport.
            - h: <number> The height of the viewport.

------------------------------------------------------------------------------
2.5.2.7. Shader                           *love-Shader* *love.graphics-Shader*

A Shader is used for advanced hardware-accelerated pixel or vertex
manipulation. These effects are written in a language based on GLSL (OpenGL
Shading Language) with a few things simplified for easier coding.

Potential uses for shaders include HDR/bloom, motion blur,
grayscale/invert/sepia/any kind of color effect, reflection/refraction,
distortions, bump mapping, and much more! Here is a collection of basic
shaders and good starting point to learn: https://github.com/vrld/shine

Constructors: 
    - newShader                                      |love.graphics.newShader|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getExternVariable                             |Shader:getExternVariable|
    - getWarnings                                         |Shader:getWarnings|
    - send                                                       |Shader:send|
    - sendColor                                             |Shader:sendColor|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.7.1. getExternVariable                        *Shader:getExternVariable*

Gets information about an 'extern' ('uniform') variable in the shader.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name of the extern variable.
        - `Returns`:
            - type: <ShaderVariableType> The base type of the variable.
            - components: <number> The number of components in the variable
              (e.g. 2 for a vec2 or mat2.)
            - arrayelements: <number> The number of elements in the array if
              the variable is an array, or 1 if not.

------------------------------------------------------------------------------
2.5.2.7.2. getWarnings                                    *Shader:getWarnings*

Returns any warning and error messages from compiling the shader code. This
can be used for debugging your shaders if there's anything the graphics
hardware doesn't like.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - warnings: <string> Warning messages (if any).

------------------------------------------------------------------------------
2.5.2.7.3. send                                                  *Shader:send*

Sends one or more values to a special (extern) variable inside the shader.

Variants:
    1:
        - `Arguments`:
            - name: <string> Name of the number to send to the pixel effect.
            - number: <number> Number to send to the pixel effect.
            - ...: <number> Additional numbers to send in case the extern is
              an array.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - name: <string> Name of the vector to send to the shader.
            - vector: <table> Numbers to send to the extern as a vector. The
              number of elements in the table determines the type of the
              vector (e.g. two numbers -> vec2). At least two and at most four
              numbers can be used.
            - ...: <table> Additional vectors to send in case the extern is an
              array. All vectors need to be of the same size (e.g. only
              vec3's)
        - `Returns`: Nothing
    3:
        - `Arguments`:
            - name: <string> Name of the matrix to send to the shader.
            - matrix: <table> 2x2, 3x3, or 4x4 matrix to send to the extern.
              Using table form: {{a,b,c,d}, {e,f,g,h}, ... }
            - ...: <table> Additional matrices of the same type as matrix to
              store in the extern array.
        - `Returns`: Nothing
    4:
        - `Arguments`:
            - name: <string> Name of the Image to send to the shader.
            - image: <Image> Image to send to the extern.
            - ...: <Image> Additional images in case the extern is an array.
        - `Returns`: Nothing
    5:
        - `Arguments`:
            - name: <string> Name of the Canvas to send to the shader.
            - canvas: <Canvas> Canvas to send to the extern. The shader extern
              type is Image.
            - ...: <Canvas> Additional canvases to send to the extern array.
        - `Returns`: Nothing
    6:
        - `Arguments`:
            - name: <string> Name of the boolean to send to the shader.
            - boolean: <boolean> Boolean to send to store in the extern.
            - ...: <boolean> Additional booleans to send in case the extern is
              an array.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.7.4. sendColor                                        *Shader:sendColor*

Sends one or more colors to a special (extern / uniform) vec3 or vec4 variable
inside the shader. The color components must be in the range of [0, 255],
unlike Shader:send. The colors are gamma-corrected if global gamma-correction
is enabled.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name of the color extern variable to send to
              in the shader.
            - color: <table> A table with red, green, blue, and optional alpha
              color components in the range of [0, 255] to send to the extern
              as a vector.
            - ...: <table> Additional colors to send in case the extern is an
              array. All colors need to be of the same size (e.g. only
              vec3's).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.8. SpriteBatch            *love-SpriteBatch* *love.graphics-SpriteBatch*

Using a single image, draw any number of identical copies of the image using a
single call to love.graphics.draw. This can be used, for example, to draw
repeating copies of a single background image.

A SpriteBatch can be even more useful when the underlying image is a Texture
Atlas (a single image file containing many independent images); by adding Quad
to the batch, different sub-images from within the atlas can be drawn.

Constructors: 
    - newSpriteBatch                            |love.graphics.newSpriteBatch|

Supertypes: 
    - Drawable                                                 |love-Drawable|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - add                                                    |SpriteBatch:add|
    - attachAttribute                            |SpriteBatch:attachAttribute|
    - clear                                                |SpriteBatch:clear|
    - flush                                                |SpriteBatch:flush|
    - getBufferSize                                |SpriteBatch:getBufferSize|
    - getColor                                          |SpriteBatch:getColor|
    - getCount                                          |SpriteBatch:getCount|
    - getTexture                                      |SpriteBatch:getTexture|
    - set                                                    |SpriteBatch:set|
    - setBufferSize                                |SpriteBatch:setBufferSize|
    - setColor                                          |SpriteBatch:setColor|
    - setTexture                                      |SpriteBatch:setTexture|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.8.1. add                                               *SpriteBatch:add*

Add a sprite to the batch.

Variants:
    1:
        - `Arguments`:
            - x: <number> The position to draw the object (x-axis).
            - y: <number> The position to draw the object (y-axis).
            - r: <number> Orientation (radians).
            - sx: <number> Scale factor (x-axis).
            - sy: <number> Scale factor (y-axis).
            - ox: <number> Origin offset (x-axis).
            - oy: <number> Origin offset (y-axis).
            - kx: <number> Shear factor (x-axis).
            - ky: <number> Shear factor (y-axis).
        - `Returns`:
            - id: <number> An identifier for the added sprite.
    2:
        - `Arguments`:
            - quad: <Quad> The Quad to add.
            - x: <number> The position to draw the object (x-axis).
            - y: <number> The position to draw the object (y-axis).
            - r: <number> Orientation (radians).
            - sx: <number> Scale factor (x-axis).
            - sy: <number> Scale factor (y-axis).
            - ox: <number> Origin offset (x-axis).
            - oy: <number> Origin offset (y-axis).
            - kx: <number> Shear factor (x-axis).
            - ky: <number> Shear factor (y-axis).
        - `Returns`:
            - id: <number> An identifier for the added sprite.

------------------------------------------------------------------------------
2.5.2.8.2. attachAttribute                       *SpriteBatch:attachAttribute*

Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use
when drawing. This can be combined with a Shader to augment a SpriteBatch with
per-vertex or additional per-sprite information instead of just having
per-sprite colors.

Each sprite in a SpriteBatch has 4 vertices in the following order: top-left,
bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add
(and used by SpriteBatch:set) can be multiplied by 4 to determine the first
vertex in a specific sprite.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name of the vertex attribute to attach.
            - mesh: <Mesh> The Mesh to get the vertex attribute from.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.8.3. clear                                           *SpriteBatch:clear*

Removes all sprites from the buffer.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.8.4. flush                                           *SpriteBatch:flush*

Immediately sends all new and modified sprite data in the batch to the
graphics card.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.8.5. getBufferSize                           *SpriteBatch:getBufferSize*

Gets the maximum number of sprites the SpriteBatch can hold.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - size: <number> The maximum number of sprites the batch can hold.

------------------------------------------------------------------------------
2.5.2.8.6. getColor                                     *SpriteBatch:getColor*

Gets the color that will be used for the next add and set operations.

If no color has been set with SpriteBatch:setColor or the current SpriteBatch
color has been cleared, this method will return nil.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - r: <number> The red component (0-255).
            - g: <number> The green component (0-255).
            - b: <number> The blue component (0-255).
            - a: <number> The alpha component (0-255).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.8.7. getCount                                     *SpriteBatch:getCount*

Gets the amount of sprites currently in the SpriteBatch.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - count: <number> The amount of sprites currently in the batch.

------------------------------------------------------------------------------
2.5.2.8.8. getTexture                                 *SpriteBatch:getTexture*

Returns the Image or Canvas used by the SpriteBatch.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - texture: <Texture> The Image or Canvas for the sprites.

------------------------------------------------------------------------------
2.5.2.8.9. set                                               *SpriteBatch:set*

Changes a sprite in the batch. This requires the identifier returned by add
and addq.

Variants:
    1:
        - `Arguments`:
            - id: <number> The identifier of the sprite that will be changed.
            - x: <number> The position to draw the object (x-axis).
            - y: <number> The position to draw the object (y-axis).
            - r: <number> Orientation (radians).
            - sx: <number> Scale factor (x-axis).
            - sy: <number> Scale factor (y-axis).
            - ox: <number> Origin offset (x-axis).
            - oy: <number> Origin offset (y-axis).
            - kx: <number> Shear factor (x-axis).
            - ky: <number> Shear factor (y-axis).
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - id: <number> The identifier of the sprite that will be changed.
            - quad: <Quad> The quad used on the image of the batch.
            - x: <number> The position to draw the object (x-axis).
            - y: <number> The position to draw the object (y-axis).
            - r: <number> Orientation (radians).
            - sx: <number> Scale factor (x-axis).
            - sy: <number> Scale factor (y-axis).
            - ox: <number> Origin offset (x-axis).
            - oy: <number> Origin offset (y-axis).
            - kx: <number> Shear factor (x-axis).
            - ky: <number> Shear factor (y-axis).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.8.10. setBufferSize                          *SpriteBatch:setBufferSize*

Sets the maximum number of sprites the SpriteBatch can hold. Existing sprites
in the batch (up to the new maximum) will not be cleared when this function is
called.

Variants:
    1:
        - `Arguments`:
            - size: <number> The new maximum number of sprites the batch can
              hold.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.8.11. setColor                                    *SpriteBatch:setColor*

Sets the color that will be used for the next add and set operations. Calling
the function without arguments will clear the color.

The global color set with love.graphics.setColor will not work on the
SpriteBatch if any of the sprites has its own color.

Variants:
    1:
        - `Arguments`:
            - r: <number> The amount of red.
            - g: <number> The amount of green.
            - b: <number> The amount of blue.
            - a: <number> The amount of alpha.
        - `Returns`: Nothing
    2:
        - 'Description': Disables all per-sprite colors for this SpriteBatch.
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.8.12. setTexture                                *SpriteBatch:setTexture*

Replaces the Image or Canvas used for the sprites.

Variants:
    1:
        - `Arguments`:
            - texture: <Texture> The new Image or Canvas to use for the
              sprites.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.9. Text                                 *love-Text* *love.graphics-Text*

Drawable text.

Constructors: 
    - newText                                          |love.graphics.newText|

Supertypes: 
    - Drawable                                                 |love-Drawable|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - add                                                           |Text:add|
    - addf                                                         |Text:addf|
    - clear                                                       |Text:clear|
    - getDimensions                                       |Text:getDimensions|
    - getFont                                                   |Text:getFont|
    - getHeight                                               |Text:getHeight|
    - getWidth                                                 |Text:getWidth|
    - set                                                           |Text:set|
    - setf                                                         |Text:setf|
    - setFont                                                   |Text:setFont|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.9.1. add                                                      *Text:add*

Adds additional colored text to the Text object at the specified position.

Variants:
    1:
        - `Arguments`:
            - textstring: <string> The text to add to the object.
            - x: <number> The position of the new text on the x-axis.
            - y: <number> The position of the new text on the y-axis.
            - angle: <number> The orientation of the new text in radians.
            - sx: <number> Scale factor on the x-axis.
            - sy: <number> Scale factor on the y-axis.
            - ox: <number> Origin offset on the x-axis.
            - oy: <number> Origin offset on the y-axis.
            - kx: <number> Shearing / skew factor on the x-axis.
            - ky: <number> Shearing / skew factor on the y-axis.
        - `Returns`:
            - index: <number> An index number that can be used with
              Text:getWidth or Text:getHeight.
    2:
        - `Arguments`:
            - coloredtext: <table> A table containing colors and strings to
              use as the new text, in the form of { color1, string1, color2,
              string2, ... }.
            - x: <number> The position of the new text on the x-axis.
            - y: <number> The position of the new text on the y-axis.
            - angle: <number> The orientation of the new text in radians.
            - sx: <number> Scale factor on the x-axis.
            - sy: <number> Scale factor on the y-axis.
            - ox: <number> Origin offset on the x-axis.
            - oy: <number> Origin offset on the y-axis.
            - kx: <number> Shearing / skew factor on the x-axis.
            - ky: <number> Shearing / skew factor on the y-axis.
        - `Returns`:
            - index: <number> An index number that can be used with
              Text:getWidth or Text:getHeight.

------------------------------------------------------------------------------
2.5.2.9.2. addf                                                    *Text:addf*

Adds additional formatted / colored text to the Text object at the specified
position.

Variants:
    1:
        - `Arguments`:
            - textstring: <string> The text to add to the object.
            - wraplimit: <number> The maximum width in pixels of the text
              before it gets automatically wrapped to a new line.
            - align: <AlignMode> The alignment of the text.
            - x: <number> The position of the new text on the x-axis.
            - y: <number> The position of the new text on the y-axis.
            - angle: <number> The orientation of the object in radians.
            - sx: <number> Scale factor on the x-axis.
            - sy: <number> Scale factor on the y-axis.
            - ox: <number> Origin offset on the x-axis.
            - oy: <number> Origin offset on the y-axis.
            - kx: <number> Shearing / skew factor on the x-axis.
            - ky: <number> Shearing / skew factor on the y-axis.
        - `Returns`:
            - index: <number> An index number that can be used with
              Text:getWidth or Text:getHeight.
    2:
        - `Arguments`:
            - coloredtext: <table> A table containing colors and strings to
              use as the new text, in the form of { color1, string1, color2,
              string2, ... }.
            - wraplimit: <number> The maximum width in pixels of the text
              before it gets automatically wrapped to a new line.
            - align: <AlignMode> The alignment of the text.
            - x: <number> The position of the new text on the x-axis.
            - y: <number> The position of the new text on the y-axis.
            - angle: <number> The orientation of the object in radians.
            - sx: <number> Scale factor on the x-axis.
            - sy: <number> Scale factor on the y-axis.
            - ox: <number> Origin offset on the x-axis.
            - oy: <number> Origin offset on the y-axis.
            - kx: <number> Shearing / skew factor on the x-axis.
            - ky: <number> Shearing / skew factor on the y-axis.
        - `Returns`:
            - index: <number> An index number that can be used with
              Text:getWidth or Text:getHeight.

------------------------------------------------------------------------------
2.5.2.9.3. clear                                                  *Text:clear*

Clears the contents of the Text object.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.9.4. getDimensions                                  *Text:getDimensions*

Gets the width and height of the text in pixels.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the text. If multiple sub-strings
              have been added with Text:add, the width of the last sub-string
              is returned.
            - height: <number> The height of the text. If multiple sub-strings
              have been added with Text:add, the height of the last sub-string
              is returned.
    2:
        - 'Description': Gets the width and height of a specific sub-string
          that was previously added to the Text object.
        - `Arguments`:
            - index: <number> An index number returned by Text:add or
              Text:addf.
        - `Returns`:
            - width: <number> The width of the sub-string (before scaling and
              other transformations).
            - height: <number> The height of the sub-string (before scaling
              and other transformations).

------------------------------------------------------------------------------
2.5.2.9.5. getFont                                              *Text:getFont*

Gets the Font used with the Text object.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - font: <Font> The font used with this Text object.

------------------------------------------------------------------------------
2.5.2.9.6. getHeight                                          *Text:getHeight*

Gets the height of the text in pixels.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The height of the text. If multiple sub-strings
              have been added with Text:add, the height of the last sub-string
              is returned.
    2:
        - 'Description': Gets the height of a specific sub-string that was
          previously added to the Text object.
        - `Arguments`:
            - index: <number> An index number returned by Text:add or
              Text:addf.
        - `Returns`:
            - height: <number> The height of the sub-string (before scaling
              and other transformations).

------------------------------------------------------------------------------
2.5.2.9.7. getWidth                                            *Text:getWidth*

Gets the width of the text in pixels.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the text. If multiple sub-strings
              have been added with Text:add, the width of the last sub-string
              is returned.
    2:
        - 'Description': Gets the width of a specific sub-string that was
          previously added to the Text object.
        - `Arguments`:
            - index: <number> An index number returned by Text:add or
              Text:addf.
        - `Returns`:
            - width: <number> The width of the sub-string (before scaling and
              other transformations).

------------------------------------------------------------------------------
2.5.2.9.8. set                                                      *Text:set*

Replaces the contents of the Text object with a new unformatted string.

Variants:
    1:
        - `Arguments`:
            - textstring: <string> The new string of text to use.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - coloredtext: <table> A table containing colors and strings to
              use as the new text, in the form of { color1, string1, color2,
              string2, ... }.
        - `Returns`: Nothing
    3:
        - 'Description': Clears the contents of the Text object.
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.9.9. setf                                                    *Text:setf*

Replaces the contents of the Text object with a new formatted string.

Variants:
    1:
        - `Arguments`:
            - textstring: <string> The new string of text to use.
            - wraplimit: <number> The maximum width in pixels of the text
              before it gets automatically wrapped to a new line.
            - align: <AlignMode> The alignment of the text.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - coloredtext: <table> A table containing colors and strings to
              use as the new text, in the form of { color1, string1, color2,
              string2, ... }.
            - wraplimit: <number> The maximum width in pixels of the text
              before it gets automatically wrapped to a new line.
            - align: <AlignMode> The alignment of the text.
        - `Returns`: Nothing
    3:
        - 'Description': Clears the contents of the Text object.
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.9.10. setFont                                             *Text:setFont*

Replaces the Font used with the text.

Variants:
    1:
        - `Arguments`:
            - font: <Font> The new font to use with this Text object.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.10. Texture                       *love-Texture* *love.graphics-Texture*

Superclass for drawable objects which represent a texture. All Textures can be
drawn with Quads. This is an abstract type that can't be created directly.

Constructors: 

Supertypes: 
    - Drawable                                                 |love-Drawable|
    - Object                                                     |love-Object|

Subtypes: 
    - Canvas                                                     |love-Canvas|
    - Image                                                       |love-Image|

Functions: 
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.11. Video                             *love-Video* *love.graphics-Video*

A drawable video.

Constructors: 
    - newVideo                                        |love.graphics.newVideo|

Supertypes: 
    - Drawable                                                 |love-Drawable|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getDimensions                                      |Video:getDimensions|
    - getFilter                                              |Video:getFilter|
    - getHeight                                              |Video:getHeight|
    - getSource                                              |Video:getSource|
    - getStream                                              |Video:getStream|
    - getWidth                                                |Video:getWidth|
    - isPlaying                                              |Video:isPlaying|
    - pause                                                      |Video:pause|
    - play                                                        |Video:play|
    - rewind                                                    |Video:rewind|
    - seek                                                        |Video:seek|
    - setFilter                                              |Video:setFilter|
    - setSource                                              |Video:setSource|
    - tell                                                        |Video:tell|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.5.2.11.1. getDimensions                                *Video:getDimensions*

Gets the width and height of the Video in pixels.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the Video.
            - height: <number> The height of the video.

------------------------------------------------------------------------------
2.5.2.11.2. getFilter                                        *Video:getFilter*

Gets the scaling filters used when drawing the Video.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - min: <FilterMode> The filter mode used when scaling the Video
              down.
            - mag: <FilterMode> The filter mode used when scaling the Video
              up.
            - anisotropy: <number> Maximum amount of anisotropic filtering
              used.

------------------------------------------------------------------------------
2.5.2.11.3. getHeight                                        *Video:getHeight*

Gets the height of the Video in pixels.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The height of the Video.

------------------------------------------------------------------------------
2.5.2.11.4. getSource                                        *Video:getSource*

Gets the audio Source used for playing back the video's audio. May return nil
if the video has no audio, or if Video:setSource is called with a nil
argument.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - source: <Source> The audio Source used for audio playback, or
              nil if the video has no audio.

------------------------------------------------------------------------------
2.5.2.11.5. getStream                                        *Video:getStream*

Gets the VideoStream object used for decoding and controlling the video.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - stream: <VideoStream> The VideoStream used for decoding and
              controlling the video.

------------------------------------------------------------------------------
2.5.2.11.6. getWidth                                          *Video:getWidth*

Gets the width of the Video in pixels.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the Video.

------------------------------------------------------------------------------
2.5.2.11.7. isPlaying                                        *Video:isPlaying*

Gets whether the Video is currently playing.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - playing: <boolean> Whether the video is playing.

------------------------------------------------------------------------------
2.5.2.11.8. pause                                                *Video:pause*

Pauses the Video.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.11.9. play                                                  *Video:play*

Starts playing the Video. In order for the video to appear onscreen it must be
drawn with love.graphics.draw.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.11.10. rewind                                             *Video:rewind*

Rewinds the Video to the beginning.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.11.11. seek                                                 *Video:seek*

Sets the current playback position of the Video.

Variants:
    1:
        - `Arguments`:
            - offset: <number> The time in seconds since the beginning of the
              Video.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.11.12. setFilter                                       *Video:setFilter*

Sets the scaling filters used when drawing the Video.

Variants:
    1:
        - `Arguments`:
            - min: <FilterMode> The filter mode used when scaling the Video
              down.
            - mag: <FilterMode> The filter mode used when scaling the Video
              up.
            - anisotropy: <number> Maximum amount of anisotropic filtering
              used.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.11.13. setSource                                       *Video:setSource*

Sets the audio Source used for playing back the video's audio. The audio
Source also controls playback speed and synchronization.

Variants:
    1:
        - `Arguments`:
            - source: <Source> The audio Source used for audio playback, or
              nil to disable audio synchronization.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.2.11.14. tell                                                 *Video:tell*

Gets the current playback position of the Video.

Variants:
    1:
        - `Arguments`:
            - seconds: <number> The time in seconds since the beginning of the
              Video.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.5.3. enums                                             *love.graphics-enums*

Enums within love.graphics:
    AlignMode                                                 |love.AlignMode|
    ArcType                                                     |love.ArcType|
    AreaSpreadDistribution                       |love.AreaSpreadDistribution|
    BlendAlphaMode                                       |love.BlendAlphaMode|
    BlendMode                                                 |love.BlendMode|
    CanvasFormat                                           |love.CanvasFormat|
    CompareMode                                             |love.CompareMode|
    DrawMode                                                   |love.DrawMode|
    FilterMode                                               |love.FilterMode|
    GraphicsFeature                                     |love.GraphicsFeature|
    GraphicsLimit                                         |love.GraphicsLimit|
    LineJoin                                                   |love.LineJoin|
    LineStyle                                                 |love.LineStyle|
    MeshDrawMode                                           |love.MeshDrawMode|
    ParticleInsertMode                               |love.ParticleInsertMode|
    PointStyle                                               |love.PointStyle|
    SpriteBatchUsage                                   |love.SpriteBatchUsage|
    StackType                                                 |love.StackType|
    StencilAction                                         |love.StencilAction|
    WrapMode                                                   |love.WrapMode|

------------------------------------------------------------------------------
2.5.3.1. AlignMode                  *love-AlignMode* *love.graphics-AlignMode*

Text alignment.

Constants:

    center                 Align text center.
    left                   Align text left.
    right                  Align text right.

------------------------------------------------------------------------------
2.5.3.2. ArcType                        *love-ArcType* *love.graphics-ArcType*

Different types of arcs that can be drawn.

Constants:

    pie                    The arc is drawn like a slice of pie, with the arc
                           circle connected to the center at its end-points.
    open                   The arc circle's two end-points are unconnected
                           when the arc is drawn as a line. Behaves like the
                           "closed" arc type when the arc is drawn in filled
                           mode.
    closed                 The arc circle's two end-points are connected to
                           each other.

------------------------------------------------------------------------------
2.5.3.3. AreaSpreadDistribution                  *love-AreaSpreadDistribution*
                                        *love.graphics-AreaSpreadDistribution*

Types of particle area spread distribution.

Constants:

    uniform                Uniform distribution.
    normal                 Normal (gaussian) distribution.
    none                   No distribution - area spread is disabled.

------------------------------------------------------------------------------
2.5.3.4. BlendAlphaMode   *love-BlendAlphaMode* *love.graphics-BlendAlphaMode*

Different ways alpha affects color blending. See BlendMode and the BlendMode
Formulas for additional notes.

Constants:

    alphamultiply          The RGB values of what's drawn are multiplied by
                           the alpha values of those colors during blending.
                           This is the default alpha mode.
    premultiplied          The RGB values of what's drawn are not multiplied
                           by the alpha values of those colors during
                           blending. For most blend modes to work correctly
                           with this alpha mode, the colors of a drawn object
                           need to have had their RGB values multiplied by
                           their alpha values at some point previously
                           ("premultiplied alpha").

------------------------------------------------------------------------------
2.5.3.5. BlendMode                  *love-BlendMode* *love.graphics-BlendMode*

Different ways to do color blending. See BlendAlphaMode and the BlendMode
Formulas for additional notes.

Constants:

    alpha                  Alpha blending (normal). The alpha of what's drawn
                           determines its opacity.
    replace                The colors of what's drawn completely replace what
                           was on the screen, with no additional blending. The
                           BlendAlphaMode specified in
                           love.graphics.setBlendMode still affects what
                           happens.
    screen                 "Screen" blending.
    add                    The pixel colors of what's drawn are added to the
                           pixel colors already on the screen. The alpha of
                           the screen is not modified.
    subtract               The pixel colors of what's drawn are subtracted
                           from the pixel colors already on the screen. The
                           alpha of the screen is not modified.
    multiply               The pixel colors of what's drawn are multiplied
                           with the pixel colors already on the screen
                           (darkening them). The alpha of drawn objects is
                           multiplied with the alpha of the screen rather than
                           determining how much the colors on the screen are
                           affected, even when the "alphamultiply"
                           BlendAlphaMode is used.
    lighten                The pixel colors of what's drawn are compared to
                           the existing pixel colors, and the larger of the
                           two values for each color component is used. Only
                           works when the "premultiplied" BlendAlphaMode is
                           used in love.graphics.setBlendMode.
    darken                 The pixel colors of what's drawn are compared to
                           the existing pixel colors, and the smaller of the
                           two values for each color component is used. Only
                           works when the "premultiplied" BlendAlphaMode is
                           used in love.graphics.setBlendMode.

------------------------------------------------------------------------------
2.5.3.6. CanvasFormat         *love-CanvasFormat* *love.graphics-CanvasFormat*

Canvas formats.

Constants:

    normal                 The default Canvas format - usually an alias for
                           the rgba8 format, or the srgb format if
                           gamma-correct rendering is enabled in LÖVE 0.10.0
                           and newer.
    hdr                    A format suitable for high dynamic range content -
                           an alias for the rgba16f format, normally.
    rgba8                  8 bits per channel (32 bpp) RGBA. Color channel
                           values range from 0-255 (0-1 in shaders).
    rgba4                  4 bits per channel (16 bpp) RGBA.
    rgb5a1                 RGB with 5 bits each, and a 1-bit alpha channel (16
                           bpp).
    rgb565                 RGB with 5, 6, and 5 bits each, respectively (16
                           bpp). There is no alpha channel in this format.
    rgb10a2                RGB with 10 bits per channel, and a 2-bit alpha
                           channel (32 bpp).
    rgba16f                Floating point RGBA with 16 bits per channel (64
                           bpp). Color values can range from [-65504, +65504].
    rgba32f                Floating point RGBA with 32 bits per channel (128
                           bpp).
    rg11b10f               Floating point RGB with 11 bits in the red and
                           green channels, and 10 bits in the blue channel (32
                           bpp). There is no alpha channel. Color values can
                           range from [0, +65024].
    srgb                   The same as rgba8, but the Canvas is interpreted as
                           being in the sRGB color space. Everything drawn to
                           the Canvas will be converted from linear RGB to
                           sRGB. When the Canvas is drawn (or used in a
                           shader), it will be decoded from sRGB to linear
                           RGB. This reduces color banding when doing
                           gamma-correct rendering, since sRGB encoding has
                           more precision than linear RGB for darker colors.
    r8                     Single-channel (red component) format (8 bpp).
    rg8                    Two channels (red and green components) with 8 bits
                           per channel (16 bpp).
    r16f                   Floating point single-channel format (16 bpp).
                           Color values can range from [-65504, +65504].
    rg16f                  Floating point two-channel format with 16 bits per
                           channel (32 bpp). Color values can range from
                           [-65504, +65504].
    r32f                   Floating point single-channel format (32 bpp).
    rg32f                  Floating point two-channel format with 32 bits per
                           channel (64 bpp).

------------------------------------------------------------------------------
2.5.3.7. CompareMode            *love-CompareMode* *love.graphics-CompareMode*

Different types of per-pixel stencil test comparisons. The pixels of an object
will be drawn if the comparison succeeds, for each pixel that the object
touches.

Constants:

    equal                  The stencil value of the pixel must be equal to the
                           supplied value.
    notequal               The stencil value of the pixel must not be equal to
                           the supplied value.
    less                   The stencil value of the pixel must be less than
                           the supplied value.
    lequal                 The stencil value of the pixel must be less than or
                           equal to the supplied value.
    gequal                 The stencil value of the pixel must be greater than
                           or equal to the supplied value.
    greater                The stencil value of the pixel must be greater than
                           the supplied value.

------------------------------------------------------------------------------
2.5.3.8. DrawMode                     *love-DrawMode* *love.graphics-DrawMode*

Controls whether shapes are drawn as an outline, or filled.

Constants:

    fill                   Draw filled shape.
    line                   Draw outlined shape.

------------------------------------------------------------------------------
2.5.3.9. FilterMode               *love-FilterMode* *love.graphics-FilterMode*

How the image is filtered when scaling.

Constants:

    linear                 Scale image with linear interpolation.
    nearest                Scale image with nearest neighbor interpolation.

------------------------------------------------------------------------------
2.5.3.10. GraphicsFeature                               *love-GraphicsFeature*
                                               *love.graphics-GraphicsFeature*

Graphics features that can be checked for with love.graphics.getSupported.

Constants:

    clampzero              Whether the "clampzero" WrapMode is supported.
    multicanvasformats     Whether multiple Canvases with different formats
                           can be used in the same love.graphics.setCanvas
                           call.

------------------------------------------------------------------------------
2.5.3.11. GraphicsLimit     *love-GraphicsLimit* *love.graphics-GraphicsLimit*

Types of system-dependent graphics limits checked for using
love.graphics.getSystemLimits.

Constants:

    pointsize              The maximum size of points.
    texturesize            The maximum width or height of Images and Canvases.
    multicanvas            The maximum number of simultaneously active
                           canvases (via love.graphics.setCanvas).
    canvasmsaa             The maximum number of antialiasing samples for a
                           Canvas.

------------------------------------------------------------------------------
2.5.3.12. LineJoin                    *love-LineJoin* *love.graphics-LineJoin*

Line join style.

Constants:

    miter                  Miter style.
    bevel                  Bevel style.
    none                   None style.

------------------------------------------------------------------------------
2.5.3.13. LineStyle                 *love-LineStyle* *love.graphics-LineStyle*

The styles in which lines are drawn.

Constants:

    rough                  Draw rough lines.
    smooth                 Draw smooth lines.

------------------------------------------------------------------------------
2.5.3.14. MeshDrawMode        *love-MeshDrawMode* *love.graphics-MeshDrawMode*

How a Mesh's vertices are used when drawing.

Constants:

    fan                    The vertices create a "fan" shape with the first
                           vertex acting as the hub point. Can be easily used
                           to draw simple convex polygons.
    strip                  The vertices create a series of connected triangles
                           using vertices 1, 2, 3, then 3, 2, 4 (note the
                           order), then 3, 4, 5 and so on.
    triangles              The vertices create unconnected triangles.
    points                 The vertices are drawn as unconnected points (see
                           love.graphics.setPointSize.)

------------------------------------------------------------------------------
2.5.3.15. ParticleInsertMode                         *love-ParticleInsertMode*
                                            *love.graphics-ParticleInsertMode*

How newly created particles are added to the ParticleSystem.

Constants:

    top                    Particles are inserted at the top of the
                           ParticleSystem's list of particles.
    bottom                 Particles are inserted at the bottom of the
                           ParticleSystem's list of particles.
    random                 Particles are inserted at random positions in the
                           ParticleSystem's list of particles.

------------------------------------------------------------------------------
2.5.3.16. PointStyle              *love-PointStyle* *love.graphics-PointStyle*

How points should be drawn.

Constants:

    rough                  Draw rough points.
    smooth                 Draw smooth points.

------------------------------------------------------------------------------
2.5.3.17. SpriteBatchUsage                             *love-SpriteBatchUsage*
                                              *love.graphics-SpriteBatchUsage*

Usage hints for SpriteBatches and Meshes to optimize data storage and access.

Constants:

    dynamic                The object's data will change repeatedly during its
                           lifetime.
    static                 The object will not be modified after initial
                           sprites or vertices are added.
    stream                 The object data will always change between draws.

------------------------------------------------------------------------------
2.5.3.18. StackType                 *love-StackType* *love.graphics-StackType*

Graphics state stack types used with love.graphics.push.

Constants:

    transform              The transformation stack (love.graphics.translate,
                           love.graphics.rotate, etc.)
    all                    All love.graphics state, including transform state.

------------------------------------------------------------------------------
2.5.3.19. StencilAction     *love-StencilAction* *love.graphics-StencilAction*

How a stencil function modifies the stencil values of pixels it touches.

Constants:

    replace                The stencil value of a pixel will be replaced by
                           the value specified in love.graphics.stencil, if
                           any object touches the pixel.
    increment              The stencil value of a pixel will be incremented by
                           1 for each object that touches the pixel. If the
                           stencil value reaches 255 it will stay at 255.
    decrement              The stencil value of a pixel will be decremented by
                           1 for each object that touches the pixel. If the
                           stencil value reaches 0 it will stay at 0.
    incrementwrap          The stencil value of a pixel will be incremented by
                           1 for each object that touches the pixel. If a
                           stencil value of 255 is incremented it will be set
                           to 0.
    decrementwrap          The stencil value of a pixel will be decremented by
                           1 for each object that touches the pixel. If the
                           stencil value of 0 is decremented it will be set to
                           255.
    invert                 The stencil value of a pixel will be
                           bitwise-inverted for each object that touches the
                           pixel. If a stencil value of 0 is inverted it will
                           become 255.

------------------------------------------------------------------------------
2.5.3.20. WrapMode                    *love-WrapMode* *love.graphics-WrapMode*

How the image wraps inside a Quad with a larger quad size than image size.
This also affects how Meshes with texture coordinates which are outside the
range of [0, 1] are drawn, and the color returned by the Texel Shader function
when using it to sample from texture coordinates outside of the range of [0,
1].

Constants:

    clamp                  How the image wraps inside a Quad with a larger
                           quad size than image size. This also affects how
                           Meshes with texture coordinates which are outside
                           the range of [0, 1] are drawn, and the color
                           returned by the Texel Shader function when using it
                           to sample from texture coordinates outside of the
                           range of [0, 1].
    repeat                 Repeat the image. Fills the whole available extent.
    mirroredrepeat         Repeat the texture, flipping it each time it
                           repeats. May produce better visual results than the
                           repeat mode when the texture doesn't seamlessly
                           tile.
    clampzero              Clamp the texture. Fills the area outside the
                           texture's normal range with transparent black (or
                           opaque black for textures with no alpha channel.)

------------------------------------------------------------------------------
2.6. image                                                        *love.image*

Provides an interface to decode encoded image data.

- Types: 
    - CompressedImageData                           |love-CompressedImageData|
    - ImageData                                               |love-ImageData|
- Enums: 
    - CompressedImageFormat                       |love-CompressedImageFormat|
    - ImageFormat                                           |love-ImageFormat|

------------------------------------------------------------------------------
2.6.1. functions                                        *love.image-functions*

The functions of image.

------------------------------------------------------------------------------
2.6.1.1. isCompressed                                *love.image.isCompressed*

Determines whether a file can be loaded as CompressedImageData.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filename of the potentially compressed
              image file.
        - `Returns`:
            - compressed: <boolean> Whether the file can be loaded as
              CompressedImageData or not.
    2:
        - `Arguments`:
            - fileData: <FileData> A FileData potentially containing a
              compressed image.
        - `Returns`:
            - compressed: <boolean> Whether the FileData can be loaded as
              CompressedImageData or not.

------------------------------------------------------------------------------
2.6.1.2. newCompressedData                      *love.image.newCompressedData*

Create a new CompressedImageData object from a compressed image file. LÖVE
supports several compressed texture formats, enumerated in the
CompressedImageFormat page.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filename of the compressed image file.
        - `Returns`:
            - compressedImageData: <CompressedImageData> The new
              CompressedImageData object.
    2:
        - `Arguments`:
            - fileData: <FileData> A FileData containing a compressed image.
        - `Returns`:
            - compressedImageData: <CompressedImageData> The new
              CompressedImageData object.

------------------------------------------------------------------------------
2.6.1.3. newImageData                                *love.image.newImageData*

Create a new ImageData object.

Variants:
    1:
        - `Arguments`:
            - width: <number> The width of the ImageData.
            - height: <number> The height of the ImageData.
        - `Returns`:
            - imageData: <ImageData> The new blank ImageData object. Each
              pixel's color values, (including the alpha values!) will be set
              to zero.
    2:
        - `Arguments`:
            - width: <number> The width of the ImageData.
            - height: <number> The height of the ImageData.
            - data: <string> The data to load into the ImageData.
        - `Returns`:
            - imageData: <ImageData> The new ImageData object.
    3:
        - `Arguments`:
            - filename: <string> The filename of the image file.
        - `Returns`:
            - imageData: <ImageData> The new ImageData object.
    4:
        - `Arguments`:
            - filedata: <FileData> The encoded file data to decode into image
              data.
        - `Returns`:
            - imageData: <ImageData> The new ImageData object.

------------------------------------------------------------------------------
2.6.2. types                                                *love.image-types*

The types of image:

    - CompressedImageData                           |love.CompressedImageData|
    - ImageData                                               |love.ImageData|

------------------------------------------------------------------------------
2.6.2.1. CompressedImageData                        *love-CompressedImageData*
                                              *love.image-CompressedImageData*

Represents compressed image data designed to stay compressed in RAM.

CompressedImageData encompasses standard compressed texture formats such as
DXT1, DXT5, and BC5 / 3Dc.

You can't draw CompressedImageData directly to the screen. See Image for that.

Constructors: 
    - newCompressedData                         |love.image.newCompressedData|

Supertypes: 
    - Data                                                         |love-Data|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getDimensions                        |CompressedImageData:getDimensions|
    - getFormat                                |CompressedImageData:getFormat|
    - getHeight                                |CompressedImageData:getHeight|
    - getMipmapCount                      |CompressedImageData:getMipmapCount|
    - getWidth                                  |CompressedImageData:getWidth|
    - getPointer                                             |Data:getPointer|
    - getSize                                                   |Data:getSize|
    - getString                                               |Data:getString|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.6.2.1.1. getDimensions                   *CompressedImageData:getDimensions*

Gets the width and height of the CompressedImageData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the CompressedImageData.
            - height: <number> The height of the CompressedImageData.
    2:
        - `Arguments`:
            - level: <number> A mipmap level. Must be in the range of [1,
              CompressedImageData:getMipmapCount()].
        - `Returns`:
            - width: <number> The width of the CompressedImageData.
            - height: <number> The height of the CompressedImageData.

------------------------------------------------------------------------------
2.6.2.1.2. getFormat                           *CompressedImageData:getFormat*

Gets the format of the CompressedImageData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - format: <CompressedImageFormat> The format of the
              CompressedImageData.

------------------------------------------------------------------------------
2.6.2.1.3. getHeight                           *CompressedImageData:getHeight*

Gets the height of the CompressedImageData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The height of the CompressedImageData.
    2:
        - `Arguments`:
            - level: <number> A mipmap level. Must be in the range of [1,
              CompressedImageData:getMipmapCount()].
        - `Returns`:
            - height: <number> The height of the CompressedImageData.

------------------------------------------------------------------------------
2.6.2.1.4. getMipmapCount                 *CompressedImageData:getMipmapCount*

Gets the number of mipmap levels in the CompressedImageData. The base mipmap
level (original image) is included in the count.

Variants:
    1:
        - `Arguments`:
            - mipmaps: <number> The number of mipmap levels stored in the
              CompressedImageData.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.6.2.1.5. getWidth                             *CompressedImageData:getWidth*

Gets the width of the CompressedImageData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the CompressedImageData.
    2:
        - `Arguments`:
            - level: <number> A mipmap level. Must be in the range of [1,
              CompressedImageData:getMipmapCount()].
        - `Returns`:
            - width: <number> The width of the CompressedImageData.

------------------------------------------------------------------------------
2.6.2.2. ImageData                     *love-ImageData* *love.image-ImageData*

Raw (decoded) image data.

You can't draw ImageData directly to screen. See Image for that.

Constructors: 
    - newImageData                                   |love.image.newImageData|

Supertypes: 
    - Data                                                         |love-Data|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - encode                                                |ImageData:encode|
    - getDimensions                                  |ImageData:getDimensions|
    - getHeight                                          |ImageData:getHeight|
    - getPixel                                            |ImageData:getPixel|
    - getWidth                                            |ImageData:getWidth|
    - mapPixel                                            |ImageData:mapPixel|
    - paste                                                  |ImageData:paste|
    - setPixel                                            |ImageData:setPixel|
    - getPointer                                             |Data:getPointer|
    - getSize                                                   |Data:getSize|
    - getString                                               |Data:getString|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.6.2.2.1. encode                                           *ImageData:encode*

Encodes the ImageData and optionally writes it to the save directory.

Variants:
    1:
        - `Arguments`:
            - format: <ImageFormat> The format to encode the image as.
            - filename: <string> The filename to write the file to. If nil, no
              file will be written but the FileData will still be returned.
        - `Returns`:
            - filedata: <FileData> The encoded image as a new FileData object.

------------------------------------------------------------------------------
2.6.2.2.2. getDimensions                             *ImageData:getDimensions*

Gets the width and height of the ImageData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the ImageData.
            - height: <number> The height of the ImageData.

------------------------------------------------------------------------------
2.6.2.2.3. getHeight                                     *ImageData:getHeight*

Gets the height of the ImageData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - height: <number> The height of the ImageData.

------------------------------------------------------------------------------
2.6.2.2.4. getPixel                                       *ImageData:getPixel*

Gets the pixel at the specified position.

Valid x and y values start at 0 and go up to image width and height minus 1.

Variants:
    1:
        - `Arguments`:
            - x: <number> The position of the pixel on the x-axis.
            - y: <number> The position of the pixel on the y-axis.
        - `Returns`:
            - r: <number> The red component (0-255).
            - g: <number> The green component (0-255).
            - b: <number> The blue component (0-255).
            - a: <number> The alpha component (0-255).

------------------------------------------------------------------------------
2.6.2.2.5. getWidth                                       *ImageData:getWidth*

Gets the width of the ImageData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> The width of the ImageData.

------------------------------------------------------------------------------
2.6.2.2.6. mapPixel                                       *ImageData:mapPixel*

Transform an image by applying a function to every pixel.

This function is a higher order function. It takes another function as a
parameter, and calls it once for each pixel in the ImageData.

The function parameter is called with six parameters for each pixel in turn.
The parameters are numbers that represent the x and y coordinates of the pixel
and its red, green, blue and alpha values. The function parameter can return
up to four number values, which become the new r, g, b and a values of the
pixel. If the function returns fewer values, the remaining components are set
to 0.

Variants:
    1:
        - `Arguments`:
            - pixelFunction: <function> Function parameter to apply to every
              pixel.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.6.2.2.7. paste                                             *ImageData:paste*

Paste into ImageData from another source ImageData.

Variants:
    1:
        - `Arguments`:
            - source: <ImageData> Source ImageData from which to copy.
            - dx: <number> Destination top-left position on x-axis.
            - dy: <number> Destination top-left position on y-axis.
            - sx: <number> Source top-left position on x-axis.
            - sy: <number> Source top-left position on y-axis.
            - sw: <number> Source width.
            - sh: <number> Source height.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.6.2.2.8. setPixel                                       *ImageData:setPixel*

Sets the color of a pixel.

Valid x and y values start at 0 and go up to image width and height minus 1.

Variants:
    1:
        - `Arguments`:
            - x: <number> The position of the pixel on the x-axis.
            - y: <number> The position of the pixel on the y-axis.
            - r: <number> The red component (0-255).
            - g: <number> The green component (0-255).
            - b: <number> The blue component (0-255).
            - a: <number> The alpha component (0-255).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.6.3. enums                                                *love.image-enums*

Enums within love.image:
    CompressedImageFormat                         |love.CompressedImageFormat|
    ImageFormat                                             |love.ImageFormat|

------------------------------------------------------------------------------
2.6.3.1. CompressedImageFormat                    *love-CompressedImageFormat*
                                            *love.image-CompressedImageFormat*

Compressed image data formats. Here and here are a couple overviews of many of
the formats.

Unlike traditional PNG or jpeg, these formats stay compressed in RAM and in
the graphics card's VRAM. This is good for saving memory space as well as
improving performance, since the graphics card will be able to keep more of
the image's pixels in its fast-access cache when drawing it.

Constants:

    DXT1                   The DXT1 format. RGB data at 4 bits per pixel
                           (compared to 32 bits for ImageData and regular
                           Images.) Suitable for fully opaque images. Suitable
                           for fully opaque images on desktop systems.
    DXT3                   The DXT3 format. RGBA data at 8 bits per pixel.
                           Smooth variations in opacity do not mix well with
                           this format.
    DXT5                   The DXT5 format. RGBA data at 8 bits per pixel.
                           Recommended for images with varying opacity on
                           desktop systems.
    BC4                    The BC4 format (also known as 3Dc+ or ATI1.) Stores
                           just the red channel, at 4 bits per pixel.
    BC4s                   The signed variant of the BC4 format. Same as above
                           but the pixel values in the texture are in the
                           range of [-1, 1] instead of [0, 1] in shaders.
    BC5                    The BC5 format (also known as 3Dc or ATI2.) Stores
                           red and green channels at 8 bits per pixel.
    BC5s                   The signed variant of the BC5 format.
    BC6h                   The BC6H format. Stores half-precision
                           floating-point RGB data in the range of [0, 65504]
                           at 8 bits per pixel. Suitable for HDR images on
                           desktop systems.
    BC6hs                  The signed variant of the BC6H format. Stores RGB
                           data in the range of [-65504, +65504].
    BC7                    The BC7 format (also known as BPTC.) Stores RGB or
                           RGBA data at 8 bits per pixel.
    ETC1                   The ETC1 format. RGB data at 4 bits per pixel.
                           Suitable for fully opaque images on older Android
                           devices.
    ETC2rgb                The RGB variant of the ETC2 format. RGB data at 4
                           bits per pixel. Suitable for fully opaque images on
                           newer mobile devices.
    ETC2rgba               The RGBA variant of the ETC2 format. RGBA data at 8
                           bits per pixel. Recommended for images with varying
                           opacity on newer mobile devices.
    ETC2rgba1              The RGBA variant of the ETC2 format where pixels
                           are either fully transparent or fully opaque. RGBA
                           data at 4 bits per pixel.
    EACr                   The single-channel variant of the EAC format.
                           Stores just the red channel, at 4 bits per pixel.
    EACrs                  The signed single-channel variant of the EAC
                           format. Same as above but pixel values in the
                           texture are in the range of [-1, 1] instead of [0,
                           1] in shaders.
    EACrg                  The two-channel variant of the EAC format. Stores
                           red and green channels at 8 bits per pixel.
    EACrgs                 The signed two-channel variant of the EAC format.
    PVR1rgb2               The 2 bit per pixel RGB variant of the PVRTC1
                           format. Stores RGB data at 2 bits per pixel.
                           Textures compressed with PVRTC1 formats must be
                           square and power-of-two sized.
    PVR1rgb4               The 4 bit per pixel RGB variant of the PVRTC1
                           format. Stores RGB data at 4 bits per pixel.
    PVR1rgba2              The 2 bit per pixel RGBA variant of the PVRTC1
                           format.
    PVR1rgba4              The 4 bit per pixel RGBA variant of the PVRTC1
                           format.
    ASTC4x4                The 4x4 pixels per block variant of the ASTC
                           format. RGBA data at 8 bits per pixel.
    ASTC5x4                The 5x4 pixels per block variant of the ASTC
                           format. RGBA data at 6.4 bits per pixel.
    ASTC5x5                The 5x5 pixels per block variant of the ASTC
                           format. RGBA data at 5.12 bits per pixel.
    ASTC6x5                The 6x5 pixels per block variant of the ASTC
                           format. RGBA data at 4.27 bits per pixel.
    ASTC6x6                The 6x6 pixels per block variant of the ASTC
                           format. RGBA data at 3.56 bits per pixel.
    ASTC8x5                The 8x5 pixels per block variant of the ASTC
                           format. RGBA data at 3.2 bits per pixel.
    ASTC8x6                The 8x6 pixels per block variant of the ASTC
                           format. RGBA data at 2.67 bits per pixel.
    ASTC8x8                The 8x8 pixels per block variant of the ASTC
                           format. RGBA data at 2 bits per pixel.
    ASTC10x5               The 10x5 pixels per block variant of the ASTC
                           format. RGBA data at 2.56 bits per pixel.
    ASTC10x6               The 10x6 pixels per block variant of the ASTC
                           format. RGBA data at 2.13 bits per pixel.
    ASTC10x8               The 10x8 pixels per block variant of the ASTC
                           format. RGBA data at 1.6 bits per pixel.
    ASTC10x10              The 10x10 pixels per block variant of the ASTC
                           format. RGBA data at 1.28 bits per pixel.
    ASTC12x10              The 12x10 pixels per block variant of the ASTC
                           format. RGBA data at 1.07 bits per pixel.
    ASTC12x12              The 12x12 pixels per block variant of the ASTC
                           format. RGBA data at 0.89 bits per pixel.

------------------------------------------------------------------------------
2.6.3.2. ImageFormat               *love-ImageFormat* *love.image-ImageFormat*

Encoded image formats.

Constants:

    tga                    Targa image format.
    png                    PNG image format.

------------------------------------------------------------------------------
2.7. joystick                                                  *love.joystick*

Provides an interface to the user's joystick.

- Types: 
    - Joystick                                                 |love-Joystick|
- Enums: 
    - GamepadAxis                                           |love-GamepadAxis|
    - GamepadButton                                       |love-GamepadButton|
    - JoystickHat                                           |love-JoystickHat|
    - JoystickInputType                               |love-JoystickInputType|

------------------------------------------------------------------------------
2.7.1. functions                                     *love.joystick-functions*

The functions of joystick.

------------------------------------------------------------------------------
2.7.1.1. getJoystickCount                     *love.joystick.getJoystickCount*

Gets the number of connected joysticks.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - joystickcount: <number> The number of connected joysticks.

------------------------------------------------------------------------------
2.7.1.2. getJoysticks                             *love.joystick.getJoysticks*

Gets a list of connected Joysticks.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - joysticks: <table> The list of currently connected Joysticks.

------------------------------------------------------------------------------
2.7.1.3. loadGamepadMappings               *love.joystick.loadGamepadMappings*

Loads a gamepad mappings string or file created with
love.joystick.saveGamepadMappings.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filename to load the mappings string
              from.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - mappings: <string> The mappings string to load.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.7.1.4. saveGamepadMappings               *love.joystick.saveGamepadMappings*

Saves the virtual gamepad mappings of all Joysticks that are recognized as
gamepads and have either been recently used or their gamepad bindings have
been modified.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filename to save the mappings string to.
        - `Returns`:
            - mappings: <string> The mappings string that was written to the
              file.
    2:
        - `Arguments`: None
        - `Returns`:
            - mappings: <string> The mappings string.

------------------------------------------------------------------------------
2.7.1.5. setGamepadMapping                   *love.joystick.setGamepadMapping*

Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a
certain type. For example, if this function is used with a GUID returned by a
Dualshock 3 controller in OS X, the binding will affect
Joystick:getGamepadAxis and Joystick:isGamepadDown for all Dualshock 3
controllers used with the game when run in OS X.

LÖVE includes built-in gamepad bindings for many common controllers. This
function lets you change the bindings or add new ones for types of Joysticks
which aren't recognized as gamepads by default.

The virtual gamepad buttons and axes are designed around the Xbox 360
controller layout.

Variants:
    1:
        - `Arguments`:
            - guid: <string> The OS-dependent GUID for the type of Joystick
              the binding will affect.
            - button: <GamepadButton> The virtual gamepad button to bind.
            - inputtype: <JoystickInputType> The type of input to bind the
              virtual gamepad button to.
            - inputindex: <number> The index of the axis, button, or hat to
              bind the virtual gamepad button to.
            - hatdirection: <JoystickHat> The direction of the hat, if the
              virtual gamepad button will be bound to a hat. nil otherwise.
        - `Returns`:
            - success: <boolean> Whether the virtual gamepad button was
              successfully bound.
    2:
        - `Arguments`:
            - guid: <string> The OS-dependent GUID for the type of Joystick
              the binding will affect.
            - button: <GamepadButton> The virtual gamepad axis to bind.
            - inputtype: <JoystickInputType> The type of input to bind the
              virtual gamepad axis to.
            - inputindex: <number> The index of the axis, button, or hat to
              bind the virtual gamepad axis to.
            - hatdirection: <JoystickHat> The direction of the hat, if the
              virtual gamepad axis will be bound to a hat. nil otherwise.
        - `Returns`:
            - success: <boolean> Whether the virtual gamepad button was
              successfully bound.

------------------------------------------------------------------------------
2.7.2. types                                             *love.joystick-types*

The types of joystick:

    - Joystick                                                 |love.Joystick|

------------------------------------------------------------------------------
2.7.2.1. Joystick                     *love-Joystick* *love.joystick-Joystick*

Represents a physical joystick.

Constructors: 
    - getJoysticks                                |love.joystick.getJoysticks|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getAxes                                               |Joystick:getAxes|
    - getAxis                                               |Joystick:getAxis|
    - getAxisCount                                     |Joystick:getAxisCount|
    - getButtonCount                                 |Joystick:getButtonCount|
    - getGUID                                               |Joystick:getGUID|
    - getGamepadAxis                                 |Joystick:getGamepadAxis|
    - getGamepadMapping                           |Joystick:getGamepadMapping|
    - getHat                                                 |Joystick:getHat|
    - getHatCount                                       |Joystick:getHatCount|
    - getID                                                   |Joystick:getID|
    - getName                                               |Joystick:getName|
    - getVibration                                     |Joystick:getVibration|
    - isConnected                                       |Joystick:isConnected|
    - isDown                                                 |Joystick:isDown|
    - isGamepad                                           |Joystick:isGamepad|
    - isGamepadDown                                   |Joystick:isGamepadDown|
    - isVibrationSupported                     |Joystick:isVibrationSupported|
    - setVibration                                     |Joystick:setVibration|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.7.2.1.1. getAxes                                          *Joystick:getAxes*

Gets the direction of each axis.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - axisDir1: <number> Direction of axis1.
            - axisDir2: <number> Direction of axis2.
            - axisDirN: <number> Direction of axisN.

------------------------------------------------------------------------------
2.7.2.1.2. getAxis                                          *Joystick:getAxis*

Gets the direction of an axis.

Variants:
    1:
        - `Arguments`:
            - axis: <number> The index of the axis to be checked.
        - `Returns`:
            - direction: <number> Current value of the axis.

------------------------------------------------------------------------------
2.7.2.1.3. getAxisCount                                *Joystick:getAxisCount*

Gets the number of axes on the joystick.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - axes: <number> The number of axes available.

------------------------------------------------------------------------------
2.7.2.1.4. getButtonCount                            *Joystick:getButtonCount*

Gets the number of buttons on the joystick.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - buttons: <number> The number of buttons available.

------------------------------------------------------------------------------
2.7.2.1.5. getGUID                                          *Joystick:getGUID*

Gets a stable GUID unique to the type of the physical joystick which does not
change over time. For example, all Sony Dualshock 3 controllers in OS X have
the same GUID. The value is platform-dependent.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - guid: <string> The Joystick type's OS-dependent unique
              identifier.

------------------------------------------------------------------------------
2.7.2.1.6. getGamepadAxis                            *Joystick:getGamepadAxis*

Gets the direction of a virtual gamepad axis. If the Joystick isn't recognized
as a gamepad or isn't connected, this function will always return 0.

Variants:
    1:
        - `Arguments`:
            - axis: <GamepadAxis> The virtual axis to be checked.
        - `Returns`:
            - direction: <number> Current value of the axis.

------------------------------------------------------------------------------
2.7.2.1.7. getGamepadMapping                      *Joystick:getGamepadMapping*

Gets the button, axis or hat that a virtual gamepad input is bound to.

Variants:
    1:
        - `Arguments`:
            - axis: <GamepadAxis> The virtual gamepad axis to get the binding
              for.
        - `Returns`:
            - inputtype: <JoystickInputType> The type of input the virtual
              gamepad axis is bound to.
            - inputindex: <number> The index of the Joystick's button, axis or
              hat that the virtual gamepad axis is bound to.
            - hatdirection: <JoystickHat> The direction of the hat, if the
              virtual gamepad axis is bound to a hat. nil otherwise.
    2:
        - `Arguments`:
            - button: <GamepadAxis> The virtual gamepad button to get the
              binding for.
        - `Returns`:
            - inputtype: <JoystickInputType> The type of input the virtual
              gamepad button is bound to.
            - inputindex: <number> The index of the Joystick's button, axis or
              hat that the virtual gamepad button is bound to.
            - hatdirection: <JoystickHat> The direction of the hat, if the
              virtual gamepad button is bound to a hat. nil otherwise.

------------------------------------------------------------------------------
2.7.2.1.8. getHat                                            *Joystick:getHat*

Gets the direction of a hat.

Variants:
    1:
        - `Arguments`:
            - hat: <number> The index of the hat to be checked.
        - `Returns`:
            - direction: <JoystickHat> The direction the hat is pushed.

------------------------------------------------------------------------------
2.7.2.1.9. getHatCount                                  *Joystick:getHatCount*

Gets the number of hats on the joystick.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - hats: <number> How many hats the joystick has.

------------------------------------------------------------------------------
2.7.2.1.10. getID                                             *Joystick:getID*

Gets the joystick's unique identifier. The identifier will remain the same for
the life of the game, even when the Joystick is disconnected and reconnected,
but it will change when the game is re-launched.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - id: <number> The Joystick's unique identifier. Remains the same
              as long as the game is running.
            - instanceid: <number> Unique instance identifier. Changes every
              time the Joystick is reconnected. nil if the Joystick is not
              connected.

------------------------------------------------------------------------------
2.7.2.1.11. getName                                         *Joystick:getName*

Gets the name of the joystick.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - name: <string> The name of the joystick.

------------------------------------------------------------------------------
2.7.2.1.12. getVibration                               *Joystick:getVibration*

Gets the current vibration motor strengths on a Joystick with rumble support.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - left: <number> Current strength of the left vibration motor on
              the Joystick.
            - right: <number> Current strength of the right vibration motor on
              the Joystick.

------------------------------------------------------------------------------
2.7.2.1.13. isConnected                                 *Joystick:isConnected*

Gets whether the Joystick is connected.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - connected: <boolean> True if the Joystick is currently
              connected, false otherwise.

------------------------------------------------------------------------------
2.7.2.1.14. isDown                                           *Joystick:isDown*

Checks if a button on the Joystick is pressed.

LÖVE 0.9.0 had a bug which required the button indices passed to
Joystick:isDown to be 0-based instead of 1-based, for example button 1 would
be 0 for this function. It was fixed in 0.9.1.

Variants:
    1:
        - `Arguments`:
            - ...: <number> The index of a button to check.
        - `Returns`:
            - anyDown: <boolean> True if any supplied button is down, false if
              not.

------------------------------------------------------------------------------
2.7.2.1.15. isGamepad                                     *Joystick:isGamepad*

Gets whether the Joystick is recognized as a gamepad. If this is the case, the
Joystick's buttons and axes can be used in a standardized manner across
different operating systems and joystick models via Joystick:getGamepadAxis
and related functions.

LÖVE automatically recognizes most popular controllers with a similar layout
to the Xbox 360 controller as gamepads, but you can add more with
love.joystick.setGamepadMapping.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - isgamepad: <boolean> True if the Joystick is recognized as a
              gamepad, false otherwise.

------------------------------------------------------------------------------
2.7.2.1.16. isGamepadDown                             *Joystick:isGamepadDown*

Checks if a virtual gamepad button on the Joystick is pressed. If the Joystick
is not recognized as a Gamepad or isn't connected, then this function will
always return false.

Variants:
    1:
        - `Arguments`:
            - ...: <GamepadButton> The gamepad button to check.
        - `Returns`:
            - anyDown: <boolean> True if any supplied button is down, false if
              not.

------------------------------------------------------------------------------
2.7.2.1.17. isVibrationSupported               *Joystick:isVibrationSupported*

Gets whether the Joystick supports vibration.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - supported: <boolean> True if rumble / force feedback vibration
              is supported on this Joystick, false if not.

------------------------------------------------------------------------------
2.7.2.1.18. setVibration                               *Joystick:setVibration*

Sets the vibration motor speeds on a Joystick with rumble support.

Variants:
    1:
        - `Arguments`:
            - left: <number> Strength of the left vibration motor on the
              Joystick. Must be in the range of [0, 1].
            - right: <number> Strength of the right vibration motor on the
              Joystick. Must be in the range of [0, 1].
        - `Returns`:
            - success: <boolean> True if the vibration was successfully
              applied, false if not.
    2:
        - `Arguments`: None
        - `Returns`:
            - success: <boolean> True if the vibration was successfully
              disabled, false if not.
    3:
        - `Arguments`:
            - left: <number> Strength of the left vibration motor on the
              Joystick. Must be in the range of [0, 1].
            - right: <number> Strength of the right vibration motor on the
              Joystick. Must be in the range of [0, 1].
            - duration: <number> The duration of the vibration in seconds. A
              negative value means infinite duration.
        - `Returns`:
            - success: <boolean> True if the vibration was successfully
              applied, false if not.

------------------------------------------------------------------------------
2.7.3. enums                                             *love.joystick-enums*

Enums within love.joystick:
    GamepadAxis                                             |love.GamepadAxis|
    GamepadButton                                         |love.GamepadButton|
    JoystickHat                                             |love.JoystickHat|
    JoystickInputType                                 |love.JoystickInputType|

------------------------------------------------------------------------------
2.7.3.1. GamepadAxis            *love-GamepadAxis* *love.joystick-GamepadAxis*

Virtual gamepad axes.

Constants:

    leftx                  The x-axis of the left thumbstick.
    lefty                  The y-axis of the left thumbstick.
    rightx                 The x-axis of the right thumbstick.
    righty                 The y-axis of the right thumbstick.
    triggerleft            Left analog trigger.
    triggerright           Right analog trigger.

------------------------------------------------------------------------------
2.7.3.2. GamepadButton      *love-GamepadButton* *love.joystick-GamepadButton*

Virtual gamepad buttons.

Constants:

    a                      Bottom face button (A).
    b                      Right face button (B).
    x                      Left face button (X).
    y                      Top face button (Y).
    back                   Back button.
    guide                  Guide button.
    start                  Start button.
    leftstick              Left stick click button.
    rightstick             Right stick click button.
    leftshoulder           Left bumper.
    rightshoulder          Right bumper.
    dpup                   D-pad up.
    dpdown                 D-pad down.
    dpleft                 D-pad left.
    dpright                D-pad right.

------------------------------------------------------------------------------
2.7.3.3. JoystickHat            *love-JoystickHat* *love.joystick-JoystickHat*

Joystick hat positions.

Constants:

    c                      
    d                      
    l                      
    ld                     
    lu                     
    r                      
    rd                     
    ru                     
    u                      

------------------------------------------------------------------------------
2.7.3.4. JoystickInputType                            *love-JoystickInputType*
                                             *love.joystick-JoystickInputType*

Types of Joystick inputs.

Constants:

    axis                   Analog axis.
    button                 
    hat                    8-direction hat value.

------------------------------------------------------------------------------
2.8. keyboard                                                  *love.keyboard*

Provides an interface to the user's keyboard.

- Types: None
- Enums: 
    - KeyConstant                                           |love-KeyConstant|
    - Scancode                                                 |love-Scancode|

------------------------------------------------------------------------------
2.8.1. functions                                     *love.keyboard-functions*

The functions of keyboard.

------------------------------------------------------------------------------
2.8.1.1. getKeyFromScancode                 *love.keyboard.getKeyFromScancode*

Gets the key corresponding to the given hardware scancode.

Unlike key constants, Scancodes are keyboard layout-independent. For example
the scancode "w" will be generated if the key in the same place as the "w" key
on an American keyboard is pressed, no matter what the key is labelled or what
the user's operating system settings are.

Scancodes are useful for creating default controls that have the same physical
locations on on all systems.

Variants:
    1:
        - `Arguments`:
            - scancode: <Scancode> The scancode to get the key from.
        - `Returns`:
            - key: <KeyConstant> The key corresponding to the given scancode,
              or "unknown" if the scancode doesn't map to a KeyConstant on the
              current system.

------------------------------------------------------------------------------
2.8.1.2. getScancodeFromKey                 *love.keyboard.getScancodeFromKey*

Gets the hardware scancode corresponding to the given key.

Unlike key constants, Scancodes are keyboard layout-independent. For example
the scancode "w" will be generated if the key in the same place as the "w" key
on an American keyboard is pressed, no matter what the key is labelled or what
the user's operating system settings are.

Scancodes are useful for creating default controls that have the same physical
locations on on all systems.

Variants:
    1:
        - `Arguments`:
            - key: <KeyConstant> The key to get the scancode from.
        - `Returns`:
            - scancode: <Scancode> The scancode corresponding to the given
              key, or "unknown" if the given key has no known physical
              representation on the current system.

------------------------------------------------------------------------------
2.8.1.3. hasKeyRepeat                             *love.keyboard.hasKeyRepeat*

Gets whether key repeat is enabled.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> Whether key repeat is enabled.

------------------------------------------------------------------------------
2.8.1.4. hasTextInput                             *love.keyboard.hasTextInput*

Gets whether text input events are enabled.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> Whether text input events are enabled.

------------------------------------------------------------------------------
2.8.1.5. isDown                                         *love.keyboard.isDown*

Checks whether a certain key is down. Not to be confused with love.keypressed
or love.keyreleased.

Variants:
    1:
        - `Arguments`:
            - key: <KeyConstant> The key to check.
        - `Returns`:
            - down: <boolean> True if the key is down, false if not.
    2:
        - `Arguments`:
            - key: <KeyConstant> A key to check.
            - ...: <KeyConstant> Additional keys to check.
        - `Returns`:
            - anyDown: <boolean> True if any supplied key is down, false if
              not.

------------------------------------------------------------------------------
2.8.1.6. isScancodeDown                         *love.keyboard.isScancodeDown*

Checks whether the specified Scancodes are pressed. Not to be confused with
love.keypressed or love.keyreleased.

Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The
scancode "w" is used if the key in the same place as the "w" key on an
American keyboard is pressed, no matter what the key is labelled or what the
user's operating system settings are.

Variants:
    1:
        - `Arguments`:
            - scancode: <Scancode> A Scancode to check.
            - ...: <Scancode> Additional Scancodes to check.
        - `Returns`:
            - down: <boolean> True if any supplied Scancode is down, false if
              not.

------------------------------------------------------------------------------
2.8.1.7. setKeyRepeat                             *love.keyboard.setKeyRepeat*

Enables or disables key repeat. It is disabled by default.

The interval between repeats depends on the user's system settings.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> Whether repeat keypress events should be
              enabled when a key is held down.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.8.1.8. setTextInput                             *love.keyboard.setTextInput*

Enables or disables text input events. It is enabled by default on Windows,
Mac, and Linux, and disabled by default on iOS and Android.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> Whether text input events should be enabled.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.8.2. enums                                             *love.keyboard-enums*

Enums within love.keyboard:
    KeyConstant                                             |love.KeyConstant|
    Scancode                                                   |love.Scancode|

------------------------------------------------------------------------------
2.8.2.1. KeyConstant            *love-KeyConstant* *love.keyboard-KeyConstant*

All the keys you can press. Note that some keys may not be available on your
keyboard or system.

Constants:

    a                      The A key
    b                      The B key
    c                      The C key
    d                      The D key
    e                      The E key
    f                      The F key
    g                      The G key
    h                      The H key
    i                      The I key
    j                      The J key
    k                      The K key
    l                      The L key
    m                      The M key
    n                      The N key
    o                      The O key
    p                      The P key
    q                      The Q key
    r                      The R key
    s                      The S key
    t                      The T key
    u                      The U key
    v                      The V key
    w                      The W key
    x                      The X key
    y                      The Y key
    z                      The Z key
    0                      The zero key
    1                      The one key
    2                      The two key
    3                      The three key
    4                      The four key
    5                      The five key
    6                      The six key
    7                      The seven key
    8                      The eight key
    9                      The nine key
    space                  Space key
    !                      Exclamation mark key
    "                      Double quote key
    #                      Hash key
    $                      Dollar key
    &                      Ampersand key
    '                      Single quote key
    (                      Left parenthesis key
    )                      Right parenthesis key
    *                      Asterisk key
    +                      Plus key
    ,                      Comma key
    -                      Hyphen-minus key
    .                      Full stop key
    /                      Slash key
    :                      Colon key
    ;                      Semicolon key
    <                      Less-than key
    =                      Equal key
    >                      Greater-than key
    ?                      Question mark key
    @                      At sign key
    ?                      Question mark key
    [                      Left square bracket key
    \                      Backslash key
    ]                      Right square bracket key
    ^                      Caret key
    _                      Underscore key
    `                      Grave accent key
    kp0                    The numpad zero key
    kp1                    The numpad one key
    kp2                    The numpad two key
    kp3                    The numpad three key
    kp4                    The numpad four key
    kp5                    The numpad five key
    kp6                    The numpad six key
    kp7                    The numpad seven key
    kp8                    The numpad eight key
    kp9                    The numpad nine key
    kp.                    The numpad decimal point key
    kp/                    The numpad division key
    kp*                    The numpad multiplication key
    kp-                    The numpad substraction key
    kp+                    The numpad addition key
    kpenter                The numpad enter key
    kp=                    The numpad equals key
    up                     Up cursor key
    down                   Down cursor key
    right                  Right cursor key
    left                   Left cursor key
    home                   Home key
    end                    End key
    pageup                 Page up key
    pagedown               Page down key
    insert                 Insert key
    backspace              Backspace key
    tab                    Tab key
    clear                  Clear key
    return                 Return key
    delete                 Delete key
    f1                     The 1st function key
    f2                     The 2nd function key
    f3                     The 3rd function key
    f4                     The 4th function key
    f5                     The 5th function key
    f6                     The 6th function key
    f7                     The 7th function key
    f8                     The 8th function key
    f9                     The 9th function key
    f10                    The 10th function key
    f11                    The 11th function key
    f12                    The 12th function key
    f13                    The 13th function key
    f14                    The 14th function key
    f15                    The 15th function key
    numlock                Num-lock key
    capslock               Caps-lock key
    scrollock              Scroll-lock key
    rshift                 Right shift key
    lshift                 Left shift key
    rctrl                  Right control key
    lctrl                  Left control key
    ralt                   Right alt key
    lalt                   Left alt key
    rmeta                  Right meta key
    lmeta                  Left meta key
    lsuper                 Left super key
    rsuper                 Right super key
    mode                   Mode key
    compose                Compose key
    pause                  Pause key
    escape                 Escape key
    help                   Help key
    print                  Print key
    sysreq                 System request key
    break                  Break key
    menu                   Menu key
    power                  Power key
    euro                   Euro (&euro;) key
    undo                   Undo key
    www                    WWW key
    mail                   Mail key
    calculator             Calculator key
    appsearch              Application search key
    apphome                Application home key
    appback                Application back key
    appforward             Application forward key
    apprefresh             Application refresh key
    appbookmarks           Application bookmarks key

------------------------------------------------------------------------------
2.8.2.2. Scancode                     *love-Scancode* *love.keyboard-Scancode*

Keyboard scancodes.

Scancodes are keyboard layout-independent, so the scancode "w" will be
generated if the key in the same place as the "w" key on an American QWERTY
keyboard is pressed, no matter what the key is labelled or what the user's
operating system settings are.

Using scancodes, rather than keycodes, is useful because keyboards with
layouts differing from the US/UK layout(s) might have keys that generate
'unknown' keycodes, but the scancodes will still be detected. This however
would necessitate having a list for each keyboard layout one would choose to
support.

One could use textinput or textedited instead, but those only give back the
end result of keys used, i.e. you can't get modifiers on their own from it,
only the final symbols that were generated.

Constants:

    a                      The 'A' key on an American layout.
    b                      The 'B' key on an American layout.
    c                      The 'C' key on an American layout.
    d                      The 'D' key on an American layout.
    e                      The 'E' key on an American layout.
    f                      The 'F' key on an American layout.
    g                      The 'G' key on an American layout.
    h                      The 'H' key on an American layout.
    i                      The 'I' key on an American layout.
    j                      The 'J' key on an American layout.
    k                      The 'K' key on an American layout.
    l                      The 'L' key on an American layout.
    m                      The 'M' key on an American layout.
    n                      The 'N' key on an American layout.
    o                      The 'O' key on an American layout.
    p                      The 'P' key on an American layout.
    q                      The 'Q' key on an American layout.
    r                      The 'R' key on an American layout.
    s                      The 'S' key on an American layout.
    t                      The 'T' key on an American layout.
    u                      The 'U' key on an American layout.
    v                      The 'V' key on an American layout.
    w                      The 'W' key on an American layout.
    x                      The 'X' key on an American layout.
    y                      The 'Y' key on an American layout.
    z                      The 'Z' key on an American layout.
    1                      The '1' key on an American layout.
    2                      The '2' key on an American layout.
    3                      The '3' key on an American layout.
    4                      The '4' key on an American layout.
    5                      The '5' key on an American layout.
    6                      The '6' key on an American layout.
    7                      The '7' key on an American layout.
    8                      The '8' key on an American layout.
    9                      The '9' key on an American layout.
    0                      The '0' key on an American layout.
    return                 The 'return' / 'enter' key on an American layout.
    escape                 The 'escape' key on an American layout.
    backspace              The 'backspace' key on an American layout.
    tab                    The 'tab' key on an American layout.
    space                  The spacebar on an American layout.
    -                      The minus key on an American layout.
    =                      The equals key on an American layout.
    [                      The left-bracket key on an American layout.
    ]                      The right-bracket key on an American layout.
    \                      The backslash key on an American layout.
    nonus#                 The non-U.S. hash scancode.
    ;                      The semicolon key on an American layout.
    '                      The apostrophe key on an American layout.
    `                      The back-tick / grave key on an American layout.
    ,                      The comma key on an American layout.
    .                      The period key on an American layout.
    /                      The forward-slash key on an American layout.
    capslock               The capslock key on an American layout.
    f1                     The F1 key on an American layout.
    f2                     The F2 key on an American layout.
    f3                     The F3 key on an American layout.
    f4                     The F4 key on an American layout.
    f5                     The F5 key on an American layout.
    f6                     The F6 key on an American layout.
    f7                     The F7 key on an American layout.
    f8                     The F8 key on an American layout.
    f9                     The F9 key on an American layout.
    f10                    The F10 key on an American layout.
    f11                    The F11 key on an American layout.
    f12                    The F12 key on an American layout.
    f13                    The F13 key on an American layout.
    f14                    The F14 key on an American layout.
    f15                    The F15 key on an American layout.
    f16                    The F16 key on an American layout.
    f17                    The F17 key on an American layout.
    f18                    The F18 key on an American layout.
    f19                    The F19 key on an American layout.
    f20                    The F20 key on an American layout.
    f21                    The F21 key on an American layout.
    f22                    The F22 key on an American layout.
    f23                    The F23 key on an American layout.
    f24                    The F24 key on an American layout.
    lctrl                  The left control key on an American layout.
    lshift                 The left shift key on an American layout.
    lalt                   The left alt / option key on an American layout.
    lgui                   The left GUI (command / windows / super) key on an
                           American layout.
    rctrl                  The right control key on an American layout.
    rshift                 The right shift key on an American layout.
    ralt                   The right alt / option key on an American layout.
    rgui                   The right GUI (command / windows / super) key on an
                           American layout.
    printscreen            The printscreen key on an American layout.
    scrolllock             The scroll-lock key on an American layout.
    pause                  The pause key on an American layout.
    insert                 The insert key on an American layout.
    home                   The home key on an American layout.
    numlock                The numlock / clear key on an American layout.
    pageup                 The page-up key on an American layout.
    delete                 The forward-delete key on an American layout.
    end                    The end key on an American layout.
    pagedown               The page-down key on an American layout.
    right                  The right-arrow key on an American layout.
    left                   The left-arrow key on an American layout.
    down                   The down-arrow key on an American layout.
    up                     The up-arrow key on an American layout.
    nonusbackslash         The non-U.S. backslash scancode.
    application            The application key on an American layout. Windows
                           contextual menu, compose key.
    execute                The 'execute' key on an American layout.
    help                   The 'help' key on an American layout.
    menu                   The 'menu' key on an American layout.
    select                 The 'select' key on an American layout.
    stop                   The 'stop' key on an American layout.
    again                  The 'again' key on an American layout.
    undo                   The 'undo' key on an American layout.
    cut                    The 'cut' key on an American layout.
    copy                   The 'copy' key on an American layout.
    paste                  The 'paste' key on an American layout.
    find                   The 'find' key on an American layout.
    kp/                    The keypad forward-slash key on an American layout.
    kp*                    The keypad '*' key on an American layout.
    kp-                    The keypad minus key on an American layout.
    kp+                    The keypad plus key on an American layout.
    kp=                    The keypad equals key on an American layout.
    kpenter                The keypad enter key on an American layout.
    kp1                    The keypad '1' key on an American layout.
    kp2                    The keypad '2' key on an American layout.
    kp3                    The keypad '3' key on an American layout.
    kp4                    The keypad '4' key on an American layout.
    kp5                    The keypad '5' key on an American layout.
    kp6                    The keypad '6' key on an American layout.
    kp7                    The keypad '7' key on an American layout.
    kp8                    The keypad '8' key on an American layout.
    kp9                    The keypad '9' key on an American layout.
    kp0                    The keypad '0' key on an American layout.
    kp.                    The keypad period key on an American layout.
    international1         The 1st international key on an American layout.
                           Used on Asian keyboards.
    international2         The 2nd international key on an American layout.
    international3         The 3rd international key on an American layout.
                           Yen.
    international4         The 4th international key on an American layout.
    international5         The 5th international key on an American layout.
    international6         The 6th international key on an American layout.
    international7         The 7th international key on an American layout.
    international8         The 8th international key on an American layout.
    international9         The 9th international key on an American layout.
    lang1                  Hangul/English toggle scancode.
    lang2                  Hanja conversion scancode.
    lang3                  Katakana scancode.
    lang4                  Hiragana scancode.
    lang5                  Zenkaku/Hankaku scancode.
    mute                   The mute key on an American layout.
    volumeup               The volume up key on an American layout.
    volumedown             The volume down key on an American layout.
    audionext              The audio next track key on an American layout.
    audioprev              The audio previous track key on an American layout.
    audiostop              The audio stop key on an American layout.
    audioplay              The audio play key on an American layout.
    audiomute              The audio mute key on an American layout.
    mediaselect            The media select key on an American layout.
    www                    The 'WWW' key on an American layout.
    mail                   The Mail key on an American layout.
    calculator             The calculator key on an American layout.
    computer               The 'computer' key on an American layout.
    acsearch               The AC Search key on an American layout.
    achome                 The AC Home key on an American layout.
    acback                 The AC Back key on an American layout.
    acforward              The AC Forward key on an American layout.
    acstop                 Th AC Stop key on an American layout.
    acrefresh              The AC Refresh key on an American layout.
    acbookmarks            The AC Bookmarks key on an American layout.
    power                  The system power scancode.
    brightnessdown         The brightness-down scancode.
    brightnessup           The brightness-up scancode.
    displayswitch          The display switch scancode.
    kbdillumtoggle         The keyboard illumination toggle scancode.
    kbdillumdown           The keyboard illumination down scancode.
    kbdillumup             The keyboard illumination up scancode.
    eject                  The eject scancode.
    sleep                  The system sleep scancode.
    alterase               The alt-erase key on an American layout.
    sysreq                 The sysreq key on an American layout.
    cancel                 The 'cancel' key on an American layout.
    clear                  The 'clear' key on an American layout.
    prior                  The 'prior' key on an American layout.
    return2                The 'return2' key on an American layout.
    separator              The 'separator' key on an American layout.
    out                    The 'out' key on an American layout.
    oper                   The 'oper' key on an American layout.
    clearagain             The 'clearagain' key on an American layout.
    crsel                  The 'crsel' key on an American layout.
    exsel                  The 'exsel' key on an American layout.
    kp00                   The keypad 00 key on an American layout.
    kp000                  The keypad 000 key on an American layout.
    thsousandsseparator    The thousands-separator key on an American layout.
    decimalseparator       The decimal separator key on an American layout.
    currencyunit           The currency unit key on an American layout.
    currencysubunit        The currency sub-unit key on an American layout.
    app1                   The 'app1' scancode.
    app2                   The 'app2' scancode.
    unknown                An unknown key.

------------------------------------------------------------------------------
2.9. math                                                          *love.math*

Provides system-independent mathematical functions.

- Types: 
    - BezierCurve                                           |love-BezierCurve|
    - CompressedData                                     |love-CompressedData|
    - RandomGenerator                                   |love-RandomGenerator|
- Enums: 
    - CompressedDataFormat                         |love-CompressedDataFormat|

------------------------------------------------------------------------------
2.9.1. functions                                         *love.math-functions*

The functions of math.

------------------------------------------------------------------------------
2.9.1.1. compress                                         *love.math.compress*

Compresses a string or data using a specific compression algorithm.

Variants:
    1:
        - `Arguments`:
            - rawstring: <string> The raw (un-compressed) string to compress.
            - format: <CompressedDataFormat> The format to use when
              compressing the string.
            - level: <number> The level of compression to use, between 0 and
              9. -1 indicates the default level. The meaning of this argument
              depends on the compression format being used.
        - `Returns`:
            - compressedData: <CompressedData> A new Data object containing
              the compressed version of the string.
    2:
        - `Arguments`:
            - data: <Data> A Data object containing the raw (un-compressed)
              data to compress.
            - format: <CompressedDataFormat> The format to use when
              compressing the data.
            - level: <number> The level of compression to use, between 0 and
              9. -1 indicates the default level. The meaning of this argument
              depends on the compression format being used.
        - `Returns`:
            - compressedData: <CompressedData> A new Data object containing
              the compressed version of the raw data.

------------------------------------------------------------------------------
2.9.1.2. decompress                                     *love.math.decompress*

Decompresses a CompressedData or previously compressed string or Data object.

Variants:
    1:
        - `Arguments`:
            - compressedData: <CompressedData> The compressed data to
              decompress.
        - `Returns`:
            - rawstring: <string> A string containing the raw decompressed
              data.
    2:
        - `Arguments`:
            - compressedString: <string> A string containing data previously
              compressed with love.math.compress.
            - format: <CompressedDataFormat> The format that was used to
              compress the given string.
        - `Returns`:
            - rawstring: <string> A string containing the raw decompressed
              data.
    3:
        - `Arguments`:
            - data: <Data> A Data object containing data previously compressed
              with love.math.compress.
            - format: <CompressedDataFormat> The format that was used to
              compress the given data.
        - `Returns`:
            - rawstring: <string> A string containing the raw decompressed
              data.

------------------------------------------------------------------------------
2.9.1.3. gammaToLinear                               *love.math.gammaToLinear*

Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful
when doing gamma-correct rendering and you need to do math in linear RGB in
the few cases where LÖVE doesn't handle conversions automatically.

Variants:
    1:
        - `Arguments`:
            - r: <number> The red channel of the sRGB color to convert.
            - g: <number> The green channel of the sRGB color to convert.
            - b: <number> The blue channel of the sRGB color to convert.
        - `Returns`:
            - lr: <number> The red channel of the converted color in linear
              RGB space.
            - lg: <number> The green channel of the converted color in linear
              RGB space.
            - lb: <number> The blue channel of the converted color in linear
              RGB space.
    2:
        - `Arguments`:
            - color: <table> An array with the red, green, and blue channels
              of the sRGB color to convert.
        - `Returns`:
            - lr: <number> The red channel of the converted color in linear
              RGB space.
            - lg: <number> The green channel of the converted color in linear
              RGB space.
            - lb: <number> The blue channel of the converted color in linear
              RGB space.
    3:
        - `Arguments`:
            - c: <number> The value of a color channel in sRGB space to
              convert.
        - `Returns`:
            - lc: <number> The value of the color channel in linear RGB space.

------------------------------------------------------------------------------
2.9.1.4. getRandomSeed                               *love.math.getRandomSeed*

Gets the seed of the random number generator.

The state is split into two numbers due to Lua's use of doubles for all number
values - doubles can't accurately represent integer values above 2^53.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - low: <number> Integer number representing the lower 32 bits of
              the random number generator's 64 bit state value.
            - high: <number> Integer number representing the higher 32 bits of
              the random number generator's 64 bit state value.

------------------------------------------------------------------------------
2.9.1.5. getRandomState                             *love.math.getRandomState*

Gets the current state of the random number generator. This returns an opaque
implementation-dependent string which is only useful for later use with
RandomGenerator:setState.

This is different from RandomGenerator:getSeed in that getState gets the
RandomGenerator's current state, whereas getSeed gets the previously set seed
number.

The value of the state string does not depend on the current operating system.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - state: <string> The current state of the RandomGenerator object,
              represented as a string.

------------------------------------------------------------------------------
2.9.1.6. isConvex                                         *love.math.isConvex*

Checks whether a polygon is convex.

PolygonShapes in love.physics, some forms of Mesh, and polygons drawn with
love.graphics.polygon must be simple convex polygons.

Variants:
    1:
        - `Arguments`:
            - vertices: <table> The vertices of the polygon as a table in the
              form of {x1, y1, x2, y2, x3, y3, ...}.
        - `Returns`:
            - convex: <boolean> Whether the given polygon is convex.
    2:
        - `Arguments`:
            - x1: <number> The position of the first vertex of the polygon on
              the x-axis.
            - y1: <number> The position of the first vertex of the polygon on
              the y-axis.
            - x2: <number> The position of the second vertex of the polygon on
              the x-axis.
            - y2: <number> The position of the second vertex of the polygon on
              the y-axis.
            - x3: <number> The position of the third vertex of the polygon on
              the x-axis.
            - y3: <number> The position of the third vertex of the polygon on
              the y-axis.
            - ...: <number> Additional vertices.
        - `Returns`:
            - convex: <boolean> Whether the given polygon is convex.

------------------------------------------------------------------------------
2.9.1.7. linearToGamma                               *love.math.linearToGamma*

Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful
when storing linear RGB color values in an image, because the linear RGB color
space has less precision than sRGB for dark colors, which can result in
noticeable color banding when drawing.

In general, colors chosen based on what they look like on-screen are already
in gamma-space and should not be double-converted. Colors calculated using
math are often in the linear RGB space.

Variants:
    1:
        - `Arguments`:
            - lr: <number> The red channel of the linear RGB color to convert.
            - lg: <number> The green channel of the linear RGB color to
              convert.
            - lb: <number> The blue channel of the linear RGB color to
              convert.
        - `Returns`:
            - cr: <number> The red channel of the converted color in gamma
              sRGB space.
            - cg: <number> The green channel of the converted color in gamma
              sRGB space.
            - cb: <number> The blue channel of the converted color in gamma
              sRGB space.
    2:
        - `Arguments`:
            - color: <table> An array with the red, green, and blue channels
              of the linear RGB color to convert.
        - `Returns`:
            - cr: <number> The red channel of the converted color in gamma
              sRGB space.
            - cg: <number> The green channel of the converted color in gamma
              sRGB space.
            - cb: <number> The blue channel of the converted color in gamma
              sRGB space.
    3:
        - `Arguments`:
            - lc: <number> The value of a color channel in linear RGB space to
              convert.
        - `Returns`:
            - c: <number> The value of the color channel in gamma sRGB space.

------------------------------------------------------------------------------
2.9.1.8. newBezierCurve                             *love.math.newBezierCurve*

Creates a new BezierCurve object.

The number of vertices in the control polygon determines the degree of the
curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four
vertices define a cubic (degree 3) Bézier curve, etc.

Variants:
    1:
        - `Arguments`:
            - vertices: <table> The vertices of the control polygon as a table
              in the form of {x1, y1, x2, y2, x3, y3, ...}.
        - `Returns`:
            - curve: <BezierCurve> A Bézier curve object.
    2:
        - `Arguments`:
            - x1: <number> The position of the first vertex of the control
              polygon on the x-axis.
            - y1: <number> The position of the first vertex of the control
              polygon on the y-axis.
            - x2: <number> The position of the second vertex of the control
              polygon on the x-axis.
            - y2: <number> The position of the second vertex of the control
              polygon on the y-axis.
            - x3: <number> The position of the third vertex of the control
              polygon on the x-axis.
            - y3: <number> The position of the third vertex of the control
              polygon on the y-axis.
            - ...: <number> Additional vertices.
        - `Returns`:
            - curve: <BezierCurve> A Bézier curve object.

------------------------------------------------------------------------------
2.9.1.9. newRandomGenerator                     *love.math.newRandomGenerator*

Creates a new RandomGenerator object which is completely independent of other
RandomGenerator objects and random functions.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - rng: <RandomGenerator> A Random Number Generator object.
    2:
        - `Arguments`:
            - low: <number> The lower 32 bits of the state number to use for
              this instance of the object.
            - high: <number> The higher 32 bits of the state number to use for
              this instance of the object.
        - `Returns`:
            - rng: <RandomGenerator> A Random Number Generator object.
    3:
        - `Arguments`:
            - seed: <string> A state of a RandomGenerator object returned by
              RandomGenerator:getState.
        - `Returns`:
            - rng: <RandomGenerator> A Random Number Generator object.

------------------------------------------------------------------------------
2.9.1.10. noise                                              *love.math.noise*

Generates a Simplex or Perlin noise value in 1-4 dimensions.

Simplex noise is closely related to Perlin noise. It is widely used for
procedural content generation.

There are many webpages which discuss Perlin and Simplex noise in detail.

Variants:
    1:
        - `Arguments`:
            - x: <number> The number used to generate the noise value.
        - `Returns`:
            - value: <number> The noise value in the range of [0, 1].
    2:
        - `Arguments`:
            - x: <number> The first value of the 2-dimensional vector used to
              generate the noise value.
            - y: <number> The second value of the 2-dimensional vector used to
              generate the noise value.
        - `Returns`:
            - value: <number> The noise value in the range of [0, 1].
    3:
        - `Arguments`:
            - x: <number> The first value of the 3-dimensional vector used to
              generate the noise value.
            - y: <number> The second value of the 3-dimensional vector used to
              generate the noise value.
            - z: <number> The third value of the 3-dimensional vector used to
              generate the noise value.
        - `Returns`:
            - value: <number> The noise value in the range of [0, 1].
    4:
        - `Arguments`:
            - x: <number> The first value of the 4-dimensional vector used to
              generate the noise value.
            - y: <number> The second value of the 4-dimensional vector used to
              generate the noise value.
            - z: <number> The third value of the 4-dimensional vector used to
              generate the noise value.
            - w: <number> The fourth value of the 4-dimensional vector used to
              generate the noise value.
        - `Returns`:
            - value: <number> The noise value in the range of [0, 1].

------------------------------------------------------------------------------
2.9.1.11. random                                            *love.math.random*

Generates a pseudo-random number in a platform independent manner.

Variants:
    1:
        - 'Description': Get uniformly distributed pseudo-random real number
          within [0, 1].
        - `Arguments`: None
        - `Returns`:
            - number: <number> The pseudo-random number.
    2:
        - 'Description': Get a uniformly distributed pseudo-random integer
          within [1, max].
        - `Arguments`:
            - max: <number> The maximum possible value it should return.
        - `Returns`:
            - number: <number> The pseudo-random integer number.
    3:
        - 'Description': Get uniformly distributed pseudo-random integer
          within [min, max].
        - `Arguments`:
            - min: <number> The minimum possible value it should return.
            - max: <number> The maximum possible value it should return.
        - `Returns`:
            - number: <number> The pseudo-random integer number.

------------------------------------------------------------------------------
2.9.1.12. randomNormal                                *love.math.randomNormal*

Get a normally distributed pseudo random number.

Variants:
    1:
        - `Arguments`:
            - stddev: <number> Standard deviation of the distribution.
            - mean: <number> The mean of the distribution.
        - `Returns`:
            - number: <number> Normally distributed random number with
              variance (stddev)² and the specified mean.

------------------------------------------------------------------------------
2.9.1.13. setRandomSeed                              *love.math.setRandomSeed*

Sets the seed of the random number generator using the specified integer
number.

Variants:
    1:
        - `Arguments`:
            - seed: <number> The integer number with which you want to seed
              the randomization. Must be within the range of [1, 2^53].
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - low: <number> The lower 32 bits of the state value. Must be
              within the range of [0, 2^32 - 1].
            - high: <number> The higher 32 bits of the state value. Must be
              within the range of [0, 2^32 - 1].
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.1.14. setRandomState                            *love.math.setRandomState*

Gets the current state of the random number generator. This returns an opaque
implementation-dependent string which is only useful for later use with
RandomGenerator:setState.

This is different from RandomGenerator:getSeed in that getState gets the
RandomGenerator's current state, whereas getSeed gets the previously set seed
number.

The value of the state string does not depend on the current operating system.

Variants:
    1:
        - `Arguments`:
            - state: <string> The current state of the RandomGenerator object,
              represented as a string.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.1.15. triangulate                                  *love.math.triangulate*

Triangulate a simple polygon.

Variants:
    1:
        - `Arguments`:
            - polygon: <table> Polygon to triangulate. Must not intersect
              itself.
        - `Returns`:
            - triangles: <table> List of triangles the polygon is composed of,
              in the form of {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3,
              y3}, ...}.
    2:
        - `Arguments`:
            - x1: <number> The position of the first vertex of the polygon on
              the x-axis.
            - y1: <number> The position of the first vertex of the polygon on
              the y-axis.
            - x2: <number> The position of the second vertex of the polygon on
              the x-axis.
            - y2: <number> The position of the second vertex of the polygon on
              the y-axis.
            - x3: <number> The position of the third vertex of the polygon on
              the x-axis.
            - y3: <number> The position of the third vertex of the polygon on
              the y-axis.
            - ...: <number> Additional vertices.
        - `Returns`:
            - triangles: <table> List of triangles the polygon is composed of,
              in the form of {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3,
              y3}, ...}.

------------------------------------------------------------------------------
2.9.2. types                                                 *love.math-types*

The types of math:

    - BezierCurve                                           |love.BezierCurve|
    - CompressedData                                     |love.CompressedData|
    - RandomGenerator                                   |love.RandomGenerator|

------------------------------------------------------------------------------
2.9.2.1. BezierCurve                *love-BezierCurve* *love.math-BezierCurve*

A Bézier curve object that can evaluate and render Bézier curves of
arbitrary degree.

Constructors: 
    - newBezierCurve                                |love.math.newBezierCurve|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - evalulate                                        |BezierCurve:evalulate|
    - getControlPoint                            |BezierCurve:getControlPoint|
    - getControlPointCount                  |BezierCurve:getControlPointCount|
    - getDegree                                        |BezierCurve:getDegree|
    - getDerivative                                |BezierCurve:getDerivative|
    - getSegment                                      |BezierCurve:getSegment|
    - insertControlPoint                      |BezierCurve:insertControlPoint|
    - removeControlPoint                      |BezierCurve:removeControlPoint|
    - render                                              |BezierCurve:render|
    - renderSegment                                |BezierCurve:renderSegment|
    - rotate                                              |BezierCurve:rotate|
    - scale                                                |BezierCurve:scale|
    - setControlPoint                            |BezierCurve:setControlPoint|
    - translate                                        |BezierCurve:translate|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.9.2.1.1. evalulate                                   *BezierCurve:evalulate*

Evaluate Bézier curve at parameter t. The parameter must be between 0 and 1
(inclusive).

This function can be used to move objects along paths or tween parameters.
However it should not be used to render the curve, see BezierCurve:render for
that purpose.

Variants:
    1:
        - `Arguments`:
            - t: <number> Where to evaluate the curve.
        - `Returns`:
            - x: <number> x coordinate of the curve at parameter t.
            - y: <number> y coordinate of the curve at parameter t.

------------------------------------------------------------------------------
2.9.2.1.2. getControlPoint                       *BezierCurve:getControlPoint*

Get coordinates of the i-th control point. Indices start with 1.

Variants:
    1:
        - `Arguments`:
            - i: <number> Index of the control point.
        - `Returns`:
            - x: <number> Position of the control point along the x axis.
            - y: <number> Position of the control point along the y axis.

------------------------------------------------------------------------------
2.9.2.1.3. getControlPointCount             *BezierCurve:getControlPointCount*

Get the number of control points in the Bézier curve.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - count: <number> The number of control points.

------------------------------------------------------------------------------
2.9.2.1.4. getDegree                                   *BezierCurve:getDegree*

Get degree of the Bézier curve. The degree is equal to
number-of-control-points - 1.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - degree: <number> Degree of the Bézier curve.

------------------------------------------------------------------------------
2.9.2.1.5. getDerivative                           *BezierCurve:getDerivative*

Get the derivative of the Bézier curve.

This function can be used to rotate sprites moving along a curve in the
direction of the movement and compute the direction perpendicular to the curve
at some parameter t.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - derivative: <BezierCurve> The derivative curve.

------------------------------------------------------------------------------
2.9.2.1.6. getSegment                                 *BezierCurve:getSegment*

Gets a BezierCurve that corresponds to the specified segment of this
BezierCurve.

Variants:
    1:
        - `Arguments`:
            - startpoint: <number> The starting point along the curve. Must be
              between 0 and 1.
            - endpoint: <number> The end of the segment. Must be between 0 and
              1.
        - `Returns`:
            - curve: <BezierCurve> A BezierCurve that corresponds to the
              specified segment.

------------------------------------------------------------------------------
2.9.2.1.7. insertControlPoint                 *BezierCurve:insertControlPoint*

Insert control point after the i-th control point. Indices start with 1.
Negative indices wrap around: -1 is the last control point, -2 the one before
the last, etc.

Variants:
    1:
        - `Arguments`:
            - x: <number> Position of the control point along the x axis.
            - y: <number> Position of the control point along the y axis.
            - i: <number> Index of the control point.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.2.1.8. removeControlPoint                 *BezierCurve:removeControlPoint*

Removes the specified control point.

Variants:
    1:
        - `Arguments`:
            - index: <number> The index of the control point to remove.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.2.1.9. render                                         *BezierCurve:render*

Get a list of coordinates to be used with love.graphics.line.

This function samples the Bézier curve using recursive subdivision. You can
control the recursion depth using the depth parameter.

If you are just interested to know the position on the curve given a
parameter, use BezierCurve:evalulate.

Variants:
    1:
        - `Arguments`:
            - depth: <number> Number of recursive subdivision steps.
        - `Returns`:
            - coordinates: <table> List of x,y-coordinate pairs of points on
              the curve.

------------------------------------------------------------------------------
2.9.2.1.10. renderSegment                          *BezierCurve:renderSegment*

Get a list of coordinates on a specific part of the curve, to be used with
love.graphics.line.

This function samples the Bézier curve using recursive subdivision. You can
control the recursion depth using the depth parameter.

If you are just need to know the position on the curve given a parameter, use
BezierCurve:evaluate.

Variants:
    1:
        - `Arguments`:
            - startpoint: <number> The starting point along the curve. Must be
              between 0 and 1.
            - endpoint: <number> The end of the segment to render. Must be
              between 0 and 1.
            - depth: <number> Number of recursive subdivision steps.
        - `Returns`:
            - coordinates: <table> List of x,y-coordinate pairs of points on
              the curve.

------------------------------------------------------------------------------
2.9.2.1.11. rotate                                        *BezierCurve:rotate*

Rotate the Bézier curve by an angle.

Variants:
    1:
        - `Arguments`:
            - angle: <number> Rotation angle in radians.
            - ox: <number> X coordinate of the rotation center.
            - oy: <number> Y coordinate of the rotation center.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.2.1.12. scale                                          *BezierCurve:scale*

Scale the Bézier curve by a factor.

Variants:
    1:
        - `Arguments`:
            - s: <number> Scale factor.
            - ox: <number> X coordinate of the scaling center.
            - oy: <number> Y coordinate of the scaling center.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.2.1.13. setControlPoint                      *BezierCurve:setControlPoint*

Set coordinates of the i-th control point. Indices start with 1.

Variants:
    1:
        - `Arguments`:
            - i: <number> Index of the control point.
            - ox: <number> Position of the control point along the x axis.
            - oy: <number> Position of the control point along the y axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.2.1.14. translate                                  *BezierCurve:translate*

Move the Bézier curve by an offset.

Variants:
    1:
        - `Arguments`:
            - dx: <number> Offset along the x axis.
            - dy: <number> Offset along the y axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.2.2. CompressedData       *love-CompressedData* *love.math-CompressedData*

Represents byte data compressed using a specific algorithm.

love.math.decompress can be used to de-compress the data.

Constructors: 
    - compress                                            |love.math.compress|

Supertypes: 
    - Data                                                         |love-Data|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getFormat                                     |CompressedData:getFormat|
    - getPointer                                             |Data:getPointer|
    - getSize                                                   |Data:getSize|
    - getString                                               |Data:getString|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.9.2.2.1. getFormat                                *CompressedData:getFormat*

Gets the compression format of the CompressedData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - format: <CompressedDataFormat> The format of the CompressedData.

------------------------------------------------------------------------------
2.9.2.3. RandomGenerator    *love-RandomGenerator* *love.math-RandomGenerator*

A random number generation object which has its own random state.

Constructors: 
    - newRandomGenerator                        |love.math.newRandomGenerator|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getSeed                                        |RandomGenerator:getSeed|
    - getState                                      |RandomGenerator:getState|
    - random                                          |RandomGenerator:random|
    - randomNormal                              |RandomGenerator:randomNormal|
    - setSeed                                        |RandomGenerator:setSeed|
    - setState                                      |RandomGenerator:setState|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.9.2.3.1. getSeed                                   *RandomGenerator:getSeed*

Gets the state of the random number generator.

The state is split into two numbers due to Lua's use of doubles for all number
values - doubles can't accurately represent integer values above 2^53.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - low: <number> Integer number representing the lower 32 bits of
              the random number generator's 64 bit state value.
            - high: <number> Integer number representing the higher 32 bits of
              the random number generator's 64 bit state value.

------------------------------------------------------------------------------
2.9.2.3.2. getState                                 *RandomGenerator:getState*

Gets the current state of the random number generator. This returns an opaque
implementation-dependent string which is only useful for later use with
RandomGenerator:setState.

This is different from RandomGenerator:getSeed in that getState gets the
RandomGenerator's current state, whereas getSeed gets the previously set seed
number.

The value of the state string does not depend on the current operating system.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - state: <string> The current state of the RandomGenerator object,
              represented as a string.

------------------------------------------------------------------------------
2.9.2.3.3. random                                     *RandomGenerator:random*

Generates a pseudo-random number in a platform independent manner.

Variants:
    1:
        - 'Description': Get uniformly distributed pseudo-random number within
          [0, 1].
        - `Arguments`: None
        - `Returns`:
            - number: <number> The pseudo random number.
    2:
        - 'Description': Get uniformly distributed pseudo-random integer
          number within [1, max].
        - `Arguments`:
            - max: <number> The maximum possible value it should return.
        - `Returns`:
            - number: <number> The pseudo-random integer number.
    3:
        - 'Description': Get uniformly distributed pseudo-random integer
          number within [min, max].
        - `Arguments`:
            - min: <number> The minimum possible value it should return.
            - max: <number> The maximum possible value it should return.
        - `Returns`:
            - number: <number> The pseudo-random integer number.

------------------------------------------------------------------------------
2.9.2.3.4. randomNormal                         *RandomGenerator:randomNormal*

Get a normally distributed pseudo random number.

Variants:
    1:
        - `Arguments`:
            - stddev: <number> Standard deviation of the distribution.
            - mean: <number> The mean of the distribution.
        - `Returns`:
            - number: <number> Normally distributed random number with
              variance (stddev)² and the specified mean.

------------------------------------------------------------------------------
2.9.2.3.5. setSeed                                   *RandomGenerator:setSeed*

Sets the seed of the random number generator using the specified integer
number.

Variants:
    1:
        - `Arguments`:
            - seed: <number> The integer number with which you want to seed
              the randomization. Must be within the range of [1, 2^53].
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - low: <number> The lower 32 bits of the state value. Must be
              within the range of [0, 2^32 - 1].
            - high: <number> The higher 32 bits of the state value. Must be
              within the range of [0, 2^32 - 1].
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.2.3.6. setState                                 *RandomGenerator:setState*

Sets the current state of the random number generator. The value used as an
argument for this function is an opaque implementation-dependent string and
should only originate from a previous call to RandomGenerator:getState.

This is different from RandomGenerator:setSeed in that setState directly sets
the RandomGenerator's current implementation-dependent state, whereas setSeed
gives it a new seed value.

The effect of the state string does not depend on the current operating
system.

Variants:
    1:
        - `Arguments`:
            - state: <string> The new state of the RandomGenerator object,
              represented as a string. This should originate from a previous
              call to RandomGenerator:getState.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.9.3. enums                                                 *love.math-enums*

Enums within love.math:
    CompressedDataFormat                           |love.CompressedDataFormat|

------------------------------------------------------------------------------
2.9.3.1. CompressedDataFormat                      *love-CompressedDataFormat*
                                              *love.math-CompressedDataFormat*

Compressed data formats.

Constants:

    lz4                    The LZ4 compression format. Compresses and
                           decompresses very quickly, but the compression
                           ratio is not the best. LZ4-HC is used when
                           compression level 9 is specified.
    zlib                   The zlib format is DEFLATE-compressed data with a
                           small bit of header data. Compresses relatively
                           slowly and decompresses moderately quickly, and has
                           a decent compression ratio.
    gzip                   The gzip format is DEFLATE-compressed data with a
                           slightly larger header than zlib. Since it uses
                           DEFLATE it has the same compression characteristics
                           as the zlib format.

------------------------------------------------------------------------------
2.10. mouse                                                       *love.mouse*

Provides an interface to the user's mouse.

- Types: 
    - Cursor                                                     |love-Cursor|
- Enums: 
    - CursorType                                             |love-CursorType|

------------------------------------------------------------------------------
2.10.1. functions                                       *love.mouse-functions*

The functions of mouse.

------------------------------------------------------------------------------
2.10.1.1. getCursor                                     *love.mouse.getCursor*

Gets the current Cursor.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - cursor: <Cursor> The current cursor, or nil if no cursor is set.

------------------------------------------------------------------------------
2.10.1.2. getPosition                                 *love.mouse.getPosition*

Returns the current position of the mouse.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The position of the mouse along the x-axis.
            - y: <number> The position of the mouse along the y-axis.

------------------------------------------------------------------------------
2.10.1.3. getRelativeMode                         *love.mouse.getRelativeMode*

Gets whether relative mode is enabled for the mouse.

If relative mode is enabled, the cursor is hidden and doesn't move when the
mouse does, but relative mouse motion events are still generated via
love.mousemoved. This lets the mouse move in any direction indefinitely
without the cursor getting stuck at the edges of the screen.

The reported position of the mouse is not updated while relative mode is
enabled, even when relative mouse motion events are generated.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> True if relative mode is enabled, false if
              it's disabled.

------------------------------------------------------------------------------
2.10.1.4. getSystemCursor                         *love.mouse.getSystemCursor*

Gets a Cursor object representing a system-native hardware cursor.

 Hardware cursors are framerate-independent and work the same way as normal
operating system cursors. Unlike drawing an image at the mouse's current
coordinates, hardware cursors never have visible lag between when the mouse is
moved and when the cursor position updates, even at low framerates.

Variants:
    1:
        - `Arguments`:
            - ctype: <CursorType> The type of system cursor to get.
        - `Returns`:
            - cursor: <Cursor> The Cursor object representing the system
              cursor type.

------------------------------------------------------------------------------
2.10.1.5. getX                                               *love.mouse.getX*

Returns the current x position of the mouse.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The position of the mouse along the x-axis.

------------------------------------------------------------------------------
2.10.1.6. getY                                               *love.mouse.getY*

Returns the current y position of the mouse.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - y: <number> The position of the mouse along the y-axis.

------------------------------------------------------------------------------
2.10.1.7. hasCursor                                     *love.mouse.hasCursor*

Gets whether cursor functionality is supported.

If it isn't supported, calling love.mouse.newCursor and
love.mouse.getSystemCursor will cause an error. Mobile devices do not support
cursors.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - hascursor: <boolean> Whether the system has cursor
              functionality.

------------------------------------------------------------------------------
2.10.1.8. isDown                                           *love.mouse.isDown*

Checks whether a certain mouse button is down. This function does not detect
mousewheel scrolling; you must use the love.wheelmoved (or love.mousepressed
in version 0.9.2 and older) callback for that.

Variants:
    1:
        - `Arguments`:
            - button: <number> The index of a button to check. 1 is the
              primary mouse button, 2 is the secondary mouse button, etc.
            - ...: <number> Additional button numbers to check.
        - `Returns`:
            - down: <boolean> True if the specified button is down.

------------------------------------------------------------------------------
2.10.1.9. isGrabbed                                     *love.mouse.isGrabbed*

Checks if the mouse is grabbed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - grabbed: <boolean> True if the cursor is grabbed, false if it is
              not.

------------------------------------------------------------------------------
2.10.1.10. isVisible                                    *love.mouse.isVisible*

Checks if the cursor is visible.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - visible: <boolean> True if the cursor to visible, false if the
              cursor is hidden.

------------------------------------------------------------------------------
2.10.1.11. newCursor                                    *love.mouse.newCursor*

Creates a new hardware Cursor object from an image file or ImageData.

Hardware cursors are framerate-independent and work the same way as normal
operating system cursors. Unlike drawing an image at the mouse's current
coordinates, hardware cursors never have visible lag between when the mouse is
moved and when the cursor position updates, even at low frameratesn

The hot spot is the point the operating system uses to determine what was
clicked and at what position the mouse cursor is. For example, the normal
arrow pointer normally has its hot spot at the top left of the image, but a
crosshair cursor might have it in the middle.

Variants:
    1:
        - `Arguments`:
            - imageData: <ImageData> The ImageData to use for the the new
              Cursor.
            - hotx: <number> The x-coordinate in the ImageData of the cursor's
              hot spot.
            - hoty: <number> The y-coordinate in the ImageData of the cursor's
              hot spot.
        - `Returns`:
            - cursor: <Cursor> The new Cursor object.
    2:
        - `Arguments`:
            - filepath: <string> Path to the image to use for the new Cursor.
            - hotx: <number> The x-coordinate in the ImageData of the cursor's
              hot spot.
            - hoty: <number> The y-coordinate in the ImageData of the cursor's
              hot spot.
        - `Returns`:
            - cursor: <Cursor> The new Cursor object.
    3:
        - `Arguments`:
            - fileData: <FileData> Data representing the image to use for the
              new Cursor.
            - hotx: <number> The x-coordinate in the ImageData of the cursor's
              hot spot.
            - hoty: <number> The y-coordinate in the ImageData of the cursor's
              hot spot.
        - `Returns`:
            - cursor: <Cursor> The new Cursor object.

------------------------------------------------------------------------------
2.10.1.12. setCursor                                    *love.mouse.setCursor*

Sets the current mouse cursor.

Resets the current mouse cursor to the default when called without arguments.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - cursor: <Cursor> The Cursor object to use as the current mouse
              cursor.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.10.1.13. setGrabbed                                  *love.mouse.setGrabbed*

Grabs the mouse and confines it to the window.

Variants:
    1:
        - `Arguments`:
            - grab: <boolean> True to confine the mouse, false to let it leave
              the window.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.10.1.14. setPosition                                *love.mouse.setPosition*

Sets the position of the mouse.

Variants:
    1:
        - `Arguments`:
            - x: <number> The new position of the mouse along the x-axis.
            - y: <number> The new position of the mouse along the y-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.10.1.15. setRelativeMode                        *love.mouse.setRelativeMode*

Sets whether relative mode is enabled for the mouse.

When relative mode is enabled, the cursor is hidden and doesn't move when the
mouse does, but relative mouse motion events are still generated via
love.mousemoved. This lets the mouse move in any direction indefinitely
without the cursor getting stuck at the edges of the screen.

The reported position of the mouse is not updated while relative mode is
enabled, even when relative mouse motion events are generated.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True to enable relative mode, false to disable
              it.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.10.1.16. setVisible                                  *love.mouse.setVisible*

Sets the visibility of the cursor.

Variants:
    1:
        - `Arguments`:
            - visible: <boolean> True to set the cursor to visible, false to
              hide the cursor.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.10.1.17. setX                                              *love.mouse.setX*

Sets the current X position of the mouse.

Variants:
    1:
        - `Arguments`:
            - x: <number> The new position of the mouse along the x-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.10.1.18. setY                                              *love.mouse.setY*

Sets the current Y position of the mouse.

Variants:
    1:
        - `Arguments`:
            - y: <number> The new position of the mouse along the y-axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.10.2. types                                               *love.mouse-types*

The types of mouse:

    - Cursor                                                     |love.Cursor|

------------------------------------------------------------------------------
2.10.2.1. Cursor                             *love-Cursor* *love.mouse-Cursor*

Represents a hardware cursor.

Constructors: 
    - getSystemCursor                             |love.mouse.getSystemCursor|
    - newCursor                                         |love.mouse.newCursor|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getType                                                 |Cursor:getType|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.10.2.1.1. getType                                           *Cursor:getType*

Gets the type of the Cursor.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - cursortype: <CursorType> The type of the Cursor.

------------------------------------------------------------------------------
2.10.3. enums                                               *love.mouse-enums*

Enums within love.mouse:
    CursorType                                               |love.CursorType|

------------------------------------------------------------------------------
2.10.3.1. CursorType                 *love-CursorType* *love.mouse-CursorType*

Types of hardware cursors.

Constants:

    image                  The cursor is using a custom image.
    arrow                  An arrow pointer.
    ibeam                  An I-beam, normally used when mousing over editable
                           or selectable text.
    wait                   Wait graphic.
    waitarrow              Small wait cursor with an arrow pointer.
    crosshair              Crosshair symbol.
    sizenwse               Double arrow pointing to the top-left and
                           bottom-right.
    sizenesw               Double arrow pointing to the top-right and
                           bottom-left.
    sizewe                 Double arrow pointing left and right.
    sizens                 Double arrow pointing up and down.
    sizeall                Four-pointed arrow pointing up, down, left, and
                           right.
    no                     Slashed circle or crossbones.
    hand                   Hand symbol.

------------------------------------------------------------------------------
2.11. physics                                                   *love.physics*

Can simulate 2D rigid body physics in a realistic manner. This module is based
on Box2D, and this API corresponds to the Box2D API as closely as possible.

- Types: 
    - Body                                                         |love-Body|
    - ChainShape                                             |love-ChainShape|
    - CircleShape                                           |love-CircleShape|
    - Contact                                                   |love-Contact|
    - EdgeShape                                               |love-EdgeShape|
    - DistanceJoint                                       |love-DistanceJoint|
    - Fixture                                                   |love-Fixture|
    - FrictionJoint                                       |love-FrictionJoint|
    - GearJoint                                               |love-GearJoint|
    - Joint                                                       |love-Joint|
    - MotorJoint                                             |love-MotorJoint|
    - MouseJoint                                             |love-MouseJoint|
    - PolygonShape                                         |love-PolygonShape|
    - PrismaticJoint                                     |love-PrismaticJoint|
    - PulleyJoint                                           |love-PulleyJoint|
    - RevoluteJoint                                       |love-RevoluteJoint|
    - RopeJoint                                               |love-RopeJoint|
    - Shape                                                       |love-Shape|
    - WeldJoint                                               |love-WeldJoint|
    - WheelJoint                                             |love-WheelJoint|
    - World                                                       |love-World|
- Enums: 
    - BodyType                                                 |love-BodyType|
    - JointType                                               |love-JointType|
    - ShapeType                                               |love-ShapeType|

------------------------------------------------------------------------------
2.11.1. functions                                     *love.physics-functions*

The functions of physics.

------------------------------------------------------------------------------
2.11.1.1. getDistance                               *love.physics.getDistance*

Returns the two closest points between two fixtures and their distance.

Variants:
    1:
        - `Arguments`:
            - fixture1: <Fixture> The first fixture.
            - fixture2: <Fixture> The second fixture.
        - `Returns`:
            - distance: <number> The distance of the two points.
            - x1: <number> The x-coordinate of the first point.
            - y1: <number> The y-coordinate of the first point.
            - x2: <number> The x-coordinate of the second point.
            - y2: <number> The y-coordinate of the second point.

------------------------------------------------------------------------------
2.11.1.2. getMeter                                     *love.physics.getMeter*

Get the scale of the world.

The world scale is the number of pixels per meter. Try to keep your shape
sizes less than 10 times this scale.

This is important because the physics in Box2D is tuned to work well for
objects of size 0.1m up to 10m. All physics coordinates are divided by this
number for the physics calculations.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - scale: <number> The size of 1 meter in pixels.

------------------------------------------------------------------------------
2.11.1.3. newBody                                       *love.physics.newBody*

Creates a new body.

There are three types of bodies. Static bodies do not move, have a infinite
mass, and can be used for level boundaries. Dynamic bodies are the main actors
in the simulation, they collide with everything. Kinematic bodies do not react
to forces and only collide with dynamic bodies.

The mass of the body gets calculated when a Fixture is attached or removed,
but can be changed at any time with Body:setMass or Body:resetMassData.

Variants:
    1:
        - `Arguments`:
            - world: <World> The world to create the body in.
            - x: <number> The x position of the body.
            - y: <number> The y position of the body.
            - type: <BodyType> The type of the body.
        - `Returns`:
            - body: <Body> A new body.

------------------------------------------------------------------------------
2.11.1.4. newChainShape                           *love.physics.newChainShape*

Creates a new ChainShape.

Variants:
    1:
        - `Arguments`:
            - loop: <boolean> If the chain should loop back to the first
              point.
            - x1: <number> The x position of the first point.
            - y1: <number> The y position of the first point.
            - x2: <number> The x position of the second point.
            - y2: <number> The y position of the second point.
            - ...: <number> Additional point positions.
        - `Returns`:
            - shape: <ChainShape> The new shape.
    2:
        - `Arguments`:
            - loop: <boolean> If the chain should loop back to the first
              point.
            - points: <table> A list of points to construct the ChainShape, in
              the form of {x1, y1, x2, y2, ...}.
        - `Returns`:
            - shape: <ChainShape> The new shape.

------------------------------------------------------------------------------
2.11.1.5. newCircleShape                         *love.physics.newCircleShape*

Creates a new CircleShape.

Variants:
    1:
        - `Arguments`:
            - radius: <number> The radius of the circle.
        - `Returns`:
            - shape: <CircleShape> The new shape.
    2:
        - `Arguments`:
            - x: <number> The x offset of the circle.
            - y: <number> The y offset of the circle.
            - radius: <number> The radius of the circle.
        - `Returns`:
            - shape: <CircleShape> The new shape.

------------------------------------------------------------------------------
2.11.1.6. newDistanceJoint                     *love.physics.newDistanceJoint*

Create a distance joint between two bodies.

This joint constrains the distance between two points on two bodies to be
constant. These two points are specified in world coordinates and the two
bodies are assumed to be in place when this joint is created. The first anchor
point is connected to the first body and the second to the second body, and
the points define the length of the distance joint.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body to attach to the joint.
            - body2: <Body> The second body to attach to the joint.
            - x1: <number> The x position of the first anchor point.
            - y1: <number> The y position of the first anchor point.
            - x2: <number> The x position of the second anchor point.
            - y2: <number> The y position of the second anchor point.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <DistanceJoint> The new distance joint.

------------------------------------------------------------------------------
2.11.1.7. newEdgeShape                             *love.physics.newEdgeShape*

Creates a edge shape.

Variants:
    1:
        - `Arguments`:
            - x1: <number> The x position of the first point.
            - y1: <number> The y position of the first point.
            - x2: <number> The x position of the second point.
            - y2: <number> The y position of the second point.
        - `Returns`:
            - shape: <EdgeShape> The new shape.

------------------------------------------------------------------------------
2.11.1.8. newFixture                                 *love.physics.newFixture*

Creates and attaches a Fixture to a body.

Variants:
    1:
        - `Arguments`:
            - body: <Body> The body which gets the fixture attached.
            - shape: <Shape> The shape of the fixture.
            - density: <number> The density of the fixture.
        - `Returns`:
            - fixture: <Fixture> The new fixture.

------------------------------------------------------------------------------
2.11.1.9. newFrictionJoint                     *love.physics.newFrictionJoint*

Create a friction joint between two bodies. A FrictionJoint applies friction
to a body.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body to attach to the joint.
            - body2: <Body> The second body to attach to the joint.
            - x: <number> The x position of the anchor point.
            - y: <number> The y position of the anchor point.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with eachother.
        - `Returns`:
            - joint: <FrictionJoint> The new FrictionJoint.

------------------------------------------------------------------------------
2.11.1.10. newGearJoint                            *love.physics.newGearJoint*

Create a gear joint connecting two joints.

The gear joint connects two joints that must be either prismatic or revolute
joints. Using this joint requires that the joints it uses connect their
respective bodies to the ground and have the ground as the first body. When
destroying the bodies and joints you must make sure you destroy the gear joint
before the other joints.

The gear joint has a ratio the determines how the angular or distance values
of the connected joints relate to each other. The formula coordinate1 + ratio
* coordinate2 always has a constant value that is set when the gear joint is
created.

Variants:
    1:
        - `Arguments`:
            - joint1: <Joint> The first joint to connect with a gear joint.
            - joint2: <Joint> The second joint to connect with a gear joint.
            - ratio: <number> The gear ratio.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <Joint> The new gear joint.

------------------------------------------------------------------------------
2.11.1.11. newMotorJoint                          *love.physics.newMotorJoint*

Creates a joint between two bodies which controls the relative motion between
them.

Position and rotation offsets can be specified once the MotorJoint has been
created, as well as the maximum motor force and torque that will be be applied
to reach the target offsets.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body to attach to the joint.
            - body2: <Body> The second body to attach to the joint.
            - correctionFactor: <number> The joint's initial position
              correction factor, in the range of [0, 1].
        - `Returns`:
            - joint: <MotorJoint> The new MotorJoint.
    2:
        - `Arguments`:
            - body1: <Body> The first body to attach to the joint.
            - body2: <Body> The second body to attach to the joint.
            - correctionFactor: <number> The joint's initial position
              correction factor, in the range of [0, 1].
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <MotorJoint> The new MotorJoint.

------------------------------------------------------------------------------
2.11.1.12. newMouseJoint                          *love.physics.newMouseJoint*

Create a joint between a body and the mouse.

This joint actually connects the body to a fixed point in the world. To make
it follow the mouse, the fixed point must be updated every timestep (example
below).

The advantage of using a MouseJoint instead of just changing a body position
directly is that collisions and reactions to other joints are handled by the
physics engine.

Variants:
    1:
        - `Arguments`:
            - body: <Body> The body to attach to the mouse.
            - x: <number> The x position of the connecting point.
            - y: <number> The y position of the connecting point.
        - `Returns`:
            - joint: <Joint> The new mouse joint.

------------------------------------------------------------------------------
2.11.1.13. newPolygonShape                      *love.physics.newPolygonShape*

Creates a new PolygonShape.

This shape can have 8 vertices at most, and must form a convex shape.

Variants:
    1:
        - `Arguments`:
            - x1: <number> The position of first point on the x-axis.
            - y1: <number> The position of first point on the y-axis.
            - x2: <number> The position of second point on the x-axis.
            - y2: <number> The position of second point on the y-axis.
            - ...: <number> You can continue passing more point positions to
              create the PolygonShape.
        - `Returns`:
            - shape: <PolygonShape> A new PolygonShape.
    2:
        - `Arguments`:
            - vertices: <table> A list of vertices to construct the polygon,
              in the form of {x1, y1, x2, y2, x3, y3, ...}.
        - `Returns`:
            - shape: <PolygonShape> A new PolygonShape.

------------------------------------------------------------------------------
2.11.1.14. newPrismaticJoint                  *love.physics.newPrismaticJoint*

Create a prismatic joints between two bodies.

A prismatic joint constrains two bodies to move relatively to each other on a
specified axis. It does not allow for relative rotation. Its definition and
operation are similar to a revolute joint, but with translation and force
substituted for angle and torque.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body to connect with a prismatic joint.
            - body2: <Body> The second body to connect with a prismatic joint.
            - x: <number> The x coordinate of the anchor point.
            - y: <number> The y coordinate of the anchor point.
            - ax: <number> The x coordinate of the axis unit vector.
            - ay: <number> The y coordinate of the axis unit vector.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <PrismaticJoint> The new prismatic joint.
    2:
        - `Arguments`:
            - body1: <Body> The first body to connect with a prismatic joint.
            - body2: <Body> The second body to connect with a prismatic joint.
            - x1: <number> The x coordinate of the first anchor point.
            - y1: <number> The y coordinate of the first anchor point.
            - x2: <number> The x coordinate of the second anchor point.
            - y2: <number> The y coordinate of the second anchor point.
            - ax: <number> The x coordinate of the axis unit vector.
            - ay: <number> The y coordinate of the axis unit vector.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <PrismaticJoint> The new prismatic joint.

------------------------------------------------------------------------------
2.11.1.15. newPulleyJoint                        *love.physics.newPulleyJoint*

Create a pulley joint to join two bodies to each other and the ground.

The pulley joint simulates a pulley with an optional block and tackle. If the
ratio parameter has a value different from one, then the simulated rope
extends faster on one side than the other. In a pulley joint the total length
of the simulated rope is the constant length1 + ratio * length2, which is set
when the pulley joint is created.

Pulley joints can behave unpredictably if one side is fully extended. It is
recommended that the method setMaxLengths be used to constrain the maximum
lengths each side can attain.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body to connect with a pulley joint.
            - body2: <Body> The second body to connect with a pulley joint.
            - gx1: <number> The x coordinate of the first body's ground
              anchor.
            - gy1: <number> The y coordinate of the first body's ground
              anchor.
            - gx2: <number> The x coordinate of the second body's ground
              anchor.
            - gy2: <number> The y coordinate of the second body's ground
              anchor.
            - x1: <number> The x coordinate of the pulley joint anchor in the
              first body.
            - y1: <number> The y coordinate of the pulley joint anchor in the
              first body.
            - x2: <number> The x coordinate of the pulley joint anchor in the
              second body.
            - y2: <number> The y coordinate of the pulley joint anchor in the
              second body.
            - ratio: <number> The joint ratio.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <Joint> The new pulley joint.

------------------------------------------------------------------------------
2.11.1.16. newRectangleShape                  *love.physics.newRectangleShape*

Shorthand for creating rectangluar PolygonShapes.

By default, the local origin is located at the center of the rectangle as
opposed to the top left for graphics.

Variants:
    1:
        - `Arguments`:
            - width: <number> The width of the rectangle.
            - height: <number> The height of the rectangle.
        - `Returns`:
            - shape: <PolygonShape> A new PolygonShape.
    2:
        - `Arguments`:
            - x: <number> The offset along the x-axis.
            - y: <number> The offset along the y-axis.
            - width: <number> The width of the rectangle.
            - height: <number> The height of the rectangle.
            - angle: <number> The initial angle of the rectangle.
        - `Returns`:
            - shape: <PolygonShape> A new PolygonShape.

------------------------------------------------------------------------------
2.11.1.17. newRevoluteJoint                    *love.physics.newRevoluteJoint*

Creates a pivot joint between two bodies.

This joint connects two bodies to a point around which they can pivot.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body to connect with a Revolute Joint.
            - body2: <Body> The second body to connect with a Revolute Joint.
            - x: <number> The x position of the connecting point.
            - y: <number> The y position of the connecting point.
            - collideConnected: <number> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <Joint> The new revolute joint.

------------------------------------------------------------------------------
2.11.1.18. newRopeJoint                            *love.physics.newRopeJoint*

Create a joint between two bodies. Its only function is enforcing a max
distance between these bodies.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body to attach to the joint.
            - body2: <Body> The second body to attach to the joint.
            - x1: <number> The x position of the first anchor point.
            - y1: <number> The y position of the first anchor point.
            - x2: <number> The x position of the second anchor point.
            - y2: <number> The y position of the second anchor point.
            - maxLength: <number> The maximum distance for the bodies.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <RopeJoint> The new RopeJoint.

------------------------------------------------------------------------------
2.11.1.19. newWeldJoint                            *love.physics.newWeldJoint*

Create a friction joint between two bodies. A WeldJoint essentially glues two
bodies together.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body to attach to the joint.
            - body2: <Body> The second body to attach to the joint.
            - x: <number> The x position of the anchor point.
            - y: <number> The y position of the anchor point.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <WeldJoint> The new WeldJoint.

------------------------------------------------------------------------------
2.11.1.20. newWheelJoint                          *love.physics.newWheelJoint*

Creates a wheel joint.

Variants:
    1:
        - `Arguments`:
            - body1: <Body> The first body.
            - body2: <Body> The second body.
            - x: <number> The x position of the anchor point.
            - y: <number> The y position of the anchor point.
            - ax: <number> The x position of the axis unit vector.
            - ay: <number> The y position of the axis unit vector.
            - collideConnected: <boolean> Specifies whether the two bodies
              should collide with each other.
        - `Returns`:
            - joint: <WheelJoint> The new WheelJoint.

------------------------------------------------------------------------------
2.11.1.21. newWorld                                    *love.physics.newWorld*

Creates a new World.

Variants:
    1:
        - `Arguments`:
            - xg: <number> The x component of gravity.
            - yg: <number> The y component of gravity.
            - sleep: <boolean> Whether the bodies in this world are allowed to
              sleep.
        - `Returns`:
            - world: <World> A brave new World.

------------------------------------------------------------------------------
2.11.1.22. setMeter                                    *love.physics.setMeter*

Sets the pixels to meter scale factor.

All coordinates in the physics module are divided by this number and converted
to meters, and it creates a convenient way to draw the objects directly to the
screen without the need for graphics transformations.

It is recommended to create shapes no larger than 10 times the scale. This is
important because Box2D is tuned to work well with shape sizes from 0.1 to 10
meters. The default meter scale is 30.

love.physics.setMeter does not apply retroactively to created objects. Created
objects retain their meter coordinates but the scale factor will affect their
pixel coordinates.

Variants:
    1:
        - `Arguments`:
            - scale: <number> The scale factor as an integer.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2. types                                             *love.physics-types*

The types of physics:

    - Body                                                         |love.Body|
    - ChainShape                                             |love.ChainShape|
    - CircleShape                                           |love.CircleShape|
    - Contact                                                   |love.Contact|
    - EdgeShape                                               |love.EdgeShape|
    - DistanceJoint                                       |love.DistanceJoint|
    - Fixture                                                   |love.Fixture|
    - FrictionJoint                                       |love.FrictionJoint|
    - GearJoint                                               |love.GearJoint|
    - Joint                                                       |love.Joint|
    - MotorJoint                                             |love.MotorJoint|
    - MouseJoint                                             |love.MouseJoint|
    - PolygonShape                                         |love.PolygonShape|
    - PrismaticJoint                                     |love.PrismaticJoint|
    - PulleyJoint                                           |love.PulleyJoint|
    - RevoluteJoint                                       |love.RevoluteJoint|
    - RopeJoint                                               |love.RopeJoint|
    - Shape                                                       |love.Shape|
    - WeldJoint                                               |love.WeldJoint|
    - WheelJoint                                             |love.WheelJoint|
    - World                                                       |love.World|

------------------------------------------------------------------------------
2.11.2.1. Body                                 *love-Body* *love.physics-Body*

Bodies are objects with velocity and position.

Constructors: 
    - newBody                                           |love.physics.newBody|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - applyAngularImpulse                           |Body:applyAngularImpulse|
    - applyForce                                             |Body:applyForce|
    - applyLinearImpulse                             |Body:applyLinearImpulse|
    - applyTorque                                           |Body:applyTorque|
    - destroy                                                   |Body:destroy|
    - getAngle                                                 |Body:getAngle|
    - getAngularDamping                               |Body:getAngularDamping|
    - getAngularVelocity                             |Body:getAngularVelocity|
    - getContactList                                     |Body:getContactList|
    - getFixtureList                                     |Body:getFixtureList|
    - getGravityScale                                   |Body:getGravityScale|
    - getInertia                                             |Body:getInertia|
    - getJointList                                         |Body:getJointList|
    - getLinearDamping                                 |Body:getLinearDamping|
    - getLinearVelocity                               |Body:getLinearVelocity|
    - getLinearVelocityFromLocalPoint   |Body:getLinearVelocityFromLocalPoint|
    - getLinearVelocityFromWorldPoint   |Body:getLinearVelocityFromWorldPoint|
    - getLocalCenter                                     |Body:getLocalCenter|
    - getLocalPoint                                       |Body:getLocalPoint|
    - getLocalVector                                     |Body:getLocalVector|
    - getMass                                                   |Body:getMass|
    - getMassData                                           |Body:getMassData|
    - getPosition                                           |Body:getPosition|
    - getType                                                   |Body:getType|
    - getUserData                                           |Body:getUserData|
    - getWorld                                                 |Body:getWorld|
    - getWorldCenter                                     |Body:getWorldCenter|
    - getWorldPoint                                       |Body:getWorldPoint|
    - getWorldPoints                                     |Body:getWorldPoints|
    - getWorldVector                                     |Body:getWorldVector|
    - getX                                                         |Body:getX|
    - getY                                                         |Body:getY|
    - isActive                                                 |Body:isActive|
    - isAwake                                                   |Body:isAwake|
    - isBullet                                                 |Body:isBullet|
    - isDestroyed                                           |Body:isDestroyed|
    - isFixedRotation                                   |Body:isFixedRotation|
    - isSleepingAllowed                               |Body:isSleepingAllowed|
    - resetMassData                                       |Body:resetMassData|
    - setActive                                               |Body:setActive|
    - setAngle                                                 |Body:setAngle|
    - setAngularDamping                               |Body:setAngularDamping|
    - setAngularVelocity                             |Body:setAngularVelocity|
    - setAwake                                                 |Body:setAwake|
    - setBullet                                               |Body:setBullet|
    - setFixedRotation                                 |Body:setFixedRotation|
    - setGravityScale                                   |Body:setGravityScale|
    - setInertia                                             |Body:setInertia|
    - setLinearDamping                                 |Body:setLinearDamping|
    - setLinearVelocity                               |Body:setLinearVelocity|
    - setMass                                                   |Body:setMass|
    - setMassData                                           |Body:setMassData|
    - setPosition                                           |Body:setPosition|
    - setSleepingAllowed                             |Body:setSleepingAllowed|
    - setType                                                   |Body:setType|
    - setUserData                                           |Body:setUserData|
    - setX                                                         |Body:setX|
    - setY                                                         |Body:setY|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.1.1. applyAngularImpulse                     *Body:applyAngularImpulse*

Applies an angular impulse to a body. This makes a single, instantaneous
addition to the body momentum.

A body with with a larger mass will react less. The reaction does not depend
on the timestep, and is equivalent to applying a force continuously for 1
second. Impulses are best used to give a single push to a body. For a
continuous push to a body it is better to use Body:applyForce.

Variants:
    1:
        - `Arguments`:
            - impulse: <number> The impulse in kilogram-square meter per
              second.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.2. applyForce                                       *Body:applyForce*

Apply force to a Body.

A force pushes a body in a direction. A body with with a larger mass will
react less. The reaction also depends on how long a force is applied: since
the force acts continuously over the entire timestep, a short timestep will
only push the body for a short time. Thus forces are best used for many
timesteps to give a continuous push to a body (like gravity). For a single
push that is independent of timestep, it is better to use
Body:applyLinearImpulse.

If the position to apply the force is not given, it will act on the center of
mass of the body. The part of the force not directed towards the center of
mass will cause the body to spin (and depends on the rotational inertia).

Note that the force components and position must be given in world
coordinates.

Variants:
    1:
        - `Arguments`:
            - fx: <number> The x component of force to apply to the center of
              mass.
            - fy: <number> The y component of force to apply to the center of
              mass.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - fx: <number> The x component of force to apply.
            - fy: <number> The y component of force to apply.
            - x: <number> The x position to apply the force.
            - y: <number> The y position to apply the force.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.3. applyLinearImpulse                       *Body:applyLinearImpulse*

Applies an impulse to a body. This makes a single, instantaneous addition to
the body momentum.

An impulse pushes a body in a direction. A body with with a larger mass will
react less. The reaction does not depend on the timestep, and is equivalent to
applying a force continuously for 1 second. Impulses are best used to give a
single push to a body. For a continuous push to a body it is better to use
Body:applyForce.

If the position to apply the impulse is not given, it will act on the center
of mass of the body. The part of the impulse not directed towards the center
of mass will cause the body to spin (and depends on the rotational inertia).

Note that the impulse components and position must be given in world
coordinates.

Variants:
    1:
        - `Arguments`:
            - ix: <number> The x component of the impulse applied to the
              center of mass.
            - iy: <number> The y component of the impulse applied to the
              center of mass.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - ix: <number> The x component of the impulse.
            - iy: <number> The y component of the impulse.
            - x: <number> The x position to apply the impulse.
            - y: <number> The y position to apply the impulse.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.4. applyTorque                                     *Body:applyTorque*

Apply torque to a body.

Torque is like a force that will change the angular velocity (spin) of a body.
The effect will depend on the rotational inertia a body has.

Variants:
    1:
        - `Arguments`:
            - torque: <number> The torque to apply.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.5. destroy                                             *Body:destroy*

Explicitly destroys the Body. When you don't have time to wait for garbage
collection, this function may be used to free the object immediately, but note
that an error will occur if you attempt to use the object after calling this
function.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.6. getAngle                                           *Body:getAngle*

Get the angle of the body.

The angle is measured in radians. If you need to transform it to degrees, use
math.deg.

A value of 0 radians will mean "looking to the right". Although radians
increase counter-clockwise, the y-axis points down so it becomes clockwise
from our point of view.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - angle: <number> The angle in radians.

------------------------------------------------------------------------------
2.11.2.1.7. getAngularDamping                         *Body:getAngularDamping*

Gets the Angular damping of the Body

The angular damping is the rate of decrease of the angular velocity over time:
A spinning body with no damping and no external forces will continue spinning
indefinitely. A spinning body with damping will gradually stop spinning.

Damping is not the same as friction - they can be modelled together. However,
only damping is provided by Box2D (and LÖVE).

Damping parameters should be between 0 and infinity, with 0 meaning no
damping, and infinity meaning full damping. Normally you will use a damping
value between 0 and 0.1.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - damping: <number> The value of the angular damping.

------------------------------------------------------------------------------
2.11.2.1.8. getAngularVelocity                       *Body:getAngularVelocity*

Get the angular velocity of the Body.

The angular velocity is the rate of change of angle over time.

It is changed in World:update by applying torques, off centre forces/impulses,
and angular damping. It can be set directly with Body:setAngularVelocity.

If you need the rate of change of position over time, use
Body:getLinearVelocity.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - w: <number> The angular velocity in radians/second.

------------------------------------------------------------------------------
2.11.2.1.9. getContactList                               *Body:getContactList*

Gets a list of all Contacts attached to the Body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - contacts: <table> A list with all contacts associated with the
              Body.

------------------------------------------------------------------------------
2.11.2.1.10. getFixtureList                              *Body:getFixtureList*

Returns a table with all fixtures.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - fixtures: <table> A sequence with all fixtures.

------------------------------------------------------------------------------
2.11.2.1.11. getGravityScale                            *Body:getGravityScale*

Returns the gravity scale factor.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - scale: <number> The gravity scale factor.

------------------------------------------------------------------------------
2.11.2.1.12. getInertia                                      *Body:getInertia*

Gets the rotational inertia of the body.

The rotational inertia is how hard is it to make the body spin. It is set with
the 4th argument to Body:setMass, or automatically with
Body:setMassFromShapes.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - inertia: <number> The rotational inertial of the body.

------------------------------------------------------------------------------
2.11.2.1.13. getJointList                                  *Body:getJointList*

Returns a table containing the Joints attached to this Body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - joints: <table> A sequence with the Joints attached to the Body.

------------------------------------------------------------------------------
2.11.2.1.14. getLinearDamping                          *Body:getLinearDamping*

Gets the linear damping of the Body.

The linear damping is the rate of decrease of the linear velocity over time. A
moving body with no damping and no external forces will continue moving
indefinitely, as is the case in space. A moving body with damping will
gradually stop moving.

Damping is not the same as friction - they can be modelled together. However,
only damping is provided by Box2D (and LÖVE).

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - damping: <number> The value of the linear damping.

------------------------------------------------------------------------------
2.11.2.1.15. getLinearVelocity                        *Body:getLinearVelocity*

Gets the linear velocity of the Body from its center of mass.

The linear velocity is the rate of change of position over time.

If you need the rate of change of angle over time, use
Body:getAngularVelocity. If you need to get the linear velocity of a point
different from the center of mass:

Body:getLinearVelocityFromLocalPoint allows you to specify the point in local
coordinates.

Body:getLinearVelocityFromWorldPoint allows you to specify the point in world
coordinates.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x component of the velocity vector.
            - y: <number> The y component of the velocity vector.

------------------------------------------------------------------------------
2.11.2.1.16. getLinearVelocityFromLocalPoint                                  
                                        *Body:getLinearVelocityFromLocalPoint*

Get the linear velocity of a point on the body.

The linear velocity for a point on the body is the velocity of the body center
of mass plus the velocity at that point from the body spinning.

The point on the body must given in local coordinates. Use
Body:getLinearVelocityFromWorldPoint to specify this with world coordinates.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x position to measure velocity.
            - y: <number> The y position to measure velocity.
        - `Returns`:
            - vx: <number> The x component of velocity at point (x,y).
            - vy: <number> The y component of velocity at point (x,y).

------------------------------------------------------------------------------
2.11.2.1.17. getLinearVelocityFromWorldPoint                                  
                                        *Body:getLinearVelocityFromWorldPoint*

Get the linear velocity of a point on the body.

The linear velocity for a point on the body is the velocity of the body center
of mass plus the velocity at that point from the body spinning.

The point on the body must given in world coordinates. Use
Body:getLinearVelocityFromLocalPoint to specify this with local coordinates.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x position to measure velocity.
            - y: <number> The y position to measure velocity.
        - `Returns`:
            - vx: <number> The x component of velocity at point (x,y).
            - vy: <number> The y component of velocity at point (x,y).

------------------------------------------------------------------------------
2.11.2.1.18. getLocalCenter                              *Body:getLocalCenter*

Get the center of mass position in local coordinates.

Use Body:getWorldCenter to get the center of mass in world coordinates.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x coordinate of the center of mass.
            - y: <number> The y coordinate of the center of mass.

------------------------------------------------------------------------------
2.11.2.1.19. getLocalPoint                                *Body:getLocalPoint*

Transform a point from world coordinates to local coordinates.

Variants:
    1:
        - `Arguments`:
            - worldX: <number> The x position in world coordinates.
            - worldY: <number> The y position in world coordinates.
        - `Returns`:
            - localX: <number> The x position in local coordinates.
            - localY: <number> The y position in local coordinates.

------------------------------------------------------------------------------
2.11.2.1.20. getLocalVector                              *Body:getLocalVector*

Transform a vector from world coordinates to local coordinates.

Variants:
    1:
        - `Arguments`:
            - worldX: <number> The vector x component in world coordinates.
            - worldY: <number> The vector y component in world coordinates.
        - `Returns`:
            - localX: <number> The vector x component in local coordinates.
            - localY: <number> The vector y component in local coordinates.

------------------------------------------------------------------------------
2.11.2.1.21. getMass                                            *Body:getMass*

Get the mass of the body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - mass: <number> The mass of the body (in kilograms).

------------------------------------------------------------------------------
2.11.2.1.22. getMassData                                    *Body:getMassData*

Returns the mass, its center, and the rotational inertia.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x position of the center of mass.
            - y: <number> The y position of the center of mass.
            - mass: <number> The mass of the body.
            - inertia: <number> The rotational inertia.

------------------------------------------------------------------------------
2.11.2.1.23. getPosition                                    *Body:getPosition*

Get the position of the body.

Note that this may not be the center of mass of the body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x position.
            - y: <number> The y position.

------------------------------------------------------------------------------
2.11.2.1.24. getType                                            *Body:getType*

Returns the type of the body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - type: <BodyType> The body type.

------------------------------------------------------------------------------
2.11.2.1.25. getUserData                                    *Body:getUserData*

Returns the Lua value associated with this Body.

Use this function in one thread only.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - value: <value> The Lua value associated with the Body.

------------------------------------------------------------------------------
2.11.2.1.26. getWorld                                          *Body:getWorld*

Gets the World the body lives in.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - world: <World> The world the body lives in.

------------------------------------------------------------------------------
2.11.2.1.27. getWorldCenter                              *Body:getWorldCenter*

Get the center of mass position in world coordinates.

Use Body:getLocalCenter to get the center of mass in local coordinates.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x coordinate of the center of mass.
            - y: <number> The y coordinate of the center of mass.

------------------------------------------------------------------------------
2.11.2.1.28. getWorldPoint                                *Body:getWorldPoint*

Transform a point from local coordinates to world coordinates.

Variants:
    1:
        - `Arguments`:
            - localX: <number> The x position in local coordinates.
            - localY: <number> The y position in local coordinates.
        - `Returns`:
            - worldX: <number> The x position in world coordinates.
            - worldY: <number> The y position in world coordinates.

------------------------------------------------------------------------------
2.11.2.1.29. getWorldPoints                              *Body:getWorldPoints*

Transforms multiple points from local coordinates to world coordinates.

Variants:
    1:
        - `Arguments`:
            - x1: <number> The x position of the first point.
            - y1: <number> The y position of the first point.
            - x2: <number> The x position of the second point.
            - y2: <number> The y position of the second point.
            - ...: <number> More x and y points.
        - `Returns`:
            - x1: <number> The transformed x position of the first point.
            - y1: <number> The transformed y position of the first point.
            - x2: <number> The transformed x position of the second point.
            - y2: <number> The transformed y position of the second point.
            - ...: <number> The transformed x and y positions of additional
              points.

------------------------------------------------------------------------------
2.11.2.1.30. getWorldVector                              *Body:getWorldVector*

Transform a vector from local coordinates to world coordinates.

Variants:
    1:
        - `Arguments`:
            - localX: <number> The vector x component in local coordinates.
            - localY: <number> The vector y component in local coordinates.
        - `Returns`:
            - worldX: <number> The vector x component in world coordinates.
            - worldY: <number> The vector y component in world coordinates.

------------------------------------------------------------------------------
2.11.2.1.31. getX                                                  *Body:getX*

Get the x position of the body in world coordinates.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x position in world coordinates.

------------------------------------------------------------------------------
2.11.2.1.32. getY                                                  *Body:getY*

Get the y position of the body in world coordinates.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - y: <number> The y position in world coordinates.

------------------------------------------------------------------------------
2.11.2.1.33. isActive                                          *Body:isActive*

Returns whether the body is actively used in the simulation.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - status: <boolean> True if the body is active or false if not.

------------------------------------------------------------------------------
2.11.2.1.34. isAwake                                            *Body:isAwake*

Returns the sleep status of the body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - status: <boolean> True if the body is awake or false if not.

------------------------------------------------------------------------------
2.11.2.1.35. isBullet                                          *Body:isBullet*

Get the bullet status of a body.

There are two methods to check for body collisions:

at their location when the world is updated (default)

using continuous collision detection (CCD)

The default method is efficient, but a body moving very quickly may sometimes
jump over another body without producing a collision. A body that is set as a
bullet will use CCD. This is less efficient, but is guaranteed not to jump
when moving quickly.

Note that static bodies (with zero mass) always use CCD, so your walls will
not let a fast moving body pass through even if it is not a bullet.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - status: <boolean> The bullet status of the body.

------------------------------------------------------------------------------
2.11.2.1.36. isDestroyed                                    *Body:isDestroyed*

Gets whether the Body is destroyed. Destroyed bodies cannot be used.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - destroyed: <boolean> Whether the Body is destroyed.

------------------------------------------------------------------------------
2.11.2.1.37. isFixedRotation                            *Body:isFixedRotation*

Returns whether the body rotation is locked.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - fixed: <boolean> True if the body's rotation is locked or false
              if not.

------------------------------------------------------------------------------
2.11.2.1.38. isSleepingAllowed                        *Body:isSleepingAllowed*

Returns the sleeping behaviour of the body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - status: <boolean> True if the body is allowed to sleep or false
              if not.

------------------------------------------------------------------------------
2.11.2.1.39. resetMassData                                *Body:resetMassData*

Resets the mass of the body by recalculating it from the mass properties of
the fixtures.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.40. setActive                                        *Body:setActive*

Sets whether the body is active in the world.

An inactive body does not take part in the simulation. It will not move or
cause any collisions.

Variants:
    1:
        - `Arguments`:
            - active: <boolean> If the body is active or not.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.41. setAngle                                          *Body:setAngle*

Set the angle of the body.

The angle is measured in radians. If you need to transform it from degrees,
use math.rad.

A value of 0 radians will mean "looking to the right". .Although radians
increase counter-clockwise, the y-axis points down so it becomes clockwise
from our point of view.

It is possible to cause a collision with another body by changing its angle.

Variants:
    1:
        - `Arguments`:
            - angle: <number> The angle in radians.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.42. setAngularDamping                        *Body:setAngularDamping*

Sets the angular damping of a Body.

See Body:getAngularDamping for a definition of angular damping.

Angular damping can take any value from 0 to infinity. It is recommended to
stay between 0 and 0.1, though. Other values will look unrealistic.

Variants:
    1:
        - `Arguments`:
            - damping: <number> The new angular damping.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.43. setAngularVelocity                      *Body:setAngularVelocity*

Sets the angular velocity of a Body.

The angular velocity is the rate of change of angle over time.

This function will not accumulate anything; any impulses previously applied
since the last call to World:update will be lost.

Variants:
    1:
        - `Arguments`:
            - w: <number> The new angular velocity, in radians per second
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.44. setAwake                                          *Body:setAwake*

Wakes the body up or puts it to sleep.

Variants:
    1:
        - `Arguments`:
            - awake: <boolean> The body sleep status.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.45. setBullet                                        *Body:setBullet*

Set the bullet status of a body.

There are two methods to check for body collisions:

at their location when the world is updated (default)

using continuous collision detection (CCD)

The default method is efficient, but a body moving very quickly may sometimes
jump over another body without producing a collision. A body that is set as a
bullet will use CCD. This is less efficient, but is guaranteed not to jump
when moving quickly.

Note that static bodies (with zero mass) always use CCD, so your walls will
not let a fast moving body pass through even if it is not a bullet.

Variants:
    1:
        - `Arguments`:
            - status: <boolean> The bullet status of the body.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.46. setFixedRotation                          *Body:setFixedRotation*

Set whether a body has fixed rotation.

Bodies with fixed rotation don't vary the speed at which they rotate.

Variants:
    1:
        - `Arguments`:
            - fixed: <boolean> Whether the body should have fixed rotation.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.47. setGravityScale                            *Body:setGravityScale*

Sets a new gravity scale factor for the body.

Variants:
    1:
        - `Arguments`:
            - scale: <number> The new gravity scale factor.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.48. setInertia                                      *Body:setInertia*

Set the inertia of a body.

This value can also be set by the fourth argument of Body:setMass.

Variants:
    1:
        - `Arguments`:
            - inertia: <number> The new moment of inertia, in kilograms per
              meter squared.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.49. setLinearDamping                          *Body:setLinearDamping*

Sets the linear damping of a Body

See Body:getLinearDamping for a definition of linear damping.

Linear damping can take any value from 0 to infinity. It is recommended to
stay between 0 and 0.1, though. Other values will make the objects look
"floaty".

Variants:
    1:
        - `Arguments`:
            - ld: <number> The new linear damping.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.50. setLinearVelocity                        *Body:setLinearVelocity*

Sets a new linear velocity for the Body.

This function will not accumulate anything; any impulses previously applied
since the last call to World:update will be lost.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of the velocity vector.
            - y: <number> The y component of the velocity vector.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.51. setMass                                            *Body:setMass*

Sets the mass in kilograms.

Variants:
    1:
        - `Arguments`:
            - mass: <number> The mass, in kilograms.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.52. setMassData                                    *Body:setMassData*

Overrides the calculated mass data.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of the center of mass in local
              coordinates.
            - y: <number> The y component of the center of mass in local
              coordinates.
            - mass: <number> The mass, in kilograms.
            - inertia: <number> The rotational inertia, in kilograms per
              squared meter.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.53. setPosition                                    *Body:setPosition*

Set the position of the body.

Note that this may not be the center of mass of the body.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x position.
            - y: <number> The y position.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.54. setSleepingAllowed                      *Body:setSleepingAllowed*

Sets the sleeping behaviour of the body.

Variants:
    1:
        - `Arguments`:
            - allowed: <boolean> True if the body is allowed to sleep or false
              if not.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.55. setType                                            *Body:setType*

Sets a new body type.

Variants:
    1:
        - `Arguments`:
            - type: <BodyType> The new type.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.56. setUserData                                    *Body:setUserData*

Associates a Lua value with the Body.

To delete the reference, explicitly pass nil.

Use this function in one thread only.

Variants:
    1:
        - `Arguments`:
            - value: <value> The Lua value to associate with the Body.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.57. setX                                                  *Body:setX*

Set the x position of the body.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x position.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.1.58. setY                                                  *Body:setY*

Set the y position of the body.

Variants:
    1:
        - `Arguments`:
            - y: <number> The y position.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.2. ChainShape               *love-ChainShape* *love.physics-ChainShape*

A ChainShape consists of multiple line segments. It can be used to create the
boundaries of your terrain. The shape does not have volume and can only
collide with PolygonShape and CircleShape.

Unlike the PolygonShape, the ChainShape does not have a vertices limit or has
to form a convex shape, but self intersections are not supported.

Constructors: 
    - newChainShape                               |love.physics.newChainShape|

Supertypes: 
    - Shape                                                       |love-Shape|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getChildEdge                                   |ChainShape:getChildEdge|
    - getPoint                                           |ChainShape:getPoint|
    - getPoints                                         |ChainShape:getPoints|
    - getVertexCount                               |ChainShape:getVertexCount|
    - setNextVertex                                 |ChainShape:setNextVertex|
    - setPreviousVertex                         |ChainShape:setPreviousVertex|
    - computeAABB                                          |Shape:computeAABB|
    - computeMass                                          |Shape:computeMass|
    - getChildCount                                      |Shape:getChildCount|
    - getRadius                                              |Shape:getRadius|
    - getType                                                  |Shape:getType|
    - rayCast                                                  |Shape:rayCast|
    - testPoint                                              |Shape:testPoint|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.2.1. getChildEdge                             *ChainShape:getChildEdge*

Returns a child of the shape as an EdgeShape.

Variants:
    1:
        - `Arguments`:
            - index: <number> The index of the child.
        - `Returns`:
            - EdgeShape: <number> The child as an EdgeShape.

------------------------------------------------------------------------------
2.11.2.2.2. getPoint                                     *ChainShape:getPoint*

Returns a point of the shape.

Variants:
    1:
        - `Arguments`:
            - index: <number> The index of the point to return.
        - `Returns`:
            - x: <number> The x-coordinate of the point.
            - y: <number> The y-coordinate of the point.

------------------------------------------------------------------------------
2.11.2.2.3. getPoints                                   *ChainShape:getPoints*

Returns all points of the shape.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x1: <number> The x-coordinate of the first point.
            - y1: <number> The y-coordinate of the first point.
            - x2: <number> The x-coordinate of the second point.
            - y2: <number> The y-coordinate of the second point.
            - ...: <number> Additional x and y values.

------------------------------------------------------------------------------
2.11.2.2.4. getVertexCount                         *ChainShape:getVertexCount*

Returns the number of vertices the shape has.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - count: <number> The number of vertices.

------------------------------------------------------------------------------
2.11.2.2.5. setNextVertex                           *ChainShape:setNextVertex*

Sets a vertex that establishes a connection to the next shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of the vertex.
            - y: <number> The y component of the vertex.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.2.6. setPreviousVertex                   *ChainShape:setPreviousVertex*

Sets a vertex that establishes a connection to the previous shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of the vertex.
            - y: <number> The y component of the vertex.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.3. CircleShape            *love-CircleShape* *love.physics-CircleShape*

Circle extends Shape and adds a radius and a local position.

Constructors: 
    - newCircleShape                             |love.physics.newCircleShape|

Supertypes: 
    - Shape                                                       |love-Shape|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getPoint                                          |CircleShape:getPoint|
    - getRadius                                        |CircleShape:getRadius|
    - setPoint                                          |CircleShape:setPoint|
    - setRadius                                        |CircleShape:setRadius|
    - computeAABB                                          |Shape:computeAABB|
    - computeMass                                          |Shape:computeMass|
    - getChildCount                                      |Shape:getChildCount|
    - getRadius                                              |Shape:getRadius|
    - getType                                                  |Shape:getType|
    - rayCast                                                  |Shape:rayCast|
    - testPoint                                              |Shape:testPoint|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.3.1. getPoint                                    *CircleShape:getPoint*

Gets the center point of the circle shape.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x-component of the center point of the circle.
            - y: <number> The y-component of the center point of the circle.

------------------------------------------------------------------------------
2.11.2.3.2. getRadius                                  *CircleShape:getRadius*

Gets the radius of the circle shape.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - radius: <number> The radius of the circle.

------------------------------------------------------------------------------
2.11.2.3.3. setPoint                                    *CircleShape:setPoint*

Sets the location of the center of the circle shape.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x-component of the new center point of the
              circle.
            - y: <number> The y-component of the new center point of the
              circle.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.3.4. setRadius                                  *CircleShape:setRadius*

Sets the radius of the circle.

Variants:
    1:
        - `Arguments`:
            - radius: <number> The radius of the circle.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.4. Contact                        *love-Contact* *love.physics-Contact*

Contacts are objects created to manage collisions in worlds.

Constructors: None

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getFixtures                                        |Contact:getFixtures|
    - getFriction                                        |Contact:getFriction|
    - getNormal                                            |Contact:getNormal|
    - getPositions                                      |Contact:getPositions|
    - getRestitution                                  |Contact:getRestitution|
    - isEnabled                                            |Contact:isEnabled|
    - isTouching                                          |Contact:isTouching|
    - resetFriction                                    |Contact:resetFriction|
    - resetRestitution                              |Contact:resetRestitution|
    - setEnabled                                          |Contact:setEnabled|
    - setFriction                                        |Contact:setFriction|
    - setRestitution                                  |Contact:setRestitution|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.4.1. getFixtures                                  *Contact:getFixtures*

Gets the two Fixtures that hold the shapes that are in contact.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - fixtureA: <Fixture> The first Fixture.
            - fixtureB: <Fixture> The second Fixture.

------------------------------------------------------------------------------
2.11.2.4.2. getFriction                                  *Contact:getFriction*

Get the friction between two shapes that are in contact.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - friction: <number> The friction of the contact.

------------------------------------------------------------------------------
2.11.2.4.3. getNormal                                      *Contact:getNormal*

Get the normal vector between two shapes that are in contact.

This function returns the coordinates of a unit vector that points from the
first shape to the second.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - nx: <number> The x component of the normal vector.
            - ny: <number> The y component of the normal vector.

------------------------------------------------------------------------------
2.11.2.4.4. getPositions                                *Contact:getPositions*

Returns the contact points of the two colliding fixtures. There can be one or
two points.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x1: <number> The x coordinate of the first contact point.
            - y1: <number> The y coordinate of the first contact point.
            - x2: <number> The x coordinate of the second contact point.
            - y2: <number> The y coordinate of the second contact point.

------------------------------------------------------------------------------
2.11.2.4.5. getRestitution                            *Contact:getRestitution*

Get the restitution between two shapes that are in contact.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - restitution: <number> The restitution between the two shapes.

------------------------------------------------------------------------------
2.11.2.4.6. isEnabled                                      *Contact:isEnabled*

Returns whether the contact is enabled. The collision will be ignored if a
contact gets disabled in the post solve callback.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> True if enabled, false otherwise.

------------------------------------------------------------------------------
2.11.2.4.7. isTouching                                    *Contact:isTouching*

Returns whether the two colliding fixtures are touching each other.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - touching: <boolean> True if they touch or false if not.

------------------------------------------------------------------------------
2.11.2.4.8. resetFriction                              *Contact:resetFriction*

Resets the contact friction to the mixture value of both fixtures.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.4.9. resetRestitution                        *Contact:resetRestitution*

Resets the contact restitution to the mixture value of both fixtures.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.4.10. setEnabled                                   *Contact:setEnabled*

Enables or disables the contact.

Variants:
    1:
        - `Arguments`:
            - enabled: <boolean> True to enable or false to disable.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.4.11. setFriction                                 *Contact:setFriction*

Sets the contact friction.

Variants:
    1:
        - `Arguments`:
            - friction: <number> The contact friction.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.4.12. setRestitution                           *Contact:setRestitution*

Sets the contact restitution.

Variants:
    1:
        - `Arguments`:
            - restitution: <number> The contact restitution.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.5. EdgeShape                  *love-EdgeShape* *love.physics-EdgeShape*

A EdgeShape is a line segment. They can be used to create the boundaries of
your terrain. The shape does not have volume and can only collide with
PolygonShape and CircleShape.

Constructors: 
    - newEdgeShape                                 |love.physics.newEdgeShape|

Supertypes: 
    - Shape                                                       |love-Shape|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getPoints                                          |EdgeShape:getPoints|
    - computeAABB                                          |Shape:computeAABB|
    - computeMass                                          |Shape:computeMass|
    - getChildCount                                      |Shape:getChildCount|
    - getRadius                                              |Shape:getRadius|
    - getType                                                  |Shape:getType|
    - rayCast                                                  |Shape:rayCast|
    - testPoint                                              |Shape:testPoint|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.5.1. getPoints                                    *EdgeShape:getPoints*

Returns the local coordinates of the edge points.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x1: <number> The x component of the first vertex.
            - y1: <number> The y component of the first vertex.
            - x2: <number> The x component of the second vertex.
            - y2: <number> The y component of the second vertex.

------------------------------------------------------------------------------
2.11.2.6. DistanceJoint      *love-DistanceJoint* *love.physics-DistanceJoint*

Keeps two bodies at the same distance.

Constructors: 
    - newDistanceJoint                         |love.physics.newDistanceJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getDampingRatio                          |DistanceJoint:getDampingRatio|
    - getFrequency                                |DistanceJoint:getFrequency|
    - getLength                                      |DistanceJoint:getLength|
    - setDampingRatio                          |DistanceJoint:setDampingRatio|
    - setFrequency                                |DistanceJoint:setFrequency|
    - setLength                                      |DistanceJoint:setLength|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.6.1. getDampingRatio                    *DistanceJoint:getDampingRatio*

Gets the damping ratio.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ratio: <number> The damping ratio.

------------------------------------------------------------------------------
2.11.2.6.2. getFrequency                          *DistanceJoint:getFrequency*

Gets the response speed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - Hz: <number> The response speed.

------------------------------------------------------------------------------
2.11.2.6.3. getLength                                *DistanceJoint:getLength*

Gets the equilibrium distance between the two Bodies.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - l: <number> The length between the two Bodies.

------------------------------------------------------------------------------
2.11.2.6.4. setDampingRatio                    *DistanceJoint:setDampingRatio*

Sets the damping ratio.

Variants:
    1:
        - `Arguments`:
            - ratio: <number> The damping ratio.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.6.5. setFrequency                          *DistanceJoint:setFrequency*

Sets the response speed.

Variants:
    1:
        - `Arguments`:
            - Hz: <number> The response speed.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.6.6. setLength                                *DistanceJoint:setLength*

Sets the equilibrium distance between the two Bodies.

Variants:
    1:
        - `Arguments`:
            - l: <number> The length between the two Bodies.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7. Fixture                        *love-Fixture* *love.physics-Fixture*

Fixtures attach shapes to bodies.

Constructors: 
    - newFixture                                     |love.physics.newFixture|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - destroy                                                |Fixture:destroy|
    - getBody                                                |Fixture:getBody|
    - getBoundingBox                                  |Fixture:getBoundingBox|
    - getCategory                                        |Fixture:getCategory|
    - getDensity                                          |Fixture:getDensity|
    - getFilterData                                    |Fixture:getFilterData|
    - getFriction                                        |Fixture:getFriction|
    - getGroupIndex                                    |Fixture:getGroupIndex|
    - getMask                                                |Fixture:getMask|
    - getMassData                                        |Fixture:getMassData|
    - getRestitution                                  |Fixture:getRestitution|
    - getShape                                              |Fixture:getShape|
    - getUserData                                        |Fixture:getUserData|
    - isDestroyed                                        |Fixture:isDestroyed|
    - isSensor                                              |Fixture:isSensor|
    - rayCast                                                |Fixture:rayCast|
    - setCategory                                        |Fixture:setCategory|
    - setDensity                                          |Fixture:setDensity|
    - setFilterData                                    |Fixture:setFilterData|
    - setFriction                                        |Fixture:setFriction|
    - setGroupIndex                                    |Fixture:setGroupIndex|
    - setMask                                                |Fixture:setMask|
    - setRestitution                                  |Fixture:setRestitution|
    - setSensor                                            |Fixture:setSensor|
    - setUserData                                        |Fixture:setUserData|
    - testPoint                                            |Fixture:testPoint|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.7.1. destroy                                          *Fixture:destroy*

Destroys the fixture

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.2. getBody                                          *Fixture:getBody*

Returns the body to which the fixture is attached.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - body: <Body> The parent body.

------------------------------------------------------------------------------
2.11.2.7.3. getBoundingBox                            *Fixture:getBoundingBox*

Returns the points of the fixture bounding box. In case the fixture has
multiple children a 1-based index can be specified. For example, a fixture
will have multiple children with a chain shape.

Variants:
    1:
        - `Arguments`:
            - index: <number> A bounding box of the fixture.
        - `Returns`:
            - topLeftX: <number> The x position of the top-left point.
            - topLeftY: <number> The y position of the top-left point.
            - bottomRightX: <number> The x position of the bottom-right point.
            - bottomRightY: <number> The y position of the bottom-right point.

------------------------------------------------------------------------------
2.11.2.7.4. getCategory                                  *Fixture:getCategory*

Returns the categories the fixture belongs to.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - category1: <number> The first category.
            - category2: <number> The second category.
            - ...: <number> Additional categories.

------------------------------------------------------------------------------
2.11.2.7.5. getDensity                                    *Fixture:getDensity*

Returns the density of the fixture.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - density: <number> The fixture density in kilograms per square
              meter.

------------------------------------------------------------------------------
2.11.2.7.6. getFilterData                              *Fixture:getFilterData*

Returns the filter data of the fixture. Categories and masks are encoded as
the bits of a 16-bit integer.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - categories: <number> The categories as an integer from 0 to
              65535.
            - mask: <number> The mask as an integer from 0 to 65535.
            - group: <number> The group as an integer from -32768 to 32767.

------------------------------------------------------------------------------
2.11.2.7.7. getFriction                                  *Fixture:getFriction*

Returns the friction of the fixture.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - friction: <number> The fixture friction.

------------------------------------------------------------------------------
2.11.2.7.8. getGroupIndex                              *Fixture:getGroupIndex*

Returns the group the fixture belongs to. Fixtures with the same group will
always collide if the group is positive or never collide if it's negative. The
group zero means no group.

The groups range from -32768 to 32767.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - group: <number> The group of the fixture.

------------------------------------------------------------------------------
2.11.2.7.9. getMask                                          *Fixture:getMask*

Returns the category mask of the fixture.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - mask1: <number> The first category selected by the mask.
            - mask2: <number> The second category selected by the mask.
            - ...: <number> Additional categories selected by the mask.

------------------------------------------------------------------------------
2.11.2.7.10. getMassData                                 *Fixture:getMassData*

Returns the mass, its center and the rotational inertia.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x position of the center of mass.
            - y: <number> The y position of the center of mass.
            - mass: <number> The mass of the fixture.
            - inertia: <number> The rotational inertia.

------------------------------------------------------------------------------
2.11.2.7.11. getRestitution                           *Fixture:getRestitution*

Returns the restitution of the fixture.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - restitution: <number> The fixture restitution.

------------------------------------------------------------------------------
2.11.2.7.12. getShape                                       *Fixture:getShape*

Returns the shape of the fixture. This shape is a reference to the actual data
used in the simulation. It's possible to change its values between timesteps.

Do not call any functions on this shape after the parent fixture has been
destroyed. This shape will point to an invalid memory address and likely cause
crashes if you interact further with it.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - shape: <Shape> The fixture's shape.

------------------------------------------------------------------------------
2.11.2.7.13. getUserData                                 *Fixture:getUserData*

Returns the Lua value associated with this fixture.

Use this function in one thread only.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - value: <mixed> The Lua value associated with the fixture.

------------------------------------------------------------------------------
2.11.2.7.14. isDestroyed                                 *Fixture:isDestroyed*

Gets whether the Fixture is destroyed. Destroyed fixtures cannot be used.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - destroyed: <boolean> Whether the Fixture is destroyed.

------------------------------------------------------------------------------
2.11.2.7.15. isSensor                                       *Fixture:isSensor*

Returns whether the fixture is a sensor.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - sensor: <boolean> If the fixture is a sensor.

------------------------------------------------------------------------------
2.11.2.7.16. rayCast                                         *Fixture:rayCast*

Casts a ray against the shape of the fixture and returns the surface normal
vector and the line position where the ray hit. If the ray missed the shape,
nil will be returned.

The ray starts on the first point of the input line and goes towards the
second point of the line. The fourth argument is the maximum distance the ray
is going to travel as a scale factor of the input line length.

The childIndex parameter is used to specify which child of a parent shape,
such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is
the first edge on the chain. Ray casting a parent shape will only test the
child specified so if you want to test every shape of the parent, you must
loop through all of its children.

The world position of the impact can be calculated by multiplying the line
vector with the third return value and adding it to the line starting point.

hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction

Variants:
    1:
        - `Arguments`:
            - x1: <number> The x position of the ray starting point.
            - y1: <number> The y position of the ray starting point.
            - x2: <number> The x position of the ray end point.
            - y1: <number> The y position of the ray end point.
            - maxFraction: <number> The maximum distance the ray is going to
              travel as a number from 0 to 1.
            - childIndex: <number> The index of the child the ray gets cast
              against.
        - `Returns`:
            - x: <number> The x position where the ray intersects with the
              shape.
            - y: <number> The y position where the ray intersects with the
              shape.
            - fraction: <number> The position on the input vector where the
              intersection happened as a number from 0 to 1.

------------------------------------------------------------------------------
2.11.2.7.17. setCategory                                 *Fixture:setCategory*

Sets the categories the fixture belongs to. There can be up to 16 categories
represented as a number from 1 to 16.

Variants:
    1:
        - `Arguments`:
            - category1: <number> The first category.
            - category2: <number> The second category.
            - ...: <number> Additional categories.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.18. setDensity                                   *Fixture:setDensity*

Sets the density of the fixture. Call Body:resetMassData if this needs to take
effect immediately.

Variants:
    1:
        - `Arguments`:
            - density: <number> The fixture density in kilograms per square
              meter.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.19. setFilterData                             *Fixture:setFilterData*

Sets the filter data of the fixture.

Groups, categories, and mask can be used to define the collision behaviour of
the fixture.

If two fixtures are in the same group they either always collide if the group
is positive, or never collide if it's negative. Is the group zero or they do
not match, then the contact filter checks if the fixtures select a category of
the other fixture with their masks. The fixtures do not collide if that's not
the case. If they do have each others categories selected, the return value of
the custom contact filter will be used. They always collide if none was set.

There can be up to 16 categories. Categories and masks are encoded as the bits
of a 16-bit integer.

Variants:
    1:
        - `Arguments`:
            - categories: <number> The categories as an integer from 0 to
              65535.
            - mask: <number> The mask as an integer from 0 to 65535.
            - group: <number> The group as an integer from -32768 to 32767.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.20. setFriction                                 *Fixture:setFriction*

Sets the friction of the fixture.

Variants:
    1:
        - `Arguments`:
            - friction: <number> The fixture friction.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.21. setGroupIndex                             *Fixture:setGroupIndex*

Sets the group the fixture belongs to. Fixtures with the same group will
always collide if the group is positive or never collide if it's negative. The
group zero means no group.

The groups range from -32768 to 32767.

Variants:
    1:
        - `Arguments`:
            - group: <number> The group as an integer from -32768 to 32767.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.22. setMask                                         *Fixture:setMask*

Sets the category mask of the fixture. There can be up to 16 categories
represented as a number from 1 to 16.

This fixture will collide with the fixtures that are in the selected
categories if the other fixture also has a category of this fixture selected.

Variants:
    1:
        - `Arguments`:
            - mask1: <number> The first category.
            - mask2: <number> The second category.
            - ...: <number> Additional categories.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.23. setRestitution                           *Fixture:setRestitution*

Sets the restitution of the fixture.

Variants:
    1:
        - `Arguments`:
            - restitution: <number> The fixture restitution.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.24. setSensor                                     *Fixture:setSensor*

Sets whether the fixture should act as a sensor.

Sensor do not produce collisions responses, but the begin and end callbacks
will still be called for this fixture.

Variants:
    1:
        - `Arguments`:
            - sensor: <boolean> The sensor status.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.25. setUserData                                 *Fixture:setUserData*

Associates a Lua value with the fixture.

Use this function in one thread only.

Variants:
    1:
        - `Arguments`:
            - value: <mixed> The Lua value associated with the fixture.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.7.26. testPoint                                     *Fixture:testPoint*

Checks if a point is inside the shape of the fixture.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x position of the point.
            - y: <number> The y position of the point.
        - `Returns`:
            - isInside: <boolean> True if the point is inside or false if it
              is outside.

------------------------------------------------------------------------------
2.11.2.8. FrictionJoint      *love-FrictionJoint* *love.physics-FrictionJoint*

A FrictionJoint applies friction to a body.

Constructors: 
    - newFrictionJoint                         |love.physics.newFrictionJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getMaxForce                                  |FrictionJoint:getMaxForce|
    - getMaxTorque                                |FrictionJoint:getMaxTorque|
    - setMaxForce                                  |FrictionJoint:setMaxForce|
    - setMaxTorque                                |FrictionJoint:setMaxTorque|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.8.1. getMaxForce                            *FrictionJoint:getMaxForce*

Gets the maximum friction force in Newtons.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - force: <number> Maximum force in Newtons.

------------------------------------------------------------------------------
2.11.2.8.2. getMaxTorque                          *FrictionJoint:getMaxTorque*

Gets the maximum friction torque in Newton-meters.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - torque: <number> Maximum torque in Newton-meters.

------------------------------------------------------------------------------
2.11.2.8.3. setMaxForce                            *FrictionJoint:setMaxForce*

Sets the maximum friction force in Newtons.

Variants:
    1:
        - `Arguments`:
            - maxForce: <number> Max force in Newtons.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.8.4. setMaxTorque                          *FrictionJoint:setMaxTorque*

Sets the maximum friction torque in Newton-meters.

Variants:
    1:
        - `Arguments`:
            - torque: <number> Maximum torque in Newton-meters.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.9. GearJoint                  *love-GearJoint* *love.physics-GearJoint*

Keeps bodies together in such a way that they act like gears.

Constructors: 
    - newGearJoint                                 |love.physics.newGearJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getJoints                                          |GearJoint:getJoints|
    - getRatio                                            |GearJoint:getRatio|
    - setRatio                                            |GearJoint:setRatio|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.9.1. getJoints                                    *GearJoint:getJoints*

Get the Joints connected by this GearJoint.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - joint1: <Joint> The first connected Joint.
            - joint2: <Joint> The second connected Joint.

------------------------------------------------------------------------------
2.11.2.9.2. getRatio                                      *GearJoint:getRatio*

Get the ratio of a gear joint.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ratio: <number> The ratio of the joint.

------------------------------------------------------------------------------
2.11.2.9.3. setRatio                                      *GearJoint:setRatio*

Set the ratio of a gear joint.

Variants:
    1:
        - `Arguments`:
            - ratio: <number> The new ratio of the joint.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.10. Joint                             *love-Joint* *love.physics-Joint*

Attach multiple bodies together to interact in unique ways.

Constructors: None

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: 
    - DistanceJoint                                       |love-DistanceJoint|
    - FrictionJoint                                       |love-FrictionJoint|
    - GearJoint                                               |love-GearJoint|
    - MotorJoint                                             |love-MotorJoint|
    - MouseJoint                                             |love-MouseJoint|
    - PrismaticJoint                                     |love-PrismaticJoint|
    - PulleyJoint                                           |love-PulleyJoint|
    - RevoluteJoint                                       |love-RevoluteJoint|
    - RopeJoint                                               |love-RopeJoint|
    - WeldJoint                                               |love-WeldJoint|
    - WheelJoint                                             |love-WheelJoint|

Functions: 
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.10.1. destroy                                           *Joint:destroy*

Explicitly destroys the Joint. When you don't have time to wait for garbage
collection, this function may be used to free the object immediately, but note
that an error will occur if you attempt to use the object after calling this
function.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.10.2. getAnchors                                     *Joint:getAnchors*

Get the anchor points of the joint.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x1: <number> The x component of the anchor on Body 1.
            - y1: <number> The y component of the anchor on Body 1.
            - x2: <number> The x component of the anchor on Body 2.
            - y2: <number> The y component of the anchor on Body 2.

------------------------------------------------------------------------------
2.11.2.10.3. getBodies                                       *Joint:getBodies*

Gets the bodies that the Joint is attached to.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - bodyA: <Body> The first Body.
            - bodyB: <Body> The second Body.

------------------------------------------------------------------------------
2.11.2.10.4. getCollideConnected                   *Joint:getCollideConnected*

Gets whether the connected Bodies collide.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - c: <boolean> True if they collide, false otherwise.

------------------------------------------------------------------------------
2.11.2.10.5. getReactionForce                         *Joint:getReactionForce*

Gets the reaction force on Body 2 at the joint anchor.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x component of the force.
            - y: <number> The y component of the force.

------------------------------------------------------------------------------
2.11.2.10.6. getReactionTorque                       *Joint:getReactionTorque*

Returns the reaction torque on the second body.

Variants:
    1:
        - `Arguments`:
            - invdt: <number> How long the force applies. Usually the inverse
              time step or 1/dt.
        - `Returns`:
            - torque: <number> The reaction torque on the second body.

------------------------------------------------------------------------------
2.11.2.10.7. getType                                           *Joint:getType*

Gets an string representing the type.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - type: <JointType> A string with the name of the Joint type.

------------------------------------------------------------------------------
2.11.2.10.8. getUserData                                   *Joint:getUserData*

Returns the Lua value associated with this Joint.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - value: <mixed> The Lua value associated with the Joint.

------------------------------------------------------------------------------
2.11.2.10.9. isDestroyed                                   *Joint:isDestroyed*

Gets whether the Joint is destroyed. Destroyed joints cannot be used.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - destroyed: <boolean> Whether the Joint is destroyed.

------------------------------------------------------------------------------
2.11.2.10.10. setUserData                                  *Joint:setUserData*

Associates a Lua value with the Joint.

To delete the reference, explicitly pass nil.

Variants:
    1:
        - `Arguments`:
            - value: <mixed> The Lua value to associate with the Joint.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.11. MotorJoint              *love-MotorJoint* *love.physics-MotorJoint*

Controls the relative motion between two Bodies. Position and rotation offsets
can be specified, as well as the maximum motor force and torque that will be
be applied to reach the target offsets.

Constructors: 
    - newMotorJoint                               |love.physics.newMotorJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getAngularOffset                           |MotorJoint:getAngularOffset|
    - getLinearOffset                             |MotorJoint:getLinearOffset|
    - setAngularOffset                           |MotorJoint:setAngularOffset|
    - setLinearOffset                             |MotorJoint:setLinearOffset|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.11.1. getAngularOffset                    *MotorJoint:getAngularOffset*

Gets the target angluar offset between the two Bodies the Joint is attached
to.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - angularoffset: <number> The target angular offset in radians:
              the second body's angle minus the first body's angle.

------------------------------------------------------------------------------
2.11.2.11.2. getLinearOffset                      *MotorJoint:getLinearOffset*

Gets the target linear offset between the two Bodies the Joint is attached to.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x component of the target linear offset,
              relative to the first Body.
            - y: <number> The y component of the target linear offset,
              relative to the first Body.

------------------------------------------------------------------------------
2.11.2.11.3. setAngularOffset                    *MotorJoint:setAngularOffset*

Sets the target angluar offset between the two Bodies the Joint is attached
to.

Variants:
    1:
        - `Arguments`:
            - angularoffset: <number> The target angular offset in radians:
              the second body's angle minus the first body's angle.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.11.4. setLinearOffset                      *MotorJoint:setLinearOffset*

Sets the target linear offset between the two Bodies the Joint is attached to.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of the target linear offset,
              relative to the first Body.
            - y: <number> The y component of the target linear offset,
              relative to the first Body.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.12. MouseJoint              *love-MouseJoint* *love.physics-MouseJoint*

For controlling objects with the mouse.

Constructors: 
    - newMouseJoint                               |love.physics.newMouseJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getDampingRatio                             |MouseJoint:getDampingRatio|
    - getFrequency                                   |MouseJoint:getFrequency|
    - getMaxForce                                     |MouseJoint:getMaxForce|
    - getTarget                                         |MouseJoint:getTarget|
    - setDampingRatio                             |MouseJoint:setDampingRatio|
    - setFrequency                                   |MouseJoint:setFrequency|
    - setMaxForce                                     |MouseJoint:setMaxForce|
    - setTarget                                         |MouseJoint:setTarget|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.12.1. getDampingRatio                      *MouseJoint:getDampingRatio*

Returns the damping ratio.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ratio: <number> The new damping ratio.

------------------------------------------------------------------------------
2.11.2.12.2. getFrequency                            *MouseJoint:getFrequency*

Returns the frequency.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - freq: <number> The frequency in hertz.

------------------------------------------------------------------------------
2.11.2.12.3. getMaxForce                              *MouseJoint:getMaxForce*

Gets the highest allowed force.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - f: <number> The max allowed force.

------------------------------------------------------------------------------
2.11.2.12.4. getTarget                                  *MouseJoint:getTarget*

Gets the target point.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x component of the target.
            - y: <number> The x component of the target.

------------------------------------------------------------------------------
2.11.2.12.5. setDampingRatio                      *MouseJoint:setDampingRatio*

Sets a new damping ratio.

Variants:
    1:
        - `Arguments`:
            - ratio: <number> The new damping ratio.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.12.6. setFrequency                            *MouseJoint:setFrequency*

Sets a new frequency.

Variants:
    1:
        - `Arguments`:
            - freq: <number> The new frequency in hertz.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.12.7. setMaxForce                              *MouseJoint:setMaxForce*

Sets the highest allowed force.

Variants:
    1:
        - `Arguments`:
            - f: <number> The max allowed force.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.12.8. setTarget                                  *MouseJoint:setTarget*

Sets the target point.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of the target.
            - y: <number> The y component of the target.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.13. PolygonShape        *love-PolygonShape* *love.physics-PolygonShape*

Polygon is a convex polygon with up to 8 sides.

Constructors: 
    - newPolygonShape                           |love.physics.newPolygonShape|
    - newRectangleShape                       |love.physics.newRectangleShape|

Supertypes: 
    - Shape                                                       |love-Shape|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getPoints                                       |PolygonShape:getPoints|
    - computeAABB                                          |Shape:computeAABB|
    - computeMass                                          |Shape:computeMass|
    - getChildCount                                      |Shape:getChildCount|
    - getRadius                                              |Shape:getRadius|
    - getType                                                  |Shape:getType|
    - rayCast                                                  |Shape:rayCast|
    - testPoint                                              |Shape:testPoint|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.13.1. getPoints                                *PolygonShape:getPoints*

Get the local coordinates of the polygon's vertices.

This function has a variable number of return values. It can be used in a
nested fashion with love.graphics.polygon.

This function may have up to 16 return values, since it returns two values for
each vertex in the polygon. In other words, it can return the coordinates of
up to 8 points.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x1: <number> The x component of the first vertex.
            - y1: <number> The y component of the first vertex.
            - x2: <number> The x component of the second vertex.
            - y2: <number> The y component of the second vertex.
            - ...: <number> Additional x and y values.

------------------------------------------------------------------------------
2.11.2.14. PrismaticJoint  *love-PrismaticJoint* *love.physics-PrismaticJoint*

Restricts relative motion between Bodies to one shared axis.

Constructors: 
    - newPrismaticJoint                       |love.physics.newPrismaticJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - setLimitsEnabled                       |PrismaticJoint:setLimitsEnabled|
    - setMotorEnabled                         |PrismaticJoint:setMotorEnabled|
    - getJointSpeed                             |PrismaticJoint:getJointSpeed|
    - getJointTranslation                 |PrismaticJoint:getJointTranslation|
    - getLimits                                     |PrismaticJoint:getLimits|
    - getLowerLimit                             |PrismaticJoint:getLowerLimit|
    - getMaxMotorForce                       |PrismaticJoint:getMaxMotorForce|
    - getMotorForce                             |PrismaticJoint:getMotorForce|
    - getMotorSpeed                             |PrismaticJoint:getMotorSpeed|
    - getUpperLimit                             |PrismaticJoint:getUpperLimit|
    - hasLimitsEnabled                       |PrismaticJoint:hasLimitsEnabled|
    - isMotorEnabled                           |PrismaticJoint:isMotorEnabled|
    - setLimits                                     |PrismaticJoint:setLimits|
    - setLowerLimit                             |PrismaticJoint:setLowerLimit|
    - setMaxMotorForce                       |PrismaticJoint:setMaxMotorForce|
    - setMotorSpeed                             |PrismaticJoint:setMotorSpeed|
    - setUpperLimit                             |PrismaticJoint:setUpperLimit|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.14.1. setLimitsEnabled                *PrismaticJoint:setLimitsEnabled*

Enables or disables the limits of the joint.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True to enable, false to disable.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.14.2. setMotorEnabled                  *PrismaticJoint:setMotorEnabled*

Starts or stops the joint motor.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True to enable, false to disable.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.14.3. getJointSpeed                      *PrismaticJoint:getJointSpeed*

Get the current joint angle speed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - s: <number> Joint angle speed in meters/second.

------------------------------------------------------------------------------
2.11.2.14.4. getJointTranslation          *PrismaticJoint:getJointTranslation*

Get the current joint translation.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - t: <number> Joint translation, usually in meters.

------------------------------------------------------------------------------
2.11.2.14.5. getLimits                              *PrismaticJoint:getLimits*

Gets the joint limits.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - lower: <number> The lower limit, usually in meters.
            - upper: <number> The upper limit, usually in meters.

------------------------------------------------------------------------------
2.11.2.14.6. getLowerLimit                      *PrismaticJoint:getLowerLimit*

Gets the lower limit.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - lower: <number> The lower limit, usually in meters.

------------------------------------------------------------------------------
2.11.2.14.7. getMaxMotorForce                *PrismaticJoint:getMaxMotorForce*

Gets the maximum motor force.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - f: <number> The maximum motor force, usually in N.

------------------------------------------------------------------------------
2.11.2.14.8. getMotorForce                      *PrismaticJoint:getMotorForce*

Get the current motor force.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - f: <number> The current motor force, usually in N.

------------------------------------------------------------------------------
2.11.2.14.9. getMotorSpeed                      *PrismaticJoint:getMotorSpeed*

Gets the motor speed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - s: <number> The motor speed, usually in meters per second.

------------------------------------------------------------------------------
2.11.2.14.10. getUpperLimit                     *PrismaticJoint:getUpperLimit*

Gets the upper limit.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - upper: <number> The upper limit, usually in meters.

------------------------------------------------------------------------------
2.11.2.14.11. hasLimitsEnabled               *PrismaticJoint:hasLimitsEnabled*

Checks whether the limits are enabled.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> True if enabled, false otherwise.

------------------------------------------------------------------------------
2.11.2.14.12. isMotorEnabled                   *PrismaticJoint:isMotorEnabled*

Checks whether the motor is enabled.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> True if enabled, false if disabled.

------------------------------------------------------------------------------
2.11.2.14.13. setLimits                             *PrismaticJoint:setLimits*

Sets the limits.

Variants:
    1:
        - `Arguments`:
            - lower: <number> The lower limit, usually in meters.
            - upper: <number> The upper limit, usually in meters.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.14.14. setLowerLimit                     *PrismaticJoint:setLowerLimit*

Sets the lower limit.

Variants:
    1:
        - `Arguments`:
            - lower: <number> The lower limit, usually in meters.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.14.15. setMaxMotorForce               *PrismaticJoint:setMaxMotorForce*

Set the maximum motor force.

Variants:
    1:
        - `Arguments`:
            - f: <number> The maximum motor force, usually in N.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.14.16. setMotorSpeed                     *PrismaticJoint:setMotorSpeed*

Sets the motor speed.

Variants:
    1:
        - `Arguments`:
            - s: <number> The motor speed, usually in meters per second.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.14.17. setUpperLimit                     *PrismaticJoint:setUpperLimit*

Sets the upper limit.

Variants:
    1:
        - `Arguments`:
            - upper: <number> The upper limit, usually in meters.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.15. PulleyJoint           *love-PulleyJoint* *love.physics-PulleyJoint*

Allows you to simulate bodies connected through pulleys.

Constructors: 
    - newPulleyJoint                             |love.physics.newPulleyJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getConstant                                    |PulleyJoint:getConstant|
    - getGroundAnchors                          |PulleyJoint:getGroundAnchors|
    - getLengthA                                      |PulleyJoint:getLengthA|
    - getLengthB                                      |PulleyJoint:getLengthB|
    - getMaxLengths                                |PulleyJoint:getMaxLengths|
    - getRatio                                          |PulleyJoint:getRatio|
    - setConstant                                    |PulleyJoint:setConstant|
    - setMaxLengths                                |PulleyJoint:setMaxLengths|
    - setRatio                                          |PulleyJoint:setRatio|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.15.1. getConstant                             *PulleyJoint:getConstant*

Get the total length of the rope.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - length: <number> The length of the rope in the joint.

------------------------------------------------------------------------------
2.11.2.15.2. getGroundAnchors                   *PulleyJoint:getGroundAnchors*

Get the ground anchor positions in world coordinates.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - a1x: <number> The x coordinate of the first anchor.
            - a1y: <number> The y coordinate of the first anchor.
            - a2x: <number> The x coordinate of the second anchor.
            - a2y: <number> The y coordinate of the second anchor.

------------------------------------------------------------------------------
2.11.2.15.3. getLengthA                               *PulleyJoint:getLengthA*

Get the current length of the rope segment attached to the first body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - length: <number> The length of the rope segment.

------------------------------------------------------------------------------
2.11.2.15.4. getLengthB                               *PulleyJoint:getLengthB*

Get the current length of the rope segment attached to the second body.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - length: <number> The length of the rope segment.

------------------------------------------------------------------------------
2.11.2.15.5. getMaxLengths                         *PulleyJoint:getMaxLengths*

Get the maximum lengths of the rope segments.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - len1: <number> The maximum length of the first rope segment.
            - len2: <number> The maximum length of the second rope segment.

------------------------------------------------------------------------------
2.11.2.15.6. getRatio                                   *PulleyJoint:getRatio*

Get the pulley ratio.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ratio: <number> The pulley ratio of the joint.

------------------------------------------------------------------------------
2.11.2.15.7. setConstant                             *PulleyJoint:setConstant*

Set the total length of the rope.

Setting a new length for the rope updates the maximum length values of the
joint.

Variants:
    1:
        - `Arguments`:
            - length: <number> The new length of the rope in the joint.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.15.8. setMaxLengths                         *PulleyJoint:setMaxLengths*

Set the maximum lengths of the rope segments.

The physics module also imposes maximum values for the rope segments. If the
parameters exceed these values, the maximum values are set instead of the
requested values.

Variants:
    1:
        - `Arguments`:
            - max1: <number> The new maximum length of the first segment.
            - max2: <number> The new maximum length of the second segment.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.15.9. setRatio                                   *PulleyJoint:setRatio*

Set the pulley ratio.

Variants:
    1:
        - `Arguments`:
            - ratio: <number> The new pulley ratio of the joint.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.16. RevoluteJoint     *love-RevoluteJoint* *love.physics-RevoluteJoint*

Allow two Bodies to revolve around a shared point.

Constructors: 
    - newRevoluteJoint                         |love.physics.newRevoluteJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - setLimitsEnabled                        |RevoluteJoint:setLimitsEnabled|
    - setMotorEnabled                          |RevoluteJoint:setMotorEnabled|
    - getJointAngle                              |RevoluteJoint:getJointAngle|
    - getJointSpeed                              |RevoluteJoint:getJointSpeed|
    - getLimits                                      |RevoluteJoint:getLimits|
    - getLowerLimit                              |RevoluteJoint:getLowerLimit|
    - getMaxMotorTorque                      |RevoluteJoint:getMaxMotorTorque|
    - getMotorSpeed                              |RevoluteJoint:getMotorSpeed|
    - getMotorTorque                            |RevoluteJoint:getMotorTorque|
    - getUpperLimit                              |RevoluteJoint:getUpperLimit|
    - hasLimitsEnabled                        |RevoluteJoint:hasLimitsEnabled|
    - isMotorEnabled                            |RevoluteJoint:isMotorEnabled|
    - setLimits                                      |RevoluteJoint:setLimits|
    - setLowerLimit                              |RevoluteJoint:setLowerLimit|
    - setMaxMotorTorque                      |RevoluteJoint:setMaxMotorTorque|
    - setMotorSpeed                              |RevoluteJoint:setMotorSpeed|
    - setUpperLimit                              |RevoluteJoint:setUpperLimit|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.16.1. setLimitsEnabled                 *RevoluteJoint:setLimitsEnabled*

Enables or disables the joint limits.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True to enable, false to disable.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.16.2. setMotorEnabled                   *RevoluteJoint:setMotorEnabled*

Starts or stops the joint motor.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True to enable, false to disable.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.16.3. getJointAngle                       *RevoluteJoint:getJointAngle*

Get the current joint angle.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - angle: <number> The joint angle in radians.

------------------------------------------------------------------------------
2.11.2.16.4. getJointSpeed                       *RevoluteJoint:getJointSpeed*

Get the current joint angle speed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - s: <number> Joint angle speed in radians/second.

------------------------------------------------------------------------------
2.11.2.16.5. getLimits                               *RevoluteJoint:getLimits*

Gets the joint limits.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - lower: <number> The lower limit, in radians.
            - upper: <number> The upper limit, in radians.

------------------------------------------------------------------------------
2.11.2.16.6. getLowerLimit                       *RevoluteJoint:getLowerLimit*

Gets the lower limit.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - lower: <number> The lower limit, in radians.

------------------------------------------------------------------------------
2.11.2.16.7. getMaxMotorTorque               *RevoluteJoint:getMaxMotorTorque*

Gets the maximum motor force.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - f: <number> The maximum motor force, in Nm.

------------------------------------------------------------------------------
2.11.2.16.8. getMotorSpeed                       *RevoluteJoint:getMotorSpeed*

Gets the motor speed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - s: <number> The motor speed, radians per second.

------------------------------------------------------------------------------
2.11.2.16.9. getMotorTorque                     *RevoluteJoint:getMotorTorque*

Get the current motor force.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - f: <number> The current motor force, in Nm.

------------------------------------------------------------------------------
2.11.2.16.10. getUpperLimit                      *RevoluteJoint:getUpperLimit*

Gets the upper limit.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - upper: <number> The upper limit, in radians.

------------------------------------------------------------------------------
2.11.2.16.11. hasLimitsEnabled                *RevoluteJoint:hasLimitsEnabled*

Checks whether limits are enabled.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> True if enabled, false otherwise.

------------------------------------------------------------------------------
2.11.2.16.12. isMotorEnabled                    *RevoluteJoint:isMotorEnabled*

Checks whether the motor is enabled.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> True if enabled, false if disabled.

------------------------------------------------------------------------------
2.11.2.16.13. setLimits                              *RevoluteJoint:setLimits*

Sets the limits.

Variants:
    1:
        - `Arguments`:
            - lower: <number> The lower limit, in radians.
            - upper: <number> The upper limit, in radians.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.16.14. setLowerLimit                      *RevoluteJoint:setLowerLimit*

Sets the lower limit.

Variants:
    1:
        - `Arguments`:
            - lower: <number> The lower limit, in radians.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.16.15. setMaxMotorTorque              *RevoluteJoint:setMaxMotorTorque*

Set the maximum motor force.

Variants:
    1:
        - `Arguments`:
            - f: <number> The maximum motor force, in Nm.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.16.16. setMotorSpeed                      *RevoluteJoint:setMotorSpeed*

Sets the motor speed.

Variants:
    1:
        - `Arguments`:
            - s: <number> The motor speed, radians per second.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.16.17. setUpperLimit                      *RevoluteJoint:setUpperLimit*

Sets the upper limit.

Variants:
    1:
        - `Arguments`:
            - upper: <number> The upper limit, in radians.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.17. RopeJoint                 *love-RopeJoint* *love.physics-RopeJoint*

The RopeJoint enforces a maximum distance between two points on two bodies. It
has no other effect.

Constructors: 
    - newRopeJoint                                 |love.physics.newRopeJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getMaxLength                                    |RopeJoint:getMaxLength|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.17.1. getMaxLength                             *RopeJoint:getMaxLength*

Gets the maximum length of a RopeJoint.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - maxLength: <number> The maximum length of the RopeJoint.

------------------------------------------------------------------------------
2.11.2.18. Shape                             *love-Shape* *love.physics-Shape*

Shapes are solid 2d geometrical objects used in love.physics.

Shapes are attached to a Body via a Fixture. The Shape object is copied when
this happens. Shape position is relative to Body position.

Constructors: 
    - newChainShape                               |love.physics.newChainShape|
    - newEdgeShape                                 |love.physics.newEdgeShape|
    - newPolygonShape                           |love.physics.newPolygonShape|
    - newRectangleShape                       |love.physics.newRectangleShape|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: 
    - ChainShape                                             |love-ChainShape|
    - CircleShape                                           |love-CircleShape|
    - EdgeShape                                               |love-EdgeShape|
    - PolygonShape                                         |love-PolygonShape|

Functions: 
    - computeAABB                                          |Shape:computeAABB|
    - computeMass                                          |Shape:computeMass|
    - getChildCount                                      |Shape:getChildCount|
    - getRadius                                              |Shape:getRadius|
    - getType                                                  |Shape:getType|
    - rayCast                                                  |Shape:rayCast|
    - testPoint                                              |Shape:testPoint|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.18.1. computeAABB                                   *Shape:computeAABB*

Returns the points of the bounding box for the transformed shape.

Variants:
    1:
        - `Arguments`:
            - tx: <number> The translation of the shape on the x-axis.
            - ty: <number> The translation of the shape on the y-axis.
            - tr: <number> The shape rotation.
            - childIndex: <number> The index of the child to compute the
              bounding box of.
        - `Returns`:
            - topLeftX: <number> The x position of the top-left point.
            - topLeftY: <number> The y position of the top-left point.
            - bottomRightX: <number> The x position of the bottom-right point.
            - bottomRightY: <number> The y position of the bottom-right point.

------------------------------------------------------------------------------
2.11.2.18.2. computeMass                                   *Shape:computeMass*

Computes the mass properties for the shape with the specified density.

Variants:
    1:
        - `Arguments`:
            - density: <number> The shape density.
        - `Returns`:
            - x: <number> The x postition of the center of mass.
            - y: <number> The y postition of the center of mass.
            - mass: <number> The mass of the shape.
            - inertia: <number> The rotational inertia.

------------------------------------------------------------------------------
2.11.2.18.3. getChildCount                               *Shape:getChildCount*

Returns the number of children the shape has.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - count: <number> The number of children.

------------------------------------------------------------------------------
2.11.2.18.4. getRadius                                       *Shape:getRadius*

Gets the radius of the shape.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - radius: <number> The radius of the shape.

------------------------------------------------------------------------------
2.11.2.18.5. getType                                           *Shape:getType*

Gets a string representing the Shape. This function can be useful for
conditional debug drawing.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - type: <ShapeType> The type of the Shape.

------------------------------------------------------------------------------
2.11.2.18.6. rayCast                                           *Shape:rayCast*

Casts a ray against the shape and returns the surface normal vector and the
line position where the ray hit. If the ray missed the shape, nil will be
returned. The Shape can be transformed to get it into the desired position.

The ray starts on the first point of the input line and goes towards the
second point of the line. The fourth argument is the maximum distance the ray
is going to travel as a scale factor of the input line length.

The childIndex parameter is used to specify which child of a parent shape,
such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is
the first edge on the chain. Ray casting a parent shape will only test the
child specified so if you want to test every shape of the parent, you must
loop through all of its children.

The world position of the impact can be calculated by multiplying the line
vector with the third return value and adding it to the line starting point.

hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction

Variants:
    1:
        - `Arguments`:
            - x1: <number> The x position of the input line starting point.
            - y1: <number> The y position of the input line starting point.
            - x2: <number> The x position of the input line end point.
            - y2: <number> The y position of the input line end point.
            - maxFraction: <number> Ray length parameter.
            - tx: <number> The translation of the shape on the x-axis.
            - ty: <number> The translation of the shape on the y-axis.
            - tr: <number> The shape rotation.
            - childIndex: <number> The index of the child the ray gets cast
              against.
        - `Returns`:
            - xn: <number> The x component of the normal vector of the edge
              where the ray hit the shape.
            - yn: <number> The y component of the normal vector of the edge
              where the ray hit the shape.
            - fraction: <number> The position on the input line where the
              intersection happened as a factor of the line length.

------------------------------------------------------------------------------
2.11.2.18.7. testPoint                                       *Shape:testPoint*

Checks whether a point lies inside the shape. This is particularly useful for
mouse interaction with the shapes. By looping through all shapes and testing
the mouse position with this function, we can find which shapes the mouse
touches.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of the point.
            - y: <number> The y component of the point.
        - `Returns`:
            - hit: <boolean> True if inside, false if outside

------------------------------------------------------------------------------
2.11.2.19. WeldJoint                 *love-WeldJoint* *love.physics-WeldJoint*

A WeldJoint essentially glues two bodies together.

Constructors: 
    - newWeldJoint                                 |love.physics.newWeldJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getDampingRatio                              |WeldJoint:getDampingRatio|
    - getFrequency                                    |WeldJoint:getFrequency|
    - setDampingRatio                              |WeldJoint:setDampingRatio|
    - setFrequency                                    |WeldJoint:setFrequency|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.19.1. getDampingRatio                       *WeldJoint:getDampingRatio*

Returns the damping ratio of the joint.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ratio: <number> The damping ratio.

------------------------------------------------------------------------------
2.11.2.19.2. getFrequency                             *WeldJoint:getFrequency*

Returns the frequency.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - freq: <number> The frequency in hertz.

------------------------------------------------------------------------------
2.11.2.19.3. setDampingRatio                       *WeldJoint:setDampingRatio*

The new damping ratio.

Variants:
    1:
        - `Arguments`:
            - ratio: <number> The new damping ratio.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.19.4. setFrequency                             *WeldJoint:setFrequency*

Sets a new frequency.

Variants:
    1:
        - `Arguments`:
            - freq: <number> The new frequency in hertz.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.20. WheelJoint              *love-WheelJoint* *love.physics-WheelJoint*

Restricts a point on the second body to a line on the first body.

Constructors: 
    - newWheelJoint                               |love.physics.newWheelJoint|

Supertypes: 
    - Object                                                     |love-Object|
    - Joint                                                       |love-Joint|

Subtypes: None

Functions: 
    - getJointSpeed                                 |WheelJoint:getJointSpeed|
    - getJointTranslation                     |WheelJoint:getJointTranslation|
    - getLimits                                         |WheelJoint:getLimits|
    - getMaxMotorTorque                         |WheelJoint:getMaxMotorTorque|
    - getMotorSpeed                                 |WheelJoint:getMotorSpeed|
    - getMotorTorque                               |WheelJoint:getMotorTorque|
    - getSpringDampingRatio                 |WheelJoint:getSpringDampingRatio|
    - getSpringFrequency                       |WheelJoint:getSpringFrequency|
    - setMaxMotorTorque                         |WheelJoint:setMaxMotorTorque|
    - setMotorEnabled                             |WheelJoint:setMotorEnabled|
    - setMotorSpeed                                 |WheelJoint:setMotorSpeed|
    - setSpringDampingRatio                 |WheelJoint:setSpringDampingRatio|
    - setSpringFrequency                       |WheelJoint:setSpringFrequency|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|
    - destroy                                                  |Joint:destroy|
    - getAnchors                                            |Joint:getAnchors|
    - getBodies                                              |Joint:getBodies|
    - getCollideConnected                          |Joint:getCollideConnected|
    - getReactionForce                                |Joint:getReactionForce|
    - getReactionTorque                              |Joint:getReactionTorque|
    - getType                                                  |Joint:getType|
    - getUserData                                          |Joint:getUserData|
    - isDestroyed                                          |Joint:isDestroyed|
    - setUserData                                          |Joint:setUserData|

------------------------------------------------------------------------------
2.11.2.20.1. getJointSpeed                          *WheelJoint:getJointSpeed*

Returns the current joint translation speed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - speed: <number> The translation speed of the joint in meters per
              second.

------------------------------------------------------------------------------
2.11.2.20.2. getJointTranslation              *WheelJoint:getJointTranslation*

Returns the current joint translation.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - position: <number> The translation of the joint in meters.

------------------------------------------------------------------------------
2.11.2.20.3. getLimits                                  *WheelJoint:getLimits*

Gets the joint limits.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - lower: <number> The lower limit, usually in meters.
            - upper: <number> The upper limit, usually in meters.

------------------------------------------------------------------------------
2.11.2.20.4. getMaxMotorTorque                  *WheelJoint:getMaxMotorTorque*

Returns the maximum motor torque.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - maxTorque: <number> The maximum torque of the joint motor in
              newton meters.

------------------------------------------------------------------------------
2.11.2.20.5. getMotorSpeed                          *WheelJoint:getMotorSpeed*

Returns the speed of the motor.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - speed: <number> The speed of the joint motor in radians per
              second.

------------------------------------------------------------------------------
2.11.2.20.6. getMotorTorque                        *WheelJoint:getMotorTorque*

Returns the current torque on the motor.

Variants:
    1:
        - `Arguments`:
            - invdt: <number> How long the force applies. Usually the inverse
              time step or 1/dt.
        - `Returns`:
            - torque: <number> The torque on the motor in newton meters.

------------------------------------------------------------------------------
2.11.2.20.7. getSpringDampingRatio          *WheelJoint:getSpringDampingRatio*

Returns the damping ratio.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - ratio: <number> The damping ratio.

------------------------------------------------------------------------------
2.11.2.20.8. getSpringFrequency                *WheelJoint:getSpringFrequency*

Returns the spring frequency.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - freq: <number> The frequency in hertz.

------------------------------------------------------------------------------
2.11.2.20.9. setMaxMotorTorque                  *WheelJoint:setMaxMotorTorque*

Sets a new maximum motor torque.

Variants:
    1:
        - `Arguments`:
            - maxTorque: <number> The new maximum torque for the joint motor
              in newton meters.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.20.10. setMotorEnabled                     *WheelJoint:setMotorEnabled*

Starts and stops the joint motor.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True turns the motor on and false turns it
              off.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.20.11. setMotorSpeed                         *WheelJoint:setMotorSpeed*

Sets a new speed for the motor.

Variants:
    1:
        - `Arguments`:
            - speed: <number> The new speed for the joint motor in radians per
              second.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.20.12. setSpringDampingRatio         *WheelJoint:setSpringDampingRatio*

Sets a new damping ratio.

Variants:
    1:
        - `Arguments`:
            - ratio: <number> The new damping ratio.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.20.13. setSpringFrequency               *WheelJoint:setSpringFrequency*

Sets a new spring frequency.

Variants:
    1:
        - `Arguments`:
            - freq: <number> The new frequency in hertz.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21. World                             *love-World* *love.physics-World*

A world is an object that contains all bodies and joints.

Constructors: 
    - newWorld                                         |love.physics.newWorld|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - destroy                                                  |World:destroy|
    - getBodyCount                                        |World:getBodyCount|
    - getBodyList                                          |World:getBodyList|
    - getCallbacks                                        |World:getCallbacks|
    - getContactCount                                  |World:getContactCount|
    - getContactFilter                                |World:getContactFilter|
    - getContactList                                    |World:getContactList|
    - getGravity                                            |World:getGravity|
    - getJointCount                                      |World:getJointCount|
    - getJointList                                        |World:getJointList|
    - isDestroyed                                          |World:isDestroyed|
    - isLocked                                                |World:isLocked|
    - isSleepingAllowed                              |World:isSleepingAllowed|
    - queryBoundingBox                                |World:queryBoundingBox|
    - rayCast                                                  |World:rayCast|
    - setCallbacks                                        |World:setCallbacks|
    - setContactFilter                                |World:setContactFilter|
    - setGravity                                            |World:setGravity|
    - setSleepingAllowed                            |World:setSleepingAllowed|
    - translateOrigin                                  |World:translateOrigin|
    - update                                                    |World:update|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.11.2.21.1. destroy                                           *World:destroy*

Destroys the world, taking all bodies, joints, fixtures and their shapes with
it.

An error will occur if you attempt to use any of the destroyed objects after
calling this function.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21.2. getBodyCount                                 *World:getBodyCount*

Get the number of bodies in the world.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - n: <number> The number of bodies in the world.

------------------------------------------------------------------------------
2.11.2.21.3. getBodyList                                   *World:getBodyList*

Returns a table with all bodies.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - bodies: <table> A sequence with all bodies.

------------------------------------------------------------------------------
2.11.2.21.4. getCallbacks                                 *World:getCallbacks*

Returns functions for the callbacks during the world update.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - beginContact: <function> Gets called when two fixtures begin to
              overlap.
            - endContact: <function> Gets called when two fixtures cease to
              overlap.
            - preSolve: <function> Gets called before a collision gets
              resolved.
            - postSolve: <function> Gets called after the collision has been
              resolved.

------------------------------------------------------------------------------
2.11.2.21.5. getContactCount                           *World:getContactCount*

Returns the number of contacts in the world.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - n: <number> The number of contacts in the world.

------------------------------------------------------------------------------
2.11.2.21.6. getContactFilter                         *World:getContactFilter*

Returns the function for collision filtering.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - contactFilter: <function> The function that handles the contact
              filtering.

------------------------------------------------------------------------------
2.11.2.21.7. getContactList                             *World:getContactList*

Returns a table with all contacts.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - contacts: <table> A sequence with all contacts.

------------------------------------------------------------------------------
2.11.2.21.8. getGravity                                     *World:getGravity*

Get the gravity of the world.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x component of gravity.
            - y: <number> The y component of gravity.

------------------------------------------------------------------------------
2.11.2.21.9. getJointCount                               *World:getJointCount*

Get the number of joints in the world.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - n: <number> The number of joints in the world.

------------------------------------------------------------------------------
2.11.2.21.10. getJointList                                *World:getJointList*

Returns a table with all joints.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - joints: <table> A sequence with all joints.

------------------------------------------------------------------------------
2.11.2.21.11. isDestroyed                                  *World:isDestroyed*

Gets whether the World is destroyed. Destroyed worlds cannot be used.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - destroyed: <boolean> Whether the World is destroyed.

------------------------------------------------------------------------------
2.11.2.21.12. isLocked                                        *World:isLocked*

Returns if the world is updating its state.

This will return true inside the callbacks from World:setCallbacks.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - locked: <boolean> Will be true if the world is in the process of
              updating its state.

------------------------------------------------------------------------------
2.11.2.21.13. isSleepingAllowed                      *World:isSleepingAllowed*

Returns the sleep behaviour of the world.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - allowSleep: <boolean> True if the bodies are allowed to sleep or
              false if not.

------------------------------------------------------------------------------
2.11.2.21.14. queryBoundingBox                        *World:queryBoundingBox*

Calls a function for each fixture inside the specified area.

Variants:
    1:
        - `Arguments`:
            - topLeftX: <number> The x position of the top-left point.
            - topLeftY: <number> The y position of the top-left point.
            - bottomRightX: <number> The x position of the bottom-right point.
            - bottomRightY: <number> The y position of the bottom-right point.
            - callback: <function> This function gets passed one argument, the
              fixture, and should return a boolean. The search will continue
              if it is true or stop if it is false.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21.15. rayCast                                          *World:rayCast*

Casts a ray and calls a function with the fixtures that intersect it. You
cannot make any assumptions about the order of the callbacks.

Each time the function gets called, 6 arguments get passed to it. The first is
the fixture intersecting the ray. The second and third are the coordinates of
the intersection point. The fourth and fifth is the surface normal vector of
the shape edge. The sixth argument is the position of the intersection on the
ray as a number from 0 to 1 (or even higher if the ray length was changed with
the return value).

The ray can be controlled with the return value. A positive value sets a new
ray length where 1 is the default value. A value of 0 terminates the ray. If
the callback function returns -1, the intersection gets ignored as if it
didn't happen.

There is a bug in 0.8.0 where the normal vector passed to the callback
function gets scaled by love.physics.getMeter.

Variants:
    1:
        - `Arguments`:
            - x1: <number> The x position of the starting point of the ray.
            - y1: <number> The y position of the starting point of the ray.
            - x2: <number> The x position of the end point of the ray.
            - y2: <number> The y position of the end point of the ray.
            - callback: <function> This function gets six arguments and should
              return a number.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21.16. setCallbacks                                *World:setCallbacks*

Sets functions for the collision callbacks during the world update.

Four Lua functions can be given as arguments. The value nil removes a
function.

When called, each function will be passed three arguments. The first two
arguments are the colliding fixtures and the third argument is the Contact
between them. The PostSolve callback additionally gets the normal and tangent
impulse for each contact point.

Variants:
    1:
        - `Arguments`:
            - beginContact: <function> Gets called when two fixtures begin to
              overlap.
            - endContact: <function> Gets called when two fixtures cease to
              overlap.
            - preSolve: <function> Gets called before a collision gets
              resolved.
            - postSolve: <function> Gets called after the collision has been
              resolved.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21.17. setContactFilter                        *World:setContactFilter*

Sets a function for collision filtering.

If the group and category filtering doesn't generate a collision decision,
this function gets called with the two fixtures as arguments. The function
should return a boolean value where true means the fixtures will collide and
false means they will pass through each other.

Variants:
    1:
        - `Arguments`:
            - filter: <function> The function handling the contact filtering.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21.18. setGravity                                    *World:setGravity*

Set the gravity of the world.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of gravity.
            - y: <number> The y component of gravity.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21.19. setSleepingAllowed                    *World:setSleepingAllowed*

Set the sleep behaviour of the world.

A sleeping body is much more efficient to simulate than when awake.

If sleeping is allowed, any body that has come to rest will sleep.

Variants:
    1:
        - `Arguments`:
            - allowSleep: <boolean> True if the bodies are allowed to sleep or
              false if not.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21.20. translateOrigin                          *World:translateOrigin*

Translates the World's origin. Useful in large worlds where floating point
precision issues become noticeable at far distances from the origin.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x component of the new origin with respect to
              the old origin.
            - y: <number> The y component of the new origin with respect to
              the old origin.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.2.21.21. update                                            *World:update*

Update the state of the world.

Variants:
    1:
        - `Arguments`:
            - dt: <number> The time (in seconds) to advance the physics
              simulation.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.11.3. enums                                             *love.physics-enums*

Enums within love.physics:
    BodyType                                                   |love.BodyType|
    JointType                                                 |love.JointType|
    ShapeType                                                 |love.ShapeType|

------------------------------------------------------------------------------
2.11.3.1. BodyType                     *love-BodyType* *love.physics-BodyType*

The types of a Body.

Constants:

    static                 Static bodies do not move.
    dynamic                Dynamic bodies collide with all bodies.
    kinematic              Kinematic bodies only collide with dynamic bodies.

------------------------------------------------------------------------------
2.11.3.2. JointType                  *love-JointType* *love.physics-JointType*

Different types of joints.

Constants:

    distance               A DistanceJoint.
    gear                   A GearJoint.
    mouse                  A MouseJoint.
    prismatic              A PrismaticJoint.
    pulley                 A PulleyJoint.
    revolute               A RevoluteJoint.
    friction               A FrictionJoint.
    weld                   A WeldJoint.
    rope                   A RopeJoint.

------------------------------------------------------------------------------
2.11.3.3. ShapeType                  *love-ShapeType* *love.physics-ShapeType*

The different types of Shapes, as returned by Shape:getType.

Constants:

    circle                 The Shape is a CircleShape.
    polygon                The Shape is a PolygonShape.
    edge                   The Shape is a EdgeShape.
    chain                  The Shape is a ChainShape.

------------------------------------------------------------------------------
2.12. sound                                                       *love.sound*

This module is responsible for decoding sound files. It can't play the sounds,
see love.audio for that.

- Types: 
    - Decoder                                                   |love-Decoder|
    - SoundData                                               |love-SoundData|
- Enums: None

------------------------------------------------------------------------------
2.12.1. functions                                       *love.sound-functions*

The functions of sound.

------------------------------------------------------------------------------
2.12.1.1. newDecoder                                   *love.sound.newDecoder*

Attempts to find a decoder for the encoded sound data in the specified file.

Variants:
    1:
        - `Arguments`:
            - file: <File> The file with encoded sound data.
            - buffer: <number> The size of each decoded chunk, in bytes.
        - `Returns`:
            - decoder: <Decoder> A new Decoder object.
    2:
        - `Arguments`:
            - filename: <string> The filename of the file with encoded sound
              data.
            - buffer: <number> The size of each decoded chunk, in bytes.
        - `Returns`:
            - decoder: <Decoder> A new Decoder object.

------------------------------------------------------------------------------
2.12.1.2. newSoundData                               *love.sound.newSoundData*

Creates new SoundData from a file. It's also possible to create SoundData with
a custom sample rate, channel and bit depth.

The sound data will be decoded to the memory in a raw format. It is
recommended to create only short sounds like effects, as a 3 minute song uses
30 MB of memory this way.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The filename of the file to load.
        - `Returns`:
            - soundData: <SoundData> A new SoundData object.
    2:
        - `Arguments`:
            - file: <File> A File pointing to an audio file.
        - `Returns`:
            - soundData: <SoundData> A new SoundData object.
    3:
        - `Arguments`:
            - data: <Data> The encoded data to decode into audio.
        - `Returns`:
            - soundData: <SoundData> A new SoundData object.
    4:
        - `Arguments`:
            - samples: <number> Total number of samples.
            - rate: <number> Number of samples per second
            - bits: <number> Bits per sample (8 or 16).
            - channels: <number> Either 1 for mono or 2 for stereo.
        - `Returns`:
            - soundData: <SoundData> A new SoundData object.

------------------------------------------------------------------------------
2.12.2. types                                               *love.sound-types*

The types of sound:

    - Decoder                                                   |love.Decoder|
    - SoundData                                               |love.SoundData|

------------------------------------------------------------------------------
2.12.2.1. Decoder                          *love-Decoder* *love.sound-Decoder*

An object which can gradually decode a sound file.

Constructors: 
    - newDecoder                                       |love.sound.newDecoder|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getBitDepth                                        |Decoder:getBitDepth|
    - getChannels                                        |Decoder:getChannels|
    - getDuration                                        |Decoder:getDuration|
    - getSampleRate                                    |Decoder:getSampleRate|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.12.2.1.1. getBitDepth                                  *Decoder:getBitDepth*

Returns the number of bits per sample.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - bitDepth: <number> Either 8 or 16.

------------------------------------------------------------------------------
2.12.2.1.2. getChannels                                  *Decoder:getChannels*

Returns the number of channels in the stream.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - channels: <number> 1 for mono, 2 for stereo.

------------------------------------------------------------------------------
2.12.2.1.3. getDuration                                  *Decoder:getDuration*

Gets the duration of the sound file. It may not always be sample-accurate, and
it may return -1 if the duration cannot be determined at all.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - duration: <number> The duration of the sound file in seconds, or
              -1 if it cannot be determined.

------------------------------------------------------------------------------
2.12.2.1.4. getSampleRate                              *Decoder:getSampleRate*

Returns the sample rate of the Decoder.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - rate: <number> Number of samples per second.

------------------------------------------------------------------------------
2.12.2.2. SoundData                    *love-SoundData* *love.sound-SoundData*

Contains raw audio samples. You can not play SoundData back directly. You must
wrap a Source object around it.

Constructors: 
    - newSoundData                                   |love.sound.newSoundData|

Supertypes: 
    - Data                                                         |love-Data|
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getBitDepth                                      |SoundData:getBitDepth|
    - getChannels                                      |SoundData:getChannels|
    - getDuration                                      |SoundData:getDuration|
    - getSample                                          |SoundData:getSample|
    - getSampleCount                                |SoundData:getSampleCount|
    - getSampleRate                                  |SoundData:getSampleRate|
    - setSample                                          |SoundData:setSample|
    - getPointer                                             |Data:getPointer|
    - getSize                                                   |Data:getSize|
    - getString                                               |Data:getString|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.12.2.2.1. getBitDepth                                *SoundData:getBitDepth*

Returns the number of bits per sample.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - bits: <number> Either 8 or 16.

------------------------------------------------------------------------------
2.12.2.2.2. getChannels                                *SoundData:getChannels*

Returns the number of channels in the stream.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - channels: <number> 1 for mono, 2 for stereo.

------------------------------------------------------------------------------
2.12.2.2.3. getDuration                                *SoundData:getDuration*

Returns the number of channels in the stream.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - duration: <number> The duration of the sound data in seconds.

------------------------------------------------------------------------------
2.12.2.2.4. getSample                                    *SoundData:getSample*

Gets the sample at the specified position.

Variants:
    1:
        - `Arguments`:
            - i: <number> The position of the sample (0 means first sample).
        - `Returns`:
            - sample: <number> The normalized sample (range -1.0 to 1.0).

------------------------------------------------------------------------------
2.12.2.2.5. getSampleCount                          *SoundData:getSampleCount*

Returns the sample count of the SoundData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - count: <number> Total number of samples.

------------------------------------------------------------------------------
2.12.2.2.6. getSampleRate                            *SoundData:getSampleRate*

Returns the sample rate of the SoundData.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - rate: <number> Number of samples per second.

------------------------------------------------------------------------------
2.12.2.2.7. setSample                                    *SoundData:setSample*

Sets the sample at the specified position.

Variants:
    1:
        - `Arguments`:
            - i: <number> The position of the sample (0 means first sample).
            - sample: <number> A normalized sample (range -1.0 to 1.0).
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.13. system                                                     *love.system*

Provides access to information about the user's system.

- Types: None
- Enums: 
    - PowerState                                             |love-PowerState|

------------------------------------------------------------------------------
2.13.1. functions                                      *love.system-functions*

The functions of system.

------------------------------------------------------------------------------
2.13.1.1. getClipboardText                      *love.system.getClipboardText*

Gets text from the clipboard.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - text: <string> The text currently held in the system's
              clipboard.

------------------------------------------------------------------------------
2.13.1.2. getOS                                            *love.system.getOS*

Gets the current operating system. In general, LÖVE abstracts away the need
to know the current operating system, but there are a few cases where it can
be useful (especially in combination with os.execute.)

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - osString: <string> The current operating system. "OS X",
              "Windows", "Linux", "Android" or "iOS".

------------------------------------------------------------------------------
2.13.1.3. getPowerInfo                              *love.system.getPowerInfo*

Gets information about the system's power supply.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - state: <PowerState> The basic state of the power supply.
            - percent: <number> Percentage of battery life left, between 0 and
              100. nil if the value can't be determined or there's no battery.
            - seconds: <number> Seconds of battery life left. nil if the value
              can't be determined or there's no battery.

------------------------------------------------------------------------------
2.13.1.4. getProcessorCount                    *love.system.getProcessorCount*

Gets the number of CPU cores in the system.

The number includes the threads reported if technologies such as Intel's
Hyper-threading are enabled. For example, on a 4-core CPU with
Hyper-threading, this function will return 8.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - cores: <number> Gets the number of CPU cores in the system.

------------------------------------------------------------------------------
2.13.1.5. openURL                                        *love.system.openURL*

Opens a URL with the user's web or file browser.

Variants:
    1:
        - `Arguments`:
            - url: <string> The URL to open. Must be formatted as a proper
              URL.

To open a file or folder, "file://" must be prepended to the path.
        - `Returns`:
            - success: <boolean> Whether the URL was opened successfully.

------------------------------------------------------------------------------
2.13.1.6. setClipboardText                      *love.system.setClipboardText*

Puts text in the clipboard.

Variants:
    1:
        - `Arguments`:
            - text: <string> The new text to hold in the system's clipboard.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.13.1.7. vibrate                                        *love.system.vibrate*

Causes the device to vibrate, if possible. Currently this will only work on
Android and iOS devices that have a built-in vibration motor.

Variants:
    1:
        - `Arguments`:
            - seconds: <number> The duration to vibrate for. If called on an
              iOS device, it will always vibrate for 0.5 seconds due to
              limitations in the iOS system APIs.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.13.2. enums                                              *love.system-enums*

Enums within love.system:
    PowerState                                               |love.PowerState|

------------------------------------------------------------------------------
2.13.2.1. PowerState                *love-PowerState* *love.system-PowerState*

The basic state of the system's power supply.

Constants:

    unknown                Cannot determine power status.
    battery                Not plugged in, running on a battery.
    nobattery              Plugged in, no battery available.
    charging               Plugged in, charging battery.
    charged                Plugged in, battery is fully charged.

------------------------------------------------------------------------------
2.14. thread                                                     *love.thread*

Allows you to work with threads.

Threads are separate Lua environments, running in parallel to the main code.
As their code runs separately, they can be used to compute complex operations
without adversely affecting the frame rate of the main thread. However, as
they are separate environments, they cannot access the variables and functions
of the main thread, and communication between threads is limited.

All LOVE objects (userdata) are shared among threads so you'll only have to
send their references across threads. You may run into concurrency issues if
you manipulate an object on multiple threads at the same time.

When a Thread is started, it only loads the love.thread module. Every other
module has to be loaded with require.

- Types: 
    - Thread                                                     |love-Thread|
    - Channel                                                   |love-Channel|
- Enums: None

------------------------------------------------------------------------------
2.14.1. functions                                      *love.thread-functions*

The functions of thread.

------------------------------------------------------------------------------
2.14.1.1. getChannel                                  *love.thread.getChannel*

Creates or retrieves a named thread channel.

Variants:
    1:
        - `Arguments`:
            - name: <string> The name of the channel you want to create or
              retrieve.
        - `Returns`:
            - channel: <Channel> A named channel object which can be further
              manipulated.

------------------------------------------------------------------------------
2.14.1.2. newChannel                                  *love.thread.newChannel*

Create a new unnamed thread channel.

One use for them is to pass new unnamed channels to other threads via
Channel:push

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - channel: <Channel> A unnamed channel object which can be further
              manipulated.

------------------------------------------------------------------------------
2.14.1.3. newThread                                    *love.thread.newThread*

Creates a new Thread from a File or Data object.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The name of the Lua File to use as source.
        - `Returns`:
            - thread: <Thread> A new Thread that has yet to be started.
    2:
        - `Arguments`:
            - fileData: <FileData> The FileData containing the Lua code to use
              as the source.
        - `Returns`:
            - thread: <Thread> A new Thread that has yet to be started.
    3:
        - `Arguments`:
            - codestring: <string> A string containing the Lua code to use as
              the source. It needs to either be at least 1024 characters long,
              or contain at least one newline.
        - `Returns`:
            - thread: <Thread> A new Thread that has yet to be started.

------------------------------------------------------------------------------
2.14.2. types                                              *love.thread-types*

The types of thread:

    - Thread                                                     |love.Thread|
    - Channel                                                   |love.Channel|

------------------------------------------------------------------------------
2.14.2.1. Thread                            *love-Thread* *love.thread-Thread*

A Thread is a chunk of code that can run in parallel with other threads. Data
can be sent between different threads with Channel objects.

Constructors: 
    - newThread                                        |love.thread.newThread|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - getError                                               |Thread:getError|
    - start                                                     |Thread:start|
    - wait                                                       |Thread:wait|
    - isRunning                                             |Thread:isRunning|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.14.2.1.1. getError                                         *Thread:getError*

Retrieves the error string from the thread if it produced an error.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - message: <string> The error message.

------------------------------------------------------------------------------
2.14.2.1.2. start                                               *Thread:start*

Starts the thread.

Threads can be restarted after they have completed their execution.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - arg1: <value> A string, number, boolean, LÖVE object, or simple
              table.
            - arg2: <value> A string, number, boolean, LÖVE object, or simple
              table.
            - ...: <value> You can continue passing values to the thread.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.14.2.1.3. wait                                                 *Thread:wait*

Wait for a thread to finish. This call will block until the thread finishes.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.14.2.1.4. isRunning                                       *Thread:isRunning*

Returns whether the thread is currently running.

Threads which are not running can be (re)started with Thread:start.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - running: <boolean> True if the thread is running, false
              otherwise.

------------------------------------------------------------------------------
2.14.2.2. Channel                         *love-Channel* *love.thread-Channel*

A channel is a way to send and receive data to and from different threads.

Constructors: 
    - getChannel                                      |love.thread.getChannel|
    - newChannel                                      |love.thread.newChannel|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - clear                                                    |Channel:clear|
    - demand                                                  |Channel:demand|
    - getCount                                              |Channel:getCount|
    - peek                                                      |Channel:peek|
    - performAtomic                                    |Channel:performAtomic|
    - pop                                                        |Channel:pop|
    - push                                                      |Channel:push|
    - supply                                                  |Channel:supply|
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.14.2.2.1. clear                                              *Channel:clear*

Clears all the messages in the Channel queue.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.14.2.2.2. demand                                            *Channel:demand*

Retrieves the value of a Channel message and removes it from the message
queue.

The value of the message can be a boolean, string, number, LÖVE userdata, or
a simple flat table. It waits until a message is in the queue then returns the
message value.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - value: <value> The contents of the message.

------------------------------------------------------------------------------
2.14.2.2.3. getCount                                        *Channel:getCount*

Retrieves the number of messages in the thread Channel queue.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - count: <number> The number of messages in the queue.

------------------------------------------------------------------------------
2.14.2.2.4. peek                                                *Channel:peek*

Retrieves the value of a Channel message, but leaves it in the queue.

The value of the message can be a boolean, string, number or a LÖVE userdata.
It returns nil if there's no message in the queue.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - value: <value> The contents of the message.

------------------------------------------------------------------------------
2.14.2.2.5. performAtomic                              *Channel:performAtomic*

Executes the specified function atomically with respect to this Channel.

Calling multiple methods in a row on the same Channel is often useful. However
if multiple Threads are calling this Channel's methods at the same time, the
different calls on each Thread might end up interleaved (e.g. one or more of
the second thread's calls may happen in between the first thread's calls.)

This method avoids that issue by making sure the Thread calling the method has
exclusive access to the Channel until the specified function has returned.

Variants:
    1:
        - `Arguments`:
            - func: <function> The function to call, the form of
              function(channel, arg1, arg2, ...) end. The Channel is passed as
              the first argument to the function when it is called.
            - arg1: <any> Additional arguments that the given function will
              receive when it is called.
            - ...: <any> Additional arguments that the given function will
              receive when it is called.
        - `Returns`:
            - ret1: <any> The first return value of the given function (if
              any.)
            - ...: <any> Any other return values.

------------------------------------------------------------------------------
2.14.2.2.6. pop                                                  *Channel:pop*

Retrieves the value of a Channel message and removes it from the message
queue.

The value of the message can be a boolean, string, number, LÖVE userdata, or
a simple flat table. It returns nil if there are no messages in the queue.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - value: <value> The contents of the message.

------------------------------------------------------------------------------
2.14.2.2.7. push                                                *Channel:push*

Send a message to the thread Channel.

The value of the message can be a boolean, string, number, LÖVE userdata, or
a simple flat table. Foreign userdata (Lua's files, LuaSocket, ENet, ...),
functions, and tables inside tables are not supported.

Variants:
    1:
        - `Arguments`:
            - value: <value> The contents of the message.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.14.2.2.8. supply                                            *Channel:supply*

Send a message to the thread Channel and wait for a thread to accept it.

The value of the message can be a boolean, string, number, LÖVE userdata, or
a simple flat table. Foreign userdata (Lua's files, LuaSocket, ENet, ...),
functions, and tables inside tables are not supported.

Variants:
    1:
        - `Arguments`:
            - value: <value> The contents of the message.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.15. timer                                                       *love.timer*

Provides an interface to the user's clock.

- Types: None
- Enums: None

------------------------------------------------------------------------------
2.15.1. functions                                       *love.timer-functions*

The functions of timer.

------------------------------------------------------------------------------
2.15.1.1. getAverageDelta                         *love.timer.getAverageDelta*

Returns the average delta time (seconds per frame) over the last second.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - delta: <number> The average delta time over the last second.

------------------------------------------------------------------------------
2.15.1.2. getDelta                                       *love.timer.getDelta*

Returns the time between the last two frames.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - dt: <number> The time passed (in seconds).

------------------------------------------------------------------------------
2.15.1.3. getFPS                                           *love.timer.getFPS*

Returns the current frames per second.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - fps: <number> The current FPS.

------------------------------------------------------------------------------
2.15.1.4. getTime                                         *love.timer.getTime*

Returns the value of a timer with an unspecified starting time. This function
should only be used to calculate differences between points in time, as the
starting time of the timer is unknown.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - time: <number> The time in seconds.

------------------------------------------------------------------------------
2.15.1.5. sleep                                             *love.timer.sleep*

Sleeps the program for the specified amount of time.

Variants:
    1:
        - `Arguments`:
            - s: <number> Seconds to sleep for.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.15.1.6. step                                               *love.timer.step*

Measures the time between two frames. Calling this changes the return value of
love.timer.getDelta.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.16. touch                                                       *love.touch*

Provides an interface to touch-screen presses.

- Types: None
- Enums: None

------------------------------------------------------------------------------
2.16.1. functions                                       *love.touch-functions*

The functions of touch.

------------------------------------------------------------------------------
2.16.1.1. getPosition                                 *love.touch.getPosition*

Gets the current position of the specified touch-press, in pixels.

Variants:
    1:
        - `Arguments`:
            - id: <light userdata> The identifier of the touch-press. Use
              love.touch.getTouches, love.touchpressed, or love.touchmoved to
              obtain touch id values.
        - `Returns`:
            - x: <number> The position along the x-axis of the touch-press
              inside the window, in pixels.
            - y: <number> The position along the y-axis of the touch-press
              inside the window, in pixels.

------------------------------------------------------------------------------
2.16.1.2. getPressure                                 *love.touch.getPressure*

Gets the current pressure of the specified touch-press.

Variants:
    1:
        - `Arguments`:
            - id: <light userdata> The identifier of the touch-press. Use
              love.touch.getTouches, love.touchpressed, or love.touchmoved to
              obtain touch id values.
        - `Returns`:
            - pressure: <number> The pressure of the touch-press. Most touch
              screens aren't pressure sensitive, in which case the pressure
              will be 1.

------------------------------------------------------------------------------
2.16.1.3. getTouches                                   *love.touch.getTouches*

Gets a list of all active touch-presses.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - touches: <table> A list of active touch-press id values, which
              can be used with love.touch.getPosition.

------------------------------------------------------------------------------
2.17. video                                                       *love.video*

This module is responsible for decoding, controlling, and streaming video
files.

It can't draw the videos, see love.graphics.newVideo and Video objects for
that.

- Types: 
    - VideoStream                                           |love-VideoStream|
- Enums: None

------------------------------------------------------------------------------
2.17.1. functions                                       *love.video-functions*

The functions of video.

------------------------------------------------------------------------------
2.17.1.1. newVideoStream                           *love.video.newVideoStream*

Creates a new VideoStream. Currently only Ogg Theora video files are
supported. VideoStreams can't draw videos, see love.graphics.newVideo for
that.

Variants:
    1:
        - `Arguments`:
            - filename: <string> The file path to the Ogg Theora video file.
        - `Returns`:
            - videostream: <VideoStream> A new VideoStream.
    2:
        - `Arguments`:
            - file: <File> The File object containing the Ogg Theora video.
        - `Returns`:
            - videostream: <VideoStream> A new VideoStream.

------------------------------------------------------------------------------
2.17.2. types                                               *love.video-types*

The types of video:

    - VideoStream                                           |love.VideoStream|

------------------------------------------------------------------------------
2.17.2.1. VideoStream              *love-VideoStream* *love.video-VideoStream*

An object which decodes, streams, and controls Videos.

Constructors: 
    - newVideoStream                               |love.video.newVideoStream|

Supertypes: 
    - Object                                                     |love-Object|

Subtypes: None

Functions: 
    - type                                                       |Object:type|
    - typeOf                                                   |Object:typeOf|

------------------------------------------------------------------------------
2.18. window                                                     *love.window*

Provides an interface for modifying and retrieving information about the
program's window.

- Types: None
- Enums: 
    - FullscreenType                                     |love-FullscreenType|
    - MessageBoxType                                     |love-MessageBoxType|

------------------------------------------------------------------------------
2.18.1. functions                                      *love.window-functions*

The functions of window.

------------------------------------------------------------------------------
2.18.1.1. close                                            *love.window.close*

Closes the window. It can be reopened with love.window.setMode.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.18.1.2. fromPixels                                  *love.window.fromPixels*

Converts a number from pixels to density-independent units.

The pixel density inside the window might be greater (or smaller) than the
"size" of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.fromPixels(1600) would return 800 in that case.

This function converts coordinates from pixels to the size users are expecting
them to display at onscreen. love.window.toPixels does the opposite. The
highdpi window flag must be enabled to use the full pixel density of a Retina
screen on Mac OS X and iOS. The flag currently does nothing on Windows and
Linux, and on Android it is effectively always enabled.

Most LÖVE functions return values and expect arguments in terms of pixels
rather than density-independent units.

Variants:
    1:
        - `Arguments`:
            - pixelvalue: <number> A number in pixels to convert to
              density-independent units.
        - `Returns`:
            - value: <number> The converted number, in density-independent
              units.
    2:
        - `Arguments`:
            - px: <number> The x-axis value of a coordinate in pixels.
            - py: <number> The y-axis value of a coordinate in pixels.
        - `Returns`:
            - x: <number> The converted x-axis value of the coordinate, in
              density-independent units.
            - y: <number> The converted y-axis value of the coordinate, in
              density-independent units.

------------------------------------------------------------------------------
2.18.1.3. getDisplayName                          *love.window.getDisplayName*

Gets the name of a display.

Variants:
    1:
        - `Arguments`:
            - displayindex: <number> The index of the display to get the name
              of.
        - `Returns`:
            - name: <string> The name of the specified display.

------------------------------------------------------------------------------
2.18.1.4. getFullscreen                            *love.window.getFullscreen*

Gets whether the window is fullscreen.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - fullscreen: <boolean> True if the window is fullscreen, false
              otherwise.
            - fstype: <FullscreenType> The type of fullscreen mode used.

------------------------------------------------------------------------------
2.18.1.5. getFullscreenModes                  *love.window.getFullscreenModes*

Gets a list of supported fullscreen modes.

Variants:
    1:
        - `Arguments`:
            - display: <number> The index of the display, if multiple monitors
              are available.
        - `Returns`:
            - modes: <table> A table of width/height pairs. (Note that this
              may not be in order.)

------------------------------------------------------------------------------
2.18.1.6. getIcon                                        *love.window.getIcon*

Gets the window icon.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - imagedata: <ImageData> The window icon imagedata, or nil of no
              icon has been set with love.window.setIcon.

------------------------------------------------------------------------------
2.18.1.7. getMode                                        *love.window.getMode*

Returns the current display mode.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - width: <number> Window width.
            - height: <number> Window height.
            - flags: <table> Table containing the window properties.

------------------------------------------------------------------------------
2.18.1.8. getPixelScale                            *love.window.getPixelScale*

Gets the DPI scale factor associated with the window.

The pixel density inside the window might be greater (or smaller) than the
"size" of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.getPixelScale() would return 2.0 in that case.

The love.window.fromPixels and love.window.toPixels functions can also be used
to convert between units.

The highdpi window flag must be enabled to use the full pixel density of a
Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows
and Linux, and on Android it is effectively always enabled.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - scale: <number> The pixel scale factor associated with the
              window.

------------------------------------------------------------------------------
2.18.1.9. getPosition                                *love.window.getPosition*

Gets the position of the window on the screen.

The window position is in the coordinate space of the display it is currently
in.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - x: <number> The x-coordinate of the window's position.
            - y: <number> The y-coordinate of the window's position.
            - display: <number> The index of the display that the window is
              in.

------------------------------------------------------------------------------
2.18.1.10. getTitle                                     *love.window.getTitle*

Gets the window title.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - title: <string> The current window title.

------------------------------------------------------------------------------
2.18.1.11. hasFocus                                     *love.window.hasFocus*

Checks if the game window has keyboard focus.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - focus: <boolean> True if the window has the focus or false if
              not.

------------------------------------------------------------------------------
2.18.1.12. hasMouseFocus                           *love.window.hasMouseFocus*

Checks if the game window has mouse focus.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - focus: <boolean> True if the window has mouse focus or false if
              not.

------------------------------------------------------------------------------
2.18.1.13. isCreated                                   *love.window.isCreated*

Checks if the window has been created.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - created: <boolean> True if the window has been created, false
              otherwise.

------------------------------------------------------------------------------
2.18.1.14. isDisplaySleepEnabled           *love.window.isDisplaySleepEnabled*

Gets whether the display is allowed to sleep while the program is running.

Display sleep is disabled by default. Some types of input (e.g. joystick
button presses) might not prevent the display from sleeping, if display sleep
is allowed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - enabled: <boolean> True if system display sleep is enabled /
              allowed, false otherwise.

------------------------------------------------------------------------------
2.18.1.15. isVisible                                   *love.window.isVisible*

Checks if the game window is visible.

The window is considered visible if it's not minimized and the program isn't
hidden.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - visible: <boolean> True if the window is visible or false if
              not.

------------------------------------------------------------------------------
2.18.1.16. maximize                                     *love.window.maximize*

Makes the window as large as possible.

This function has no effect if the window isn't resizable, since it
essentially programmatically presses the window's "maximize" button.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.18.1.17. minimize                                     *love.window.minimize*

Minimizes the window to the system's task bar / dock.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.18.1.18. requestAttention                     *love.window.requestAttention*

Causes the window to request the attention of the user if it is not in the
foreground.

In Windows the taskbar icon will flash, and in OS X the dock icon will bounce.

Variants:
    1:
        - `Arguments`:
            - continuous: <boolean> Whether to continuously request attention
              until the window becomes active, or to do it only once.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.18.1.19. setDisplaySleepEnabled         *love.window.setDisplaySleepEnabled*

Sets whether the display is allowed to sleep while the program is running.

Display sleep is disabled by default. Some types of input (e.g. joystick
button presses) might not prevent the display from sleeping, if display sleep
is allowed.

Variants:
    1:
        - `Arguments`:
            - enable: <boolean> True to enable system display sleep, false to
              disable it.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.18.1.20. setFullscreen                           *love.window.setFullscreen*

Enters or exits fullscreen. The display to use when entering fullscreen is
chosen based on which display the window is currently in, if multiple monitors
are connected.

If fullscreen mode is entered and the window size doesn't match one of the
monitor's display modes (in normal fullscreen mode) or the window size doesn't
match the desktop size (in 'desktop' fullscreen mode), the window will be
resized appropriately. The window will revert back to its original size again
when fullscreen mode is exited using this function.

Variants:
    1:
        - `Arguments`:
            - fullscreen: <boolean> Whether to enter or exit fullscreen mode.
        - `Returns`:
            - success: <boolean> True if successful, false otherwise.
    2:
        - `Arguments`:
            - fullscreen: <boolean> Whether to enter or exit fullscreen mode.
            - fstype: <FullscreenType> The type of fullscreen mode to use.
        - `Returns`:
            - success: <boolean> True if successful, false otherwise.

------------------------------------------------------------------------------
2.18.1.21. setIcon                                       *love.window.setIcon*

Sets the window icon until the game is quit. Not all operating systems support
very large icon images.

Variants:
    1:
        - `Arguments`:
            - imagedata: <ImageData> The window icon image.
        - `Returns`:
            - success: <boolean> Whether the icon has been set successfully.

------------------------------------------------------------------------------
2.18.1.22. setMode                                       *love.window.setMode*

Sets the display mode and properties of the window.

If width or height is 0, setMode will use the width and height of the desktop.

Changing the display mode may have side effects: for example, canvases will be
cleared and values sent to shaders with Shader:send will be erased. Make sure
to save the contents of canvases beforehand or re-draw to them afterward if
you need to.

Variants:
    1:
        - `Arguments`:
            - width: <number> Display width.
            - height: <number> Display height.
            - flags: <table> The flags table with the options:
        - `Returns`:
            - success: <boolean> True if successful, false otherwise.

------------------------------------------------------------------------------
2.18.1.23. setPosition                               *love.window.setPosition*

Sets the position of the window on the screen.

The window position is in the coordinate space of the specified display.

Variants:
    1:
        - `Arguments`:
            - x: <number> The x-coordinate of the window's position.
            - y: <number> The y-coordinate of the window's position.
            - display: <number> The index of the display that the new window
              position is relative to.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.18.1.24. setTitle                                     *love.window.setTitle*

Sets the window title.

Variants:
    1:
        - `Arguments`:
            - title: <string> The new window title.
        - `Returns`: Nothing

------------------------------------------------------------------------------
2.18.1.25. showMessageBox                         *love.window.showMessageBox*

Displays a message box dialog above the love window. The message box contains
a title, optional text, and buttons.

Variants:
    1:
        - `Arguments`:
            - title: <string> The title of the message box.
            - message: <string> The text inside the message box.
            - type: <MessageBoxType> The type of the message box.
            - attachtowindow: <boolean> Whether the message box should be
              attached to the love window or free-floating.
        - `Returns`:
            - success: <boolean> Whether the message box was successfully
              displayed.
    2:
        - `Arguments`:
            - title: <string> The title of the message box.
            - message: <string> The text inside the message box.
            - buttonlist: <table> A table containing a list of button names to
              show. The table can also contain the fields enterbutton and
              escapebutton, which should be the index of the default button to
              use when the user presses 'enter' or 'escape', respectively.
            - type: <MessageBoxType> The type of the message box.
            - attachtowindow: <boolean> Whether the message box should be
              attached to the love window or free-floating.
        - `Returns`:
            - pressedbutton: <number> The index of the button pressed by the
              user. May be 0 if the message box dialog was closed without
              pressing a button.

------------------------------------------------------------------------------
2.18.1.26. toPixels                                     *love.window.toPixels*

Converts a number from density-independent units to pixels.

The pixel density inside the window might be greater (or smaller) than the
"size" of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.toPixels(800) would return 1600 in that case.

This is used to convert coordinates from the size users are expecting them to
display at onscreen to pixels. love.window.fromPixels does the opposite. The
highdpi window flag must be enabled to use the full pixel density of a Retina
screen on Mac OS X and iOS. The flag currently does nothing on Windows and
Linux, and on Android it is effectively always enabled.

Most LÖVE functions return values and expect arguments in terms of pixels
rather than density-independent units.

Variants:
    1:
        - `Arguments`:
            - value: <number> A number in density-independent units to convert
              to pixels.
        - `Returns`:
            - pixelvalue: <number> The converted number, in pixels.
    2:
        - `Arguments`:
            - x: <number> The x-axis value of a coordinate in
              density-independent units to convert to pixels.
            - y: <number> The y-axis value of a coordinate in
              density-independent units to convert to pixels.
        - `Returns`:
            - px: <number> The converted x-axis value of the coordinate, in
              pixels.
            - py: <number> The converted y-axis value of the coordinate, in
              pixels.

------------------------------------------------------------------------------
2.18.2. enums                                              *love.window-enums*

Enums within love.window:
    FullscreenType                                       |love.FullscreenType|
    MessageBoxType                                       |love.MessageBoxType|

------------------------------------------------------------------------------
2.18.2.1. FullscreenType    *love-FullscreenType* *love.window-FullscreenType*

Types of fullscreen modes.

In normal fullscreen mode, if a window size is used which does not match one
of the monitor's supported display modes, the window will be resized to the
next largest display mode.

Normal fullscreen mode is sometimes avoided by users because it can cause
issues in some window managers and with multi-monitor setups. In OS X it
prevents switching to a different program until fullscreen mode is exited. The
"desktop" fullscreen mode generally avoids these issues.

Constants:

    desktop                Sometimes known as borderless fullscreen windowed
                           mode. A borderless screen-sized window is created
                           which sits on top of all desktop UI elements. The
                           window is automatically resized to match the
                           dimensions of the desktop, and its size cannot be
                           changed.
    exclusive              Standard exclusive-fullscreen mode. Changes the
                           display mode (actual resolution) of the monitor.

------------------------------------------------------------------------------
2.18.2.2. MessageBoxType    *love-MessageBoxType* *love.window-MessageBoxType*

Types of message box dialogs. Different types may have slightly different
looks.

Constants:

    info                   Informational dialog.
    warning                Warning dialog.
    error                  Error dialog.

==============================================================================
3. callbacks                                                  *love-callbacks*

All LOVE callbacks.

------------------------------------------------------------------------------
3.0.1. directorydropped                                *love.directorydropped*

Callback function triggered when a directory is dragged and dropped onto the
window.

Variants:
    1:
        - `Arguments`:
            - path: <string> The full platform-dependent path to the
              directory. It can be used as an argument to
              love.filesystem.mount, in order to gain read access to the
              directory with love.filesystem.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.2. draw                                                        *love.draw*

Callback function used to draw on the screen every frame.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.3. errhand                                                  *love.errhand*

The error handler, used to display error messages.

Variants:
    1:
        - `Arguments`:
            - msg: <string> The error message.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.4. filedropped                                          *love.filedropped*

Callback function triggered when a file is dragged and dropped onto the
window.

Variants:
    1:
        - `Arguments`:
            - file: <File> The unopened File object representing the file that
              was dropped.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.5. focus                                                      *love.focus*

Callback function triggered when window receives or loses focus.

Variants:
    1:
        - `Arguments`:
            - focus: <boolean> True if the window gains focus, false if it
              loses focus.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.6. gamepadaxis                                          *love.gamepadaxis*

Called when a Joystick's virtual gamepad axis is moved.

Variants:
    1:
        - `Arguments`:
            - joystick: <Joystick> The joystick object.
            - axis: <GamepadAxis> The virtual gamepad axis.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.7. gamepadpressed                                    *love.gamepadpressed*

Called when a Joystick's virtual gamepad button is pressed.

Variants:
    1:
        - `Arguments`:
            - joystick: <Joystick> The joystick object.
            - button: <GamepadButton> The virtual gamepad button.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.8. gamepadreleased                                  *love.gamepadreleased*

Called when a Joystick's virtual gamepad button is released.

Variants:
    1:
        - `Arguments`:
            - joystick: <Joystick> The joystick object.
            - button: <GamepadButton> The virtual gamepad button.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.9. joystickadded                                      *love.joystickadded*

Called when a Joystick is connected.

This callback is also triggered after love.load for every Joystick which was
already connected when the game started up.

Variants:
    1:
        - `Arguments`:
            - joystick: <Joystick> The newly connected Joystick object.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.10. joystickaxis                                       *love.joystickaxis*

Called when a joystick axis moves.

Variants:
    1:
        - `Arguments`:
            - joystick: <Joystick> The joystick object.
            - axis: <number> The axis number.
            - value: <number> The new axis value.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.11. joystickhat                                         *love.joystickhat*

Called when a joystick hat direction changes.

Variants:
    1:
        - `Arguments`:
            - joystick: <Joystick> The joystick object.
            - hat: <number> The hat number.
            - direction: <JoystickHat> The new hat direction.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.12. joystickpressed                                 *love.joystickpressed*

Called when a joystick button is pressed.

Variants:
    1:
        - `Arguments`:
            - joystick: <number> The joystick number.
            - button: <number> The button number.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.13. joystickreleased                               *love.joystickreleased*

Called when a joystick button is released.

Variants:
    1:
        - `Arguments`:
            - joystick: <number> The joystick number.
            - button: <number> The button number.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.14. joystickremoved                                 *love.joystickremoved*

Called when a Joystick is disconnected.

Variants:
    1:
        - `Arguments`:
            - joystick: <Joystick> The now-disconnected Joystick object.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.15. keypressed                                           *love.keypressed*

Callback function triggered when a key is pressed.

Variants:
    1:
        - `Arguments`:
            - key: <KeyConstant> Character of the pressed key.
            - scancode: <Scancode> The scancode representing the pressed key.
            - isrepeat: <boolean> Whether this keypress event is a repeat. The
              delay between key repeats depends on the user's system settings.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.16. keyreleased                                         *love.keyreleased*

Callback function triggered when a keyboard key is released.

Variants:
    1:
        - `Arguments`:
            - key: <KeyConstant> Character of the released key.
        - `Returns`: Nothing
    2:
        - `Arguments`:
            - key: <KeyConstant> Character of the released key.
            - scancode: <Scancode> The scancode representing the released key.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.17. load                                                       *love.load*

This function is called exactly once at the beginning of the game.

Variants:
    1:
        - `Arguments`:
            - arg: <table> Command line arguments given to the game.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.18. lowmemory                                             *love.lowmemory*

Callback function triggered when the system is running out of memory on mobile
devices.

 Mobile operating systems may forcefully kill the game if it uses too much
memory, so any non-critical resource should be removed if possible (by setting
all variables referencing the resources to nil, and calling collectgarbage()),
when this event is triggered. Sounds and images in particular tend to use the
most memory.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.19. mousefocus                                           *love.mousefocus*

Callback function triggered when window receives or loses mouse focus.

Variants:
    1:
        - `Arguments`:
            - focus: <boolean> Wether the window has mouse focus or not.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.20. mousemoved                                           *love.mousemoved*

Callback function triggered when the mouse is moved.

Variants:
    1:
        - `Arguments`:
            - x: <number> The mouse position on the x-axis.
            - y: <number> The mouse position on the y-axis.
            - dx: <number> The amount moved along the x-axis since the last
              time love.mousemoved was called.
            - dy: <number> The amount moved along the y-axis since the last
              time love.mousemoved was called.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.21. mousepressed                                       *love.mousepressed*

Callback function triggered when a mouse button is pressed.

Variants:
    1:
        - `Arguments`:
            - x: <number> Mouse x position, in pixels.
            - y: <number> Mouse y position, in pixels.
            - button: <number> The button index that was pressed. 1 is the
              primary mouse button, 2 is the secondary mouse button and 3 is
              the middle button. Further buttons are mouse dependent
            - isTouch: <boolean> True if the mouse button press originated
              from a touchscreen touch-press.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.22. mousereleased                                     *love.mousereleased*

Callback function triggered when a mouse button is released.

Variants:
    1:
        - `Arguments`:
            - x: <number> Mouse x position, in pixels.
            - y: <number> Mouse y position, in pixels.
            - button: <number> The button index that was released. 1 is the
              primary mouse button, 2 is the secondary mouse button and 3 is
              the middle button. Further buttons are mouse dependent.
            - isTouch: <boolean> True if the mouse button press originated
              from a touchscreen touch-release.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.23. quit                                                       *love.quit*

Callback function triggered when the game is closed.

Variants:
    1:
        - `Arguments`: None
        - `Returns`:
            - r: <boolean> Abort quitting. If true, do not close the game.

------------------------------------------------------------------------------
3.0.24. resize                                                   *love.resize*

Called when the window is resized, for example if the user resizes the window,
or if love.window.setMode is called with an unsupported width or height in
fullscreen and the window chooses the closest appropriate size.

Calls to love.window.setMode will only trigger this event if the width or
height of the window after the call doesn't match the requested width and
height. This can happen if a fullscreen mode is requested which doesn't match
any supported mode, or if the fullscreen type is 'desktop' and the requested
width or height don't match the desktop resolution.

Variants:
    1:
        - `Arguments`:
            - w: <number> The new width.
            - h: <number> The new height.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.25. run                                                         *love.run*

The main function, containing the main loop. A sensible default is used when
left out.

Variants:
    1:
        - `Arguments`: None
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.26. textedited                                           *love.textedited*

Called when the candidate text for an IME (Input Method Editor) has changed.

The candidate text is not the final text that the user will eventually choose.
Use love.textinput for that.

Variants:
    1:
        - `Arguments`:
            - text: <string> The UTF-8 encoded unicode candidate text.
            - start: <number> The start cursor of the selected candidate text.
            - length: <number> The length of the selected candidate text. May
              be 0.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.27. textinput                                             *love.textinput*

Called when text has been entered by the user. For example if shift-2 is
pressed on an American keyboard layout, the text "@" will be generated.

Variants:
    1:
        - `Arguments`:
            - text: <string> The UTF-8 encoded unicode text.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.28. threaderror                                         *love.threaderror*

Callback function triggered when a Thread encounters an error.

Variants:
    1:
        - `Arguments`:
            - thread: <Thread> The thread which produced the error.
            - errorstr: <string> The error message.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.29. touchmoved                                           *love.touchmoved*

Callback function triggered when a touch press moves inside the touch screen.

Variants:
    1:
        - `Arguments`:
            - id: <light userdata> The identifier for the touch press.
            - x: <number> The x-axis position of the touch inside the window,
              in pixels.
            - y: <number> The y-axis position of the touch inside the window,
              in pixels.
            - dx: <number> The x-axis movement of the touch inside the window,
              in pixels.
            - dy: <number> The y-axis movement of the touch inside the window,
              in pixels.
            - pressure: <number> The amount of pressure being applied. Most
              touch screens aren't pressure sensitive, in which case the
              pressure will be 1.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.30. touchpressed                                       *love.touchpressed*

Callback function triggered when the touch screen is touched.

Variants:
    1:
        - `Arguments`:
            - id: <light userdata> The identifier for the touch press.
            - x: <number> The x-axis position of the touch press inside the
              window, in pixels.
            - y: <number> The y-axis position of the touch press inside the
              window, in pixels.
            - dx: <number> The x-axis movement of the touch press inside the
              window, in pixels. This should always be zero.
            - dy: <number> The y-axis movement of the touch press inside the
              window, in pixels. This should always be zero.
            - pressure: <number> The amount of pressure being applied. Most
              touch screens aren't pressure sensitive, in which case the
              pressure will be 1.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.31. touchreleased                                     *love.touchreleased*

Callback function triggered when the touch screen stops being touched.

Variants:
    1:
        - `Arguments`:
            - id: <light userdata> The identifier for the touch press.
            - x: <number> The x-axis position of the touch inside the window,
              in pixels.
            - y: <number> The y-axis position of the touch inside the window,
              in pixels.
            - dx: <number> The x-axis movement of the touch inside the window,
              in pixels.
            - dy: <number> The y-axis movement of the touch inside the window,
              in pixels.
            - pressure: <number> The amount of pressure being applied. Most
              touch screens aren't pressure sensitive, in which case the
              pressure will be 1.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.32. update                                                   *love.update*

Callback function triggered when a key is pressed.

Variants:
    1:
        - `Arguments`:
            - dt: <number> Time since the last update in seconds.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.33. visible                                                 *love.visible*

Callback function triggered when window is minimized/hidden or unminimized by
the user.

Variants:
    1:
        - `Arguments`:
            - visible: <boolean> True if the window is visible, false if it
              isn't.
        - `Returns`: Nothing

------------------------------------------------------------------------------
3.0.34. wheelmoved                                           *love.wheelmoved*

Callback function triggered when the mouse wheel is moved.

Variants:
    1:
        - `Arguments`:
            - x: <number> Amount of horizontal mouse wheel movement. Positive
              values indicate movement to the right.
            - y: <number> Amount of vertical mouse wheel movement. Positive
              values indicate upward movement.
        - `Returns`: Nothing

==============================================================================
4. config                                           *love-config* *love-flags*

If a file called conf.lua is present in your game folder (or .love file), it
is run before the LÖVE modules are loaded. You can use this file to overwrite
the love.conf function, which is later called by the LÖVE 'boot' script.
Using the love.conf function, you can set some configuration options, and
change things like the default size of the window, which modules are loaded,
and other stuff.

------------------------------------------------------------------------------
4.1. identity                           *love-identity* *love-config-identity*

filler

------------------------------------------------------------------------------
4.2. version                              *love-version* *love-config-version*

filler

------------------------------------------------------------------------------
4.3. console                              *love-console* *love-config-console*

filler

------------------------------------------------------------------------------
4.4. accelerometerjoystick                        *love-accelerometerjoystick*
                                           *love-config-accelerometerjoystick*

filler

------------------------------------------------------------------------------
4.5. externalstorage      *love-externalstorage* *love-config-externalstorage*

filler

------------------------------------------------------------------------------
4.6. gammacorrect               *love-gammacorrect* *love-config-gammacorrect*

filler

------------------------------------------------------------------------------
4.7. window                                 *love-window* *love-config-window*

filler

------------------------------------------------------------------------------
4.8. modules                              *love-modules* *love-config-modules*

filler
