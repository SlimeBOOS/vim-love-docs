*love.txt*           Documentation for the LOVE game framework version 0.10.1.	

                        _       o__o __      __ ______ 
                       | |     / __ \\ \    / //  ____\
                       | |    | |  | |\ \  / / | |__   
                       | |    | |  | | \ \/ /  |  __|  
                       | |____| |__| |  \  /   | |____ 
                       \______|\____/    \/    \______/

                   The complete solution for Vim with LOVE.
                   Includes highlighting and documentation.


==============================================================================
CONTENT                                                         *love-content*

    1. Modules............................... |love-modules|
        1.1. love............................ |love.love|
            1.1.1. getVersion................ |love.getVersion|
        1.2. audio........................... |love.audio|
            1.2.1. getDistanceModel.......... |love.audio.getDistanceModel|
            1.2.2. getDopplerScale........... |love.audio.getDopplerScale|
            1.2.3. getSourceCount............ |love.audio.getSourceCount|
            1.2.4. getOrientation............ |love.audio.getOrientation|
            1.2.5. getPosition............... |love.audio.getPosition|
            1.2.6. getVelocity............... |love.audio.getVelocity|
            1.2.7. getVolume................. |love.audio.getVolume|
            1.2.8. newSource................. |love.audio.newSource|
            1.2.9. pause..................... |love.audio.pause|
            1.2.10. play..................... |love.audio.play|
            1.2.11. resume................... |love.audio.resume|
            1.2.12. rewind................... |love.audio.rewind|
            1.2.13. setDistanceModel......... |love.audio.setDistanceModel|
            1.2.14. setDopplerScale.......... |love.audio.setDopplerScale|
            1.2.15. setOrientation........... |love.audio.setOrientation|
            1.2.16. setPosition.............. |love.audio.setPosition|
            1.2.17. setVelocity.............. |love.audio.setVelocity|
            1.2.18. setVolume................ |love.audio.setVolume|
            1.2.19. stop..................... |love.audio.stop|
        1.3. event........................... |love.event|
            1.3.1. clear..................... |love.event.clear|
            1.3.2. poll...................... |love.event.poll|
            1.3.3. pump...................... |love.event.pump|
            1.3.4. push...................... |love.event.push|
            1.3.5. quit...................... |love.event.quit|
            1.3.6. wait...................... |love.event.wait|
        1.4. filesystem...................... |love.filesystem|
            1.4.1. append.................... |love.filesystem.append|
            1.4.2. areSymlinksEnabled........ |love.filesystem.areSymlinksEnabled|
            1.4.3. createDirectory........... |love.filesystem.createDirectory|
            1.4.4. exists.................... |love.filesystem.exists|
            1.4.5. getAppdataDirectory....... |love.filesystem.getAppdataDirectory|
            1.4.6. getDirectoryItems......... |love.filesystem.getDirectoryItems|
            1.4.7. getIdentity............... |love.filesystem.getIdentity|
            1.4.8. getLastModified........... |love.filesystem.getLastModified|
            1.4.9. getRealDirectory.......... |love.filesystem.getRealDirectory|
            1.4.10. getRequirePath........... |love.filesystem.getRequirePath|
            1.4.11. getSaveDirectory......... |love.filesystem.getSaveDirectory|
            1.4.12. getSize.................. |love.filesystem.getSize|
            1.4.13. getSourceBaseDirectory... |love.filesystem.getSourceBaseDirectory|
            1.4.14. getUserDirectory......... |love.filesystem.getUserDirectory|
            1.4.15. getWorkingDirectory...... |love.filesystem.getWorkingDirectory|
            1.4.16. isDirectory.............. |love.filesystem.isDirectory|
            1.4.17. isFile................... |love.filesystem.isFile|
            1.4.18. isFused.................. |love.filesystem.isFused|
            1.4.19. isSymlink................ |love.filesystem.isSymlink|
            1.4.20. lines.................... |love.filesystem.lines|
            1.4.21. load..................... |love.filesystem.load|
            1.4.22. mount.................... |love.filesystem.mount|
            1.4.23. newFile.................. |love.filesystem.newFile|
            1.4.24. newFileData.............. |love.filesystem.newFileData|
            1.4.25. read..................... |love.filesystem.read|
            1.4.26. remove................... |love.filesystem.remove|
            1.4.27. setIdentity.............. |love.filesystem.setIdentity|
            1.4.28. setRequirePath........... |love.filesystem.setRequirePath|
            1.4.29. setSource................ |love.filesystem.setSource|
            1.4.30. setSymlinksEnabled....... |love.filesystem.setSymlinksEnabled|
            1.4.31. unmount.................. |love.filesystem.unmount|
            1.4.32. write.................... |love.filesystem.write|
        1.5. graphics........................ |love.graphics|
            1.5.1. arc....................... |love.graphics.arc|
            1.5.2. circle.................... |love.graphics.circle|
            1.5.3. clear..................... |love.graphics.clear|
            1.5.4. discard................... |love.graphics.discard|
            1.5.5. draw...................... |love.graphics.draw|
            1.5.6. ellipse................... |love.graphics.ellipse|
            1.5.7. getBackgroundColor........ |love.graphics.getBackgroundColor|
            1.5.8. getBlendMode.............. |love.graphics.getBlendMode|
            1.5.9. getCanvas................. |love.graphics.getCanvas|
            1.5.10. getCanvasFormats......... |love.graphics.getCanvasFormats|
            1.5.11. getColor................. |love.graphics.getColor|
            1.5.12. getColorMask............. |love.graphics.getColorMask|
            1.5.13. getCompressedImageFormats |love.graphics.getCompressedImageFormats|
            1.5.14. getDefaultFilter......... |love.graphics.getDefaultFilter|
            1.5.15. getDimensions............ |love.graphics.getDimensions|
            1.5.16. getFont.................. |love.graphics.getFont|
            1.5.17. getHeight................ |love.graphics.getHeight|
            1.5.18. getLineJoin.............. |love.graphics.getLineJoin|
            1.5.19. getLineStyle............. |love.graphics.getLineStyle|
            1.5.20. getLineWidth............. |love.graphics.getLineWidth|
            1.5.21. getShader................ |love.graphics.getShader|
            1.5.22. getStats................. |love.graphics.getStats|
            1.5.23. getStencilTest........... |love.graphics.getStencilTest|
            1.5.24. getSupported............. |love.graphics.getSupported|
            1.5.25. getSystemLimits.......... |love.graphics.getSystemLimits|
            1.5.26. getPointSize............. |love.graphics.getPointSize|
            1.5.27. getRendererInfo.......... |love.graphics.getRendererInfo|
            1.5.28. getScissor............... |love.graphics.getScissor|
            1.5.29. getWidth................. |love.graphics.getWidth|
            1.5.30. intersectScissor......... |love.graphics.intersectScissor|
            1.5.31. isGammaCorrect........... |love.graphics.isGammaCorrect|
            1.5.32. isWireframe.............. |love.graphics.isWireframe|
            1.5.33. line..................... |love.graphics.line|
            1.5.34. newCanvas................ |love.graphics.newCanvas|
            1.5.35. newFont.................. |love.graphics.newFont|
            1.5.36. newMesh.................. |love.graphics.newMesh|
            1.5.37. newImage................. |love.graphics.newImage|
            1.5.38. newImageFont............. |love.graphics.newImageFont|
            1.5.39. newParticleSystem........ |love.graphics.newParticleSystem|
            1.5.40. newShader................ |love.graphics.newShader|
            1.5.41. newText.................. |love.graphics.newText|
            1.5.42. newQuad.................. |love.graphics.newQuad|
            1.5.43. newScreenshot............ |love.graphics.newScreenshot|
            1.5.44. newSpriteBatch........... |love.graphics.newSpriteBatch|
            1.5.45. newVideo................. |love.graphics.newVideo|
            1.5.46. origin................... |love.graphics.origin|
            1.5.47. points................... |love.graphics.points|
            1.5.48. polygon.................. |love.graphics.polygon|
            1.5.49. pop...................... |love.graphics.pop|
            1.5.50. present.................. |love.graphics.present|
            1.5.51. print.................... |love.graphics.print|
            1.5.52. printf................... |love.graphics.printf|
            1.5.53. push..................... |love.graphics.push|
            1.5.54. rectangle................ |love.graphics.rectangle|
            1.5.55. reset.................... |love.graphics.reset|
            1.5.56. rotate................... |love.graphics.rotate|
            1.5.57. scale.................... |love.graphics.scale|
            1.5.58. setBackgroundColor....... |love.graphics.setBackgroundColor|
            1.5.59. setBlendMode............. |love.graphics.setBlendMode|
            1.5.60. setCanvas................ |love.graphics.setCanvas|
            1.5.61. setColor................. |love.graphics.setColor|
            1.5.62. setColorMask............. |love.graphics.setColorMask|
            1.5.63. setDefaultFilter......... |love.graphics.setDefaultFilter|
            1.5.64. setFont.................. |love.graphics.setFont|
            1.5.65. setLineJoin.............. |love.graphics.setLineJoin|
            1.5.66. setLineStyle............. |love.graphics.setLineStyle|
            1.5.67. setLineWidth............. |love.graphics.setLineWidth|
            1.5.68. setNewFont............... |love.graphics.setNewFont|
            1.5.69. setShader................ |love.graphics.setShader|
            1.5.70. setPointSize............. |love.graphics.setPointSize|
            1.5.71. setScissor............... |love.graphics.setScissor|
            1.5.72. setStencilTest........... |love.graphics.setStencilTest|
            1.5.73. setWireframe............. |love.graphics.setWireframe|
            1.5.74. shear.................... |love.graphics.shear|
            1.5.75. stencil.................. |love.graphics.stencil|
            1.5.76. translate................ |love.graphics.translate|
        1.6. image........................... |love.image|
            1.6.1. isCompressed.............. |love.image.isCompressed|
            1.6.2. newCompressedData......... |love.image.newCompressedData|
            1.6.3. newImageData.............. |love.image.newImageData|
        1.7. joystick........................ |love.joystick|
            1.7.1. getJoystickCount.......... |love.joystick.getJoystickCount|
            1.7.2. getJoysticks.............. |love.joystick.getJoysticks|
            1.7.3. loadGamepadMappings....... |love.joystick.loadGamepadMappings|
            1.7.4. saveGamepadMappings....... |love.joystick.saveGamepadMappings|
            1.7.5. setGamepadMapping......... |love.joystick.setGamepadMapping|
        1.8. keyboard........................ |love.keyboard|
            1.8.1. getKeyFromScancode........ |love.keyboard.getKeyFromScancode|
            1.8.2. getScancodeFromKey........ |love.keyboard.getScancodeFromKey|
            1.8.3. hasKeyRepeat.............. |love.keyboard.hasKeyRepeat|
            1.8.4. hasTextInput.............. |love.keyboard.hasTextInput|
            1.8.5. isDown.................... |love.keyboard.isDown|
            1.8.6. isScancodeDown............ |love.keyboard.isScancodeDown|
            1.8.7. setKeyRepeat.............. |love.keyboard.setKeyRepeat|
            1.8.8. setTextInput.............. |love.keyboard.setTextInput|
        1.9. math............................ |love.math|
            1.9.1. compress.................. |love.math.compress|
            1.9.2. decompress................ |love.math.decompress|
            1.9.3. gammaToLinear............. |love.math.gammaToLinear|
            1.9.4. getRandomSeed............. |love.math.getRandomSeed|
            1.9.5. getRandomState............ |love.math.getRandomState|
            1.9.6. isConvex.................. |love.math.isConvex|
            1.9.7. linearToGamma............. |love.math.linearToGamma|
            1.9.8. newBezierCurve............ |love.math.newBezierCurve|
            1.9.9. newRandomGenerator........ |love.math.newRandomGenerator|
            1.9.10. noise.................... |love.math.noise|
            1.9.11. random................... |love.math.random|
            1.9.12. randomNormal............. |love.math.randomNormal|
            1.9.13. setRandomSeed............ |love.math.setRandomSeed|
            1.9.14. setRandomState........... |love.math.setRandomState|
            1.9.15. triangulate.............. |love.math.triangulate|
        1.10. mouse.......................... |love.mouse|
            1.10.1. getCursor................ |love.mouse.getCursor|
            1.10.2. getPosition.............. |love.mouse.getPosition|
            1.10.3. getRelativeMode.......... |love.mouse.getRelativeMode|
            1.10.4. getSystemCursor.......... |love.mouse.getSystemCursor|
            1.10.5. getX..................... |love.mouse.getX|
            1.10.6. getY..................... |love.mouse.getY|
            1.10.7. hasCursor................ |love.mouse.hasCursor|
            1.10.8. isDown................... |love.mouse.isDown|
            1.10.9. isGrabbed................ |love.mouse.isGrabbed|
            1.10.10. isVisible............... |love.mouse.isVisible|
            1.10.11. newCursor............... |love.mouse.newCursor|
            1.10.12. setCursor............... |love.mouse.setCursor|
            1.10.13. setGrabbed.............. |love.mouse.setGrabbed|
            1.10.14. setPosition............. |love.mouse.setPosition|
            1.10.15. setRelativeMode......... |love.mouse.setRelativeMode|
            1.10.16. setVisible.............. |love.mouse.setVisible|
            1.10.17. setX.................... |love.mouse.setX|
            1.10.18. setY.................... |love.mouse.setY|
        1.11. physics........................ |love.physics|
            1.11.1. getDistance.............. |love.physics.getDistance|
            1.11.2. getMeter................. |love.physics.getMeter|
            1.11.3. newBody.................. |love.physics.newBody|
            1.11.4. newChainShape............ |love.physics.newChainShape|
            1.11.5. newCircleShape........... |love.physics.newCircleShape|
            1.11.6. newDistanceJoint......... |love.physics.newDistanceJoint|
            1.11.7. newEdgeShape............. |love.physics.newEdgeShape|
            1.11.8. newFixture............... |love.physics.newFixture|
            1.11.9. newFrictionJoint......... |love.physics.newFrictionJoint|
            1.11.10. newGearJoint............ |love.physics.newGearJoint|
            1.11.11. newMotorJoint........... |love.physics.newMotorJoint|
            1.11.12. newMouseJoint........... |love.physics.newMouseJoint|
            1.11.13. newPolygonShape......... |love.physics.newPolygonShape|
            1.11.14. newPrismaticJoint....... |love.physics.newPrismaticJoint|
            1.11.15. newPulleyJoint.......... |love.physics.newPulleyJoint|
            1.11.16. newRectangleShape....... |love.physics.newRectangleShape|
            1.11.17. newRevoluteJoint........ |love.physics.newRevoluteJoint|
            1.11.18. newRopeJoint............ |love.physics.newRopeJoint|
            1.11.19. newWeldJoint............ |love.physics.newWeldJoint|
            1.11.20. newWheelJoint........... |love.physics.newWheelJoint|
            1.11.21. newWorld................ |love.physics.newWorld|
            1.11.22. setMeter................ |love.physics.setMeter|
        1.12. sound.......................... |love.sound|
            1.12.1. newDecoder............... |love.sound.newDecoder|
            1.12.2. newSoundData............. |love.sound.newSoundData|
        1.13. system......................... |love.system|
            1.13.1. getClipboardText......... |love.system.getClipboardText|
            1.13.2. getOS.................... |love.system.getOS|
            1.13.3. getPowerInfo............. |love.system.getPowerInfo|
            1.13.4. getProcessorCount........ |love.system.getProcessorCount|
            1.13.5. openURL.................. |love.system.openURL|
            1.13.6. setClipboardText......... |love.system.setClipboardText|
            1.13.7. vibrate.................. |love.system.vibrate|
        1.14. thread......................... |love.thread|
            1.14.1. getChannel............... |love.thread.getChannel|
            1.14.2. newChannel............... |love.thread.newChannel|
            1.14.3. newThread................ |love.thread.newThread|
        1.15. timer.......................... |love.timer|
            1.15.1. getAverageDelta.......... |love.timer.getAverageDelta|
            1.15.2. getDelta................. |love.timer.getDelta|
            1.15.3. getFPS................... |love.timer.getFPS|
            1.15.4. getTime.................. |love.timer.getTime|
            1.15.5. sleep.................... |love.timer.sleep|
            1.15.6. step..................... |love.timer.step|
        1.16. touch.......................... |love.touch|
            1.16.1. getPosition.............. |love.touch.getPosition|
            1.16.2. getPressure.............. |love.touch.getPressure|
            1.16.3. getTouches............... |love.touch.getTouches|
        1.17. video.......................... |love.video|
            1.17.1. newVideoStream........... |love.video.newVideoStream|
        1.18. window......................... |love.window|
            1.18.1. close.................... |love.window.close|
            1.18.2. fromPixels............... |love.window.fromPixels|
            1.18.3. getDisplayName........... |love.window.getDisplayName|
            1.18.4. getFullscreen............ |love.window.getFullscreen|
            1.18.5. getFullscreenModes....... |love.window.getFullscreenModes|
            1.18.6. getIcon.................. |love.window.getIcon|
            1.18.7. getMode.................. |love.window.getMode|
            1.18.8. getPixelScale............ |love.window.getPixelScale|
            1.18.9. getPosition.............. |love.window.getPosition|
            1.18.10. getTitle................ |love.window.getTitle|
            1.18.11. hasFocus................ |love.window.hasFocus|
            1.18.12. hasMouseFocus........... |love.window.hasMouseFocus|
            1.18.13. isCreated............... |love.window.isCreated|
            1.18.14. isDisplaySleepEnabled... |love.window.isDisplaySleepEnabled|
            1.18.15. isVisible............... |love.window.isVisible|
            1.18.16. maximize................ |love.window.maximize|
            1.18.17. minimize................ |love.window.minimize|
            1.18.18. requestAttention........ |love.window.requestAttention|
            1.18.19. setDisplaySleepEnabled.. |love.window.setDisplaySleepEnabled|
            1.18.20. setFullscreen........... |love.window.setFullscreen|
            1.18.21. setIcon................. |love.window.setIcon|
            1.18.22. setMode................. |love.window.setMode|
            1.18.23. setPosition............. |love.window.setPosition|
            1.18.24. setTitle................ |love.window.setTitle|
            1.18.25. showMessageBox.......... |love.window.showMessageBox|
            1.18.26. toPixels................ |love.window.toPixels|

==============================================================================
1. Modules                                                      *love.modules*

The modules for LOVE, i.e. love.graphics

------------------------------------------------------------------------------
1.1. love                                                          *love.love*

General functions

- Types: None
- Enums: None

------------------------------------------------------------------------------
1.1.1. getVersion                                            *love.getVersion*

Gets the current running version of LÖVE.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  major: <number> The major version of LÖVE, i.e. 0 for version 
              0.9.1.
            -  minor: <number> The minor version of LÖVE, i.e. 9 for version 
              0.9.1.
            -  revision: <number> The revision version of LÖVE, i.e. 1 for 
              version 0.9.1.
            -  codename: <string> The codename of the current version, i.e. 
              "Baby Inspector" for version 0.9.1.

------------------------------------------------------------------------------
1.2. audio                                                        *love.audio*

Provides an interface to create noise with the user's speakers.

- Types: 
    - Source                                                     *love-Source*
- Enums: 
    - DistanceModel                                       *love-DistanceModel*
    - SourceType                                             *love-SourceType*
    - TimeUnit                                                 *love-TimeUnit*

------------------------------------------------------------------------------
1.2.1. getDistanceModel                          *love.audio.getDistanceModel*

Returns the distance attenuation model.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  model: <DistanceModel> The current distance model. The default 
              is 'inverseclamped'.

------------------------------------------------------------------------------
1.2.2. getDopplerScale                            *love.audio.getDopplerScale*

Gets the current global scale factor for velocity-based doppler effects.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  scale: <number> The current doppler scale factor.

------------------------------------------------------------------------------
1.2.3. getSourceCount                              *love.audio.getSourceCount*

Returns the number of sources which are currently playing or paused.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  numSources: <number> The number of sources which are currently 
              playing or paused.

------------------------------------------------------------------------------
1.2.4. getOrientation                              *love.audio.getOrientation*

Returns the orientation of the listener.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  fx: <number> The X component of the forward vector of the 
              listener orientation.
            -  fy: <number> The Y component of the forward vector of the 
              listener orientation.
            -  fz: <number> The Z component of the forward vector of the 
              listener orientation.
            -  ux: <number> The X component of the up vector of the listener 
              orientation.
            -  uy: <number> The Y component of the up vector of the listener 
              orientation.
            -  uz: <number> The Z component of the up vector of the listener 
              orientation.

------------------------------------------------------------------------------
1.2.5. getPosition                                    *love.audio.getPosition*

Returns the position of the listener.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  x: <number> The X position of the listener.
            -  y: <number> The Y position of the listener.
            -  z: <number> The Z position of the listener.

------------------------------------------------------------------------------
1.2.6. getVelocity                                    *love.audio.getVelocity*

Returns the velocity of the listener.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  x: <number> The X velocity of the listener.
            -  y: <number> The Y velocity of the listener.
            -  z: <number> The Z velocity of the listener.

------------------------------------------------------------------------------
1.2.7. getVolume                                        *love.audio.getVolume*

Returns the master volume.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  volume: <number> The current master volume.

------------------------------------------------------------------------------
1.2.8. newSource                                        *love.audio.newSource*

Creates a new Source from a file or SoundData. Sources created from SoundData 
are always static.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filepath to create a Source from.
            -  type: <SourceType> Streaming or static source.
        - Returns:
            -  source: <Source> A new Source that can play the specified 
              audio.
    2:
        - Arguments:
            -  file: <File> A File pointing to an audio file.
            -  type: <SourceType> Streaming or static source.
        - Returns:
            -  source: <Source> A new Source that can play the specified 
              audio.
    3:
        - Arguments:
            -  decoder: <Decoder> The Decoder to create a Source from.
            -  type: <SourceType> Streaming or static source.
        - Returns:
            -  source: <Source> A new Source that can play the specified 
              audio.
    4:
        - Arguments:
            -  soundData: <SoundData> The SoundData to create a Source from.
        - Returns:
            -  source: <Source> A new Source that can play the specified 
              audio. The SourceType of the returned audio is "static".
    5:
        - Arguments:
            -  fileData: <FileData> The FileData to create a Source from.
        - Returns:
            -  source: <Source> A new Source that can play the specified 
              audio.

------------------------------------------------------------------------------
1.2.9. pause                                                *love.audio.pause*

Pauses all audio

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  source: <Source> The source on which to pause the playback.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.10. play                                                 *love.audio.play*

Plays the specified Source.

Variants:
    1:
        - Arguments:
            -  source: <Source> The Source to play.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.11. resume                                             *love.audio.resume*

Resumes all audio

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  source: <Source> The source on which to resume the playback.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.12. rewind                                             *love.audio.rewind*

Rewinds all playing audio.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  source: <Source> The source to rewind.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.13. setDistanceModel                         *love.audio.setDistanceModel*

Sets the distance attenuation model.

Variants:
    1:
        - Arguments:
            -  model: <DistanceModel> The new distance model.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.14. setDopplerScale                           *love.audio.setDopplerScale*

Sets a global scale factor for velocity-based doppler effects. The default 
scale value is 1.

Variants:
    1:
        - Arguments:
            -  scale: <number> The new doppler scale factor. The scale must 
              be greater than 0.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.15. setOrientation                             *love.audio.setOrientation*

Sets the orientation of the listener.

Variants:
    1:
        - Arguments:
            -  fx: <number> The X component of the forward vector of the 
              listener orientation.
            -  fy: <number> The Y component of the forward vector of the 
              listener orientation.
            -  fz: <number> The Z component of the forward vector of the 
              listener orientation.
            -  ux: <number> The X component of the up vector of the listener 
              orientation.
            -  uy: <number> The Y component of the up vector of the listener 
              orientation.
            -  uz: <number> The Z component of the up vector of the listener 
              orientation.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.16. setPosition                                   *love.audio.setPosition*

Sets the position of the listener, which determines how sounds play.

Variants:
    1:
        - Arguments:
            -  x: <number> The X position of the listener.
            -  y: <number> The Y position of the listener.
            -  z: <number> The Z position of the listener.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.17. setVelocity                                   *love.audio.setVelocity*

Sets the velocity of the listener.

Variants:
    1:
        - Arguments:
            -  x: <number> The X velocity of the listener.
            -  y: <number> The Y velocity of the listener.
            -  z: <number> The Z velocity of the listener.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.18. setVolume                                       *love.audio.setVolume*

Sets the master volume.

Variants:
    1:
        - Arguments:
            -  volume: <number> 1.0f is max and 0.0f is off.
        - Returns: Nothing

------------------------------------------------------------------------------
1.2.19. stop                                                 *love.audio.stop*

Stops all playing audio.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  source: <Source> The source on which to stop the playback.
        - Returns: Nothing

------------------------------------------------------------------------------
1.3. event                                                        *love.event*

Manages events, like keypresses.

- Types: None
- Enums: 
    - Event                                                       *love-Event*

------------------------------------------------------------------------------
1.3.1. clear                                                *love.event.clear*

Clears the event queue.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.3.2. poll                                                  *love.event.poll*

Returns an iterator for messages in the event queue.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  i: <function> Iterator function usable in a for loop.

------------------------------------------------------------------------------
1.3.3. pump                                                  *love.event.pump*

Pump events into the event queue. This is a low-level function, and is 
usually not called by the user, but by love.run. Note that this does need to 
be called for any OS to think you're still running, and if you want to handle 
OS-generated events at all (think callbacks). love.event.pump can only be 
called from the main thread, but afterwards, the rest of love.event can be 
used from any other thread.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.3.4. push                                                  *love.event.push*

Adds an event to the event queue.

Variants:
    1:
        - Arguments:
            -  e: <Event> The name of the event.
            -  a: <mixed> First event argument.
            -  b: <mixed> Second event argument.
            -  c: <mixed> Third event argument.
            -  d: <mixed> Fourth event argument.
        - Returns: Nothing

------------------------------------------------------------------------------
1.3.5. quit                                                  *love.event.quit*

Adds the quit event to the queue. The quit event is a signal for the event 
handler to close LÖVE. It's possible to abort the exit process with the 
love.quit callback.

Variants:
    1:
        - Arguments:
            -  exitstatus: <number> The program exit status to use when 
              closing the application.
        - Returns: Nothing

------------------------------------------------------------------------------
1.3.6. wait                                                  *love.event.wait*

Like love.event.poll but blocks until there is an event in the queue.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  e: <Event> The type of event.
            -  a: <mixed> First event argument.
            -  b: <mixed> Second event argument.
            -  c: <mixed> Third event argument.
            -  d: <mixed> Fourth event argument.

------------------------------------------------------------------------------
1.4. filesystem                                              *love.filesystem*

Provides an interface to the user's filesystem.

- Types: 
    - File                                                         *love-File*
    - FileData                                                 *love-FileData*
- Enums: 
    - BufferMode                                             *love-BufferMode*
    - FileDecoder                                           *love-FileDecoder*
    - FileMode                                                 *love-FileMode*

------------------------------------------------------------------------------
1.4.1. append                                         *love.filesystem.append*

Append data to an existing file.

Variants:
    1:
        - Arguments:
            -  name: <string> The name (and path) of the file.
            -  data: <string> The data that should be written to the file
            -  size: <number> How many bytes to write.
        - Returns:
            -  success: <boolean> True if the operation was successful, or 
              nil if there was an error.
            -  errormsg: <string> The error message on failure.

------------------------------------------------------------------------------
1.4.2. areSymlinksEnabled                 *love.filesystem.areSymlinksEnabled*

Gets whether love.filesystem follows symbolic links.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  enable: <boolean> Whether love.filesystem follows symbolic 
              links.

------------------------------------------------------------------------------
1.4.3. createDirectory                       *love.filesystem.createDirectory*

Creates a directory.

Variants:
    1:
        - Arguments:
            -  name: <string> The directory to create.
        - Returns:
            -  success: <boolean> True if the directory was created, false if 
              not.

------------------------------------------------------------------------------
1.4.4. exists                                         *love.filesystem.exists*

Check whether a file or directory exists.

Variants:
    1:
        - Arguments:
            -  filename: <string> The path to a potential file or directory.
        - Returns:
            -  exists: <boolean> True if there is a file or directory with 
              the specified name. False otherwise.

------------------------------------------------------------------------------
1.4.5. getAppdataDirectory               *love.filesystem.getAppdataDirectory*

Returns the application data directory (could be the same as 
getUserDirectory)

Variants:
    1:
        - Arguments: None
        - Returns:
            -  path: <string> The path of the application data directory.

------------------------------------------------------------------------------
1.4.6. getDirectoryItems                   *love.filesystem.getDirectoryItems*

Returns a table with the names of files and subdirectories in the specified 
path. The table is not sorted in any way; the order is undefined. If the path 
passed to the function exists in the game and the save directory, it will 
list the files and directories from both places.

Variants:
    1:
        - Arguments:
            -  dir: <string> The directory.
        - Returns:
            -  items: <table> A sequence with the names of all files and 
              subdirectories as strings.

------------------------------------------------------------------------------
1.4.7. getIdentity                               *love.filesystem.getIdentity*

Gets the write directory name for your game. Note that this only returns the 
name of the folder to store your files in, not the full location.

Variants:
    1:
        - Arguments:
            -  name: <string> The identity that is used as write directory.
        - Returns: Nothing

------------------------------------------------------------------------------
1.4.8. getLastModified                       *love.filesystem.getLastModified*

Gets the last modification time of a file.

Variants:
    1:
        - Arguments:
            -  filename: <string> The path and name to a file.
        - Returns:
            -  modtime: <number> The last modification time in seconds since 
              the unix epoch or nil on failure.
            -  errormsg: <string> The error message on failure.

------------------------------------------------------------------------------
1.4.9. getRealDirectory                     *love.filesystem.getRealDirectory*

Gets the platform-specific absolute path of the directory containing a 
filepath. This can be used to determine whether a file is inside the save 
directory or the game's source .love.

Variants:
    1:
        - Arguments:
            -  filepath: <string> The filepath to get the directory of.
        - Returns:
            -  realdir: <string> The platform-specific full path of the 
              directory containing the filepath.

------------------------------------------------------------------------------
1.4.10. getRequirePath                        *love.filesystem.getRequirePath*

Gets the filesystem paths that will be searched when require is called. The 
paths string returned by this function is a sequence of path templates 
separated by semicolons. The argument passed to require will be inserted in 
place of any question mark ("?") character in each template (after the dot 
characters in the argument passed to require are replaced by directory 
separators.) The paths are relative to the game's source and save 
directories, as well as any paths mounted with love.filesystem.mount.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  paths: <string> The paths that the require function will check 
              in love's filesystem.

------------------------------------------------------------------------------
1.4.11. getSaveDirectory                    *love.filesystem.getSaveDirectory*

Gets the full path to the designated save directory. This can be useful if 
you want to use the standard io library (or something else) to read or write 
in the save directory.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  path: <string> The absolute path to the save directory.

------------------------------------------------------------------------------
1.4.12. getSize                                      *love.filesystem.getSize*

Gets the size in bytes of a file.

Variants:
    1:
        - Arguments:
            -  filename: <string> The path and name to a file.
        - Returns:
            -  size: <number> The size in bytes of the file, or nil on 
              failure.
            -  errormsg: <string> The error message on failure.

------------------------------------------------------------------------------
1.4.13. getSourceBaseDirectory        *love.filesystem.getSourceBaseDirectory*

Returns the full path to the directory containing the .love file. If the game 
is fused to the LÖVE executable, then the directory containing the 
executable is returned. If love.filesystem.isFused is true, the path returned 
by this function can be passed to love.filesystem.mount, which will make the 
directory containing the main game readable by love.filesystem.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  path: <string> The full platform-dependent path of the 
              directory containing the .love file.

------------------------------------------------------------------------------
1.4.14. getUserDirectory                    *love.filesystem.getUserDirectory*

Returns the path of the user's directory.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  path: <string> The path of the user's directory.

------------------------------------------------------------------------------
1.4.15. getWorkingDirectory              *love.filesystem.getWorkingDirectory*

Gets the current working directory.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  path: <string> The current working directory.

------------------------------------------------------------------------------
1.4.16. isDirectory                              *love.filesystem.isDirectory*

Check whether something is a directory.

Variants:
    1:
        - Arguments:
            -  path: <string> The path to a potential directory.
        - Returns:
            -  isDir: <boolean> True if there is a directory with the 
              specified name. False otherwise.

------------------------------------------------------------------------------
1.4.17. isFile                                        *love.filesystem.isFile*

Check whether something is a file.

Variants:
    1:
        - Arguments:
            -  path: <string> The path to a potential file.
        - Returns:
            -  isFile: <boolean> True if there is a file with the specified 
              name. False otherwise.

------------------------------------------------------------------------------
1.4.18. isFused                                      *love.filesystem.isFused*

Gets whether the game is in fused mode or not. If a game is in fused mode, 
its save directory will be directly in the Appdata directory instead of 
Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries 
which are located in the save directory. A game is in fused mode if the 
source .love has been fused to the executable (see Game Distribution), or if 
"--fused" has been given as a command-line argument when starting the game.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  fused: <boolean> True if the game is in fused mode, false 
              otherwise.

------------------------------------------------------------------------------
1.4.19. isSymlink                                  *love.filesystem.isSymlink*

Gets whether a filepath is actually a symbolic link. If symbolic links are 
not enabled (via love.filesystem.setSymlinksEnabled), this function will 
always return false.

Variants:
    1:
        - Arguments:
            -  path: <string> The file or directory path to check.
        - Returns:
            -  symlink: <boolean> True if the path is a symbolic link, false 
              otherwise.

------------------------------------------------------------------------------
1.4.20. lines                                          *love.filesystem.lines*

Iterate over the lines in a file.

Variants:
    1:
        - Arguments:
            -  name: <string> The name (and path) of the file.
        - Returns:
            -  iterator: <function> A function that iterates over all the 
              lines in the file.

------------------------------------------------------------------------------
1.4.21. load                                            *love.filesystem.load*

Load a file (but not run it).

Variants:
    1:
        - Arguments:
            -  name: <string> The name (and path) of the file.
        - Returns:
            -  chunk: <function> The loaded chunk.

------------------------------------------------------------------------------
1.4.22. mount                                          *love.filesystem.mount*

Mounts a zip file or folder in the game's save directory for reading.

Variants:
    1:
        - Arguments:
            -  archive: <string> The folder or zip file in the game's save 
              directory to mount.
            -  mountpoint: <string> The new path the archive will be mounted 
              to.
        - Returns:
            -  success: <boolean> True if the archive was successfully 
              mounted, false otherwise.
    2:
        - Arguments:
            -  archive: <string> The folder or zip file in the game's save 
              directory to mount.
            -  mountpoint: <string> The new path the archive will be mounted 
              to.
            -  appendToPath: <string> Whether the archive will be searched 
              when reading a filepath before or after already-mounted archives. This 
              includes the game's source and save directories.
        - Returns:
            -  success: <boolean> True if the archive was successfully 
              mounted, false otherwise.

------------------------------------------------------------------------------
1.4.23. newFile                                      *love.filesystem.newFile*

Creates a new File object. It needs to be opened before it can be accessed.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filename of the file to read.
            -  mode: <FileMode> The mode to open the file in.
        - Returns:
            -  file: <File> The new File object, or nil if an error occurred.
            -  errorstr: <string> The error string if an error occurred.

------------------------------------------------------------------------------
1.4.24. newFileData                              *love.filesystem.newFileData*

Creates a new FileData object.

Variants:
    1:
        - Arguments:
            -  contents: <string> The contents of the file.
            -  name: <string> The name of the file.
            -  decoder: <FileDecoder> The method to use when decoding the 
              contents.
        - Returns:
            -  data: <FileData> Your new FileData.
    2:
        - Arguments:
            -  filepath: <string> Path to the file.
        - Returns:
            -  data: <FileData> The new FileData, or nil if an error 
              occurred.
            -  err: <string> The error string, if an error occurred.

------------------------------------------------------------------------------
1.4.25. read                                            *love.filesystem.read*

Read the contents of a file.

Variants:
    1:
        - Arguments:
            -  name: <string> The name (and path) of the file.
            -  bytes: <number> How many bytes to read.
        - Returns:
            -  contents: <string> The file contents.
            -  size: <number> How many bytes have been read.

------------------------------------------------------------------------------
1.4.26. remove                                        *love.filesystem.remove*

Removes a file or directory.

Variants:
    1:
        - Arguments:
            -  name: <string> The file or directory to remove.
        - Returns:
            -  success: <boolean> True if the file/directory was removed, 
              false otherwise.

------------------------------------------------------------------------------
1.4.27. setIdentity                              *love.filesystem.setIdentity*

Sets the write directory for your game. Note that you can only set the name 
of the folder to store your files in, not the location.

Variants:
    1:
        - Arguments:
            -  name: <string> The new identity that will be used as write 
              directory.
            -  appendToPath: <boolean> Whether the identity directory will be 
              searched when reading a filepath before or after the game's source directory 
              and any currently mounted archives.
        - Returns: Nothing

------------------------------------------------------------------------------
1.4.28. setRequirePath                        *love.filesystem.setRequirePath*

Sets the filesystem paths that will be searched when require is called. The 
paths string given to this function is a sequence of path templates separated 
by semicolons. The argument passed to require will be inserted in place of 
any question mark ("?") character in each template (after the dot characters 
in the argument passed to require are replaced by directory separators.) The 
paths are relative to the game's source and save directories, as well as any 
paths mounted with love.filesystem.mount.

Variants:
    1:
        - Arguments:
            -  paths: <string> The paths that the require function will check 
              in love's filesystem.
        - Returns: Nothing

------------------------------------------------------------------------------
1.4.29. setSource                                  *love.filesystem.setSource*

Sets the source of the game, where the code is present. This function can 
only be called once, and is normally automatically done by LÖVE.

Variants:
    1:
        - Arguments:
            -  path: <string> Absolute path to the game's source folder.
        - Returns: Nothing

------------------------------------------------------------------------------
1.4.30. setSymlinksEnabled                *love.filesystem.setSymlinksEnabled*

Sets whether love.filesystem follows symbolic links. It is enabled by default 
in version 0.10.0 and newer, and disabled by default in 0.9.2.

Variants:
    1:
        - Arguments:
            -  enable: <boolean> Whether love.filesystem should follow 
              symbolic links.
        - Returns: Nothing

------------------------------------------------------------------------------
1.4.31. unmount                                      *love.filesystem.unmount*

Unmounts a zip file or folder previously mounted for reading with 
love.filesystem.mount.

Variants:
    1:
        - Arguments:
            -  archive: <string> The folder or zip file in the game's save 
              directory which is currently mounted.
        - Returns:
            -  success: <boolean> True if the archive was successfully 
              unmounted, false otherwise.

------------------------------------------------------------------------------
1.4.32. write                                          *love.filesystem.write*

Write data to a file. If you are getting the error message "Could not set 
write directory", try setting the save directory. This is done either with 
love.filesystem.setIdentity or by setting the identity field in love.conf.

Variants:
    1:
        - Arguments:
            -  name: <string> The name (and path) of the file.
            -  data: <string> The data that should be written to the file
            -  size: <number> How many bytes to write.
        - Returns:
            -  success: <boolean> If the operation was successful

------------------------------------------------------------------------------
1.5. graphics                                                  *love.graphics*

The primary responsibility for the love.graphics module is the drawing of lines, shapes, text, Images and other Drawable objects onto the screen. Its secondary responsibilities include loading external files (including Images and Fonts) into memory, creating specialized objects (such as ParticleSystems or Framebuffers) and managing screen geometry.

LÖVE's coordinate system is rooted in the upper-left corner of the screen, which is at location (0, 0). The x-axis is horizontal: larger values are further to the right. The y-axis is vertical: larger values are further towards the bottom.

In many cases, you draw images or shapes in terms of their upper-left corner (See the picture above).

Many of the functions are used to manipulate the graphics coordinate system, which is essentially the way coordinates are mapped to the display. You can change the position, scale, and even rotation in this way.

- Types: 
    - Canvas                                                     *love-Canvas*
    - Font                                                         *love-Font*
    - Mesh                                                         *love-Mesh*
    - Image                                                       *love-Image*
    - ParticleSystem                                     *love-ParticleSystem*
    - Quad                                                         *love-Quad*
    - Shader                                                     *love-Shader*
    - SpriteBatch                                           *love-SpriteBatch*
    - Text                                                         *love-Text*
    - Texture                                                   *love-Texture*
    - Video                                                       *love-Video*
- Enums: 
    - AlignMode                                               *love-AlignMode*
    - ArcType                                                   *love-ArcType*
    - AreaSpreadDistribution                     *love-AreaSpreadDistribution*
    - BlendAlphaMode                                     *love-BlendAlphaMode*
    - BlendMode                                               *love-BlendMode*
    - CanvasFormat                                         *love-CanvasFormat*
    - CompareMode                                           *love-CompareMode*
    - DrawMode                                                 *love-DrawMode*
    - FilterMode                                             *love-FilterMode*
    - GraphicsFeature                                   *love-GraphicsFeature*
    - GraphicsLimit                                       *love-GraphicsLimit*
    - LineJoin                                                 *love-LineJoin*
    - LineStyle                                               *love-LineStyle*
    - MeshDrawMode                                         *love-MeshDrawMode*
    - ParticleInsertMode                             *love-ParticleInsertMode*
    - PointStyle                                             *love-PointStyle*
    - SpriteBatchUsage                                 *love-SpriteBatchUsage*
    - StackType                                               *love-StackType*
    - StencilAction                                       *love-StencilAction*
    - WrapMode                                                 *love-WrapMode*

------------------------------------------------------------------------------
1.5.1. arc                                                 *love.graphics.arc*

Draws a filled or unfilled arc at position (x, y). The arc is drawn from 
angle1 to angle2 in radians. The segments parameter determines how many 
segments are used to draw the arc. The more segments, the smoother the edge.

Variants:
    1:
        - Arguments:
            -  drawmode: <DrawMode> How to draw the arc.
            -  x: <number> The position of the center along x-axis.
            -  y: <number> The position of the center along y-axis.
            -  radius: <number> Radius of the arc.
            -  angle1: <number> The angle at which the arc begins.
            -  angle2: <number> The angle at which the arc terminates.
            -  segments: <number> The number of segments used for drawing the 
              arc.
        - Returns: Nothing
    2:
        - Arguments:
            -  drawmode: <DrawMode> How to draw the arc.
            -  arctype: <ArcType> The type of arc to draw.
            -  x: <number> The position of the center along x-axis.
            -  y: <number> The position of the center along y-axis.
            -  radius: <number> Radius of the arc.
            -  angle1: <number> The angle at which the arc begins.
            -  angle2: <number> The angle at which the arc terminates.
            -  segments: <number> The number of segments used for drawing the 
              arc.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.2. circle                                           *love.graphics.circle*

Draws a circle.

Variants:
    1:
        - Arguments:
            -  mode: <DrawMode> How to draw the circle.
            -  x: <number> The position of the center along x-axis.
            -  y: <number> The position of the center along y-axis.
            -  radius: <number> The radius of the circle.
            -  segments: <number> The number of segments used for drawing the 
              circle.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.3. clear                                             *love.graphics.clear*

Clears the screen to the background color in LÖVE 0.9.2 and earlier, or to 
the specified color in 0.10.0 and newer. This function is called 
automatically before love.draw in the default love.run function. See the 
example in love.run for a typical use of this function. Note that the scissor 
area bounds the cleared region.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  r: <number> The red channel of the color to clear the screen 
              to.
            -  g: <number> The green channel of the color to clear the screen 
              to.
            -  b: <number> The blue channel of the color to clear the screen 
              to.
            -  a: <number> The alpha channel of the color to clear the screen 
              to.
        - Returns: Nothing
    3:
        - Arguments:
            -  color: <table> A table in the form of {r, g, b, a} containing 
              the color to clear the first active Canvas to.
            -  ...: <table> Additional tables for each active Canvas.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.4. discard                                         *love.graphics.discard*

Discards (trashes) the contents of the screen or active Canvas. This is a 
performance optimization function with niche use cases. If the active Canvas 
has just been changed and the "replace" BlendMode is about to be used to draw 
something which covers the entire screen, calling love.graphics.discard 
rather than calling love.graphics.clear or doing nothing may improve 
performance on mobile devices. On some desktop systems this function may do 
nothing.

Variants:
    1:
        - Arguments:
            -  discardcolor: <boolean> Whether to discard the texture(s) of 
              the active Canvas(es) (the contents of the screen if no Canvas is active).
            -  discardstencil: <boolean> Whether to discard the contents of 
              the stencil buffer of the screen / active Canvas.
        - Returns: Nothing
    2:
        - Arguments:
            -  discardcolors: <table> An array containing boolean values 
              indicating whether to discard the texture of each active Canvas, when 
              multiple simultaneous Canvases are active.
            -  discardstencil: <boolean> Whether to discard the contents of 
              the stencil buffer of the screen / active Canvas.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.5. draw                                               *love.graphics.draw*

Draws objects on screen. Drawable objects are loaded images, but may be other 
kinds of Drawable objects, such as a ParticleSystem. In addition to simple 
drawing, this function can rotate and scale the object at the same time, as 
well as offset the image (for example, to center the image at the chosen 
coordinates). love.graphics.draw anchors from the top left corner by default. 
You can specify a negative value for sx or sy to flip the drawable 
horizontally or vertically. The pivotal point is (x, y) on the screen and 
(ox, oy) in the internal coordinate system of the drawable object, before 
rotation and scaling. The object is scaled by (sx, sy), then rotated by r 
around the pivotal point. The origin offset values are most often used to 
shift the images up and left by half of its height and width, so that 
(effectively) the specified x and y coordinates are where the center of the 
image will end up.

Variants:
    1:
        - Arguments:
            -  drawable: <Drawable> A drawable object.
            -  x: <number> The position to draw the object (x-axis).
            -  y: <number> The position to draw the object (y-axis).
            -  r: <number> Orientation (radians).
            -  sx: <number> Scale factor (x-axis). Can be negative.
            -  sy: <number> Scale factor (y-axis). Can be negative.
            -  ox: <number> Origin offset (x-axis). (A value of 20 would 
              effectively move your drawable object 20 pixels to the left.)
            -  oy: <number> Origin offset (y-axis). (A value of 20 would 
              effectively move your drawable object 20 pixels up.)
            -  kx: <number> Shearing factor (x-axis).
            -  ky: <number> Shearing factor (y-axis).
        - Returns: Nothing
    2:
        - Arguments:
            -  texture: <Texture> A Texture (Image or Canvas) to texture the 
              Quad with.
            -  quad: <Quad> The Quad to draw on screen.
            -  x: <number> The position to draw the object (x-axis).
            -  y: <number> The position to draw the object (y-axis).
            -  r: <number> Orientation (radians).
            -  sx: <number> Scale factor (x-axis). Can be negative.
            -  sy: <number> Scale factor (y-axis). Can be negative.
            -  ox: <number> Origin offset (x-axis).
            -  oy: <number> Origin offset (y-axis)
            -  kx: <number> Shearing factor (x-axis).
            -  ky: <number> Shearing factor (y-axis).
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.6. ellipse                                         *love.graphics.ellipse*

Draws an ellipse.

Variants:
    1:
        - Arguments:
            -  mode: <DrawMode> How to draw the ellipse.
            -  x: <number> The position of the center along x-axis.
            -  y: <number> The position of the center along y-axis.
            -  radiusx: <number> The radius of the ellipse along the x-axis 
              (half the ellipse's width.)
            -  radiusy: <number> The radius of the ellipse along the y-axis 
              (half the ellipse's height.)
        - Returns: Nothing
    2:
        - Arguments:
            -  mode: <DrawMode> How to draw the ellipse.
            -  x: <number> The position of the center along x-axis.
            -  y: <number> The position of the center along y-axis.
            -  radiusx: <number> The radius of the ellipse along the x-axis 
              (half the ellipse's width.)
            -  radiusy: <number> The radius of the ellipse along the y-axis 
              (half the ellipse's height.)
            -  segments: <number> The number of segments used for drawing the 
              ellipse.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.7. getBackgroundColor                   *love.graphics.getBackgroundColor*

Gets the current background color.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  r: <number> The red component (0-255).
            -  g: <number> The green component (0-255).
            -  b: <number> The blue component (0-255).
            -  a: <number> The alpha component (0-255).

------------------------------------------------------------------------------
1.5.8. getBlendMode                               *love.graphics.getBlendMode*

Gets the blending mode.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  mode: <BlendMode> The current blend mode.
            -  alphamode: <BlendAlphaMode> The current blend alpha mode – 
              it determines how the alpha of drawn objects affects blending.

------------------------------------------------------------------------------
1.5.9. getCanvas                                     *love.graphics.getCanvas*

Gets the current target Canvas.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  canvas: <Canvas> The Canvas set by setCanvas. Returns nil if 
              drawing to the real screen.

------------------------------------------------------------------------------
1.5.10. getCanvasFormats                      *love.graphics.getCanvasFormats*

Gets the available Canvas formats, and whether each is supported.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  formats: <table> A table containing CanvasFormats as keys, and 
              a boolean indicating whether the format is supported as values. Not all 
              systems support all formats.

------------------------------------------------------------------------------
1.5.11. getColor                                      *love.graphics.getColor*

Gets the current color.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  r: <number> The red component (0-255).
            -  g: <number> The red component (0-255).
            -  b: <number> The blue component (0-255).
            -  a: <number> The alpha component (0-255).

------------------------------------------------------------------------------
1.5.12. getColorMask                              *love.graphics.getColorMask*

Gets the active color components used when drawing. Normally all 4 components 
are active unless love.graphics.setColorMask has been used. The color mask 
determines whether individual components of the colors of drawn objects will 
affect the color of the screen. They affect love.graphics.clear and 
Canvas:clear as well.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  r: <boolean> Whether the red color component is active when 
              rendering.
            -  g: <boolean> Whether the green color component is active when 
              rendering.
            -  b: <boolean> Whether the blue color component is active when 
              rendering.
            -  a: <boolean> Whether the alpha color component is active when 
              rendering.

------------------------------------------------------------------------------
1.5.13. getCompressedImageFormats    *love.graphics.getCompressedImageFormats*

Gets the available compressed image formats, and whether each is supported.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  formats: <table> A table containing CompressedFormats as keys, 
              and a boolean indicating whether the format is supported as values. Not all 
              systems support all formats.

------------------------------------------------------------------------------
1.5.14. getDefaultFilter                      *love.graphics.getDefaultFilter*

Returns the default scaling filters used with Images, Canvases, and Fonts.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  min: <FilterMode> Filter mode used when scaling the image 
              down.
            -  mag: <FilterMode> Filter mode used when scaling the image up.
            -  anisotropy: <number> Maximum amount of Anisotropic Filtering 
              used.

------------------------------------------------------------------------------
1.5.15. getDimensions                            *love.graphics.getDimensions*

Gets the width and height of the window.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  width: <number> The width of the window.
            -  height: <number> The height of the window.

------------------------------------------------------------------------------
1.5.16. getFont                                        *love.graphics.getFont*

Gets the current Font object.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  font: <Font> The current Font, or nil if none is set.

------------------------------------------------------------------------------
1.5.17. getHeight                                    *love.graphics.getHeight*

Gets the height of the window.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  height: <number> The height of the window.

------------------------------------------------------------------------------
1.5.18. getLineJoin                                *love.graphics.getLineJoin*

Gets the line join style.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  join: <LineJoin> The LineJoin style.

------------------------------------------------------------------------------
1.5.19. getLineStyle                              *love.graphics.getLineStyle*

Gets the line style.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  style: <LineStyle> The current line style.

------------------------------------------------------------------------------
1.5.20. getLineWidth                              *love.graphics.getLineWidth*

Gets the current line width.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  width: <number> The current line width.

------------------------------------------------------------------------------
1.5.21. getShader                                    *love.graphics.getShader*

Returns the current Shader. Returns nil if none is set.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  shader: <Shader> The current Shader.

------------------------------------------------------------------------------
1.5.22. getStats                                      *love.graphics.getStats*

Gets performance-related rendering statistics.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  drawcalls: <number> The number of draw calls made so far 
              during the current frame. This includes all internal draw calls – for 
              example, drawing smooth lines takes two draw calls.
            -  canvasswitches: <number> The number of times the active Canvas 
              has been switched so far during the current frame. This includes all internal 
              canvas switches – for example, calling Canvas:clear if the Canvas isn't 
              active will trigger two canvas switches.
            -  texturememory: <number> The estimated total size in bytes of 
              video memory used by all loaded Images, Canvases, and Fonts.
            -  images: <number> The number of Image objects currently loaded.
            -  canvases: <number> The number of Canvas objects currently 
              loaded.
            -  fonts: <number> The number of Font objects currently loaded.

------------------------------------------------------------------------------
1.5.23. getStencilTest                          *love.graphics.getStencilTest*

Gets whether stencil testing is enabled. When stencil testing is enabled, the 
geometry of everything that is drawn will be clipped / stencilled out based 
on whether it intersects with what has been previously drawn to the stencil 
buffer. Each Canvas has its own stencil buffer.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  enabled: <boolean> Whether stencil testing is enabled.
            -  inverted: <boolean> Whether the stencil test is inverted or 
              not.

------------------------------------------------------------------------------
1.5.24. getSupported                              *love.graphics.getSupported*

Gets the optional graphics features and whether they're supported on the 
system. Some older or low-end systems don't always support all graphics 
features.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  features: <table> A table containing GraphicsFeature keys, and 
              boolean values indicating whether each feature is supported.

------------------------------------------------------------------------------
1.5.25. getSystemLimits                        *love.graphics.getSystemLimits*

Gets the system-dependent maximum values for love.graphics features.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  limits: <table> A table containing GraphicsLimit keys, and 
              number values.

------------------------------------------------------------------------------
1.5.26. getPointSize                              *love.graphics.getPointSize*

Gets the point size.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  size: <number> The current point size.

------------------------------------------------------------------------------
1.5.27. getRendererInfo                        *love.graphics.getRendererInfo*

Gets information about the system's video card and drivers.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  name: <string> The name of the renderer, e.g. "OpenGL" or 
              "OpenGL ES".
            -  version: <string> The version of the renderer with some extra 
              driver-dependent version info, e.g. "2.1 INTEL-8.10.44".
            -  vendor: <string> The name of the graphics card vendor, e.g. 
              "Intel Inc".
            -  device: <string> The name of the graphics card, e.g. "Intel HD 
              Graphics 3000 OpenGL Engine".

------------------------------------------------------------------------------
1.5.28. getScissor                                  *love.graphics.getScissor*

Gets the current scissor box.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  x: <number> The x component of the top-left point of the box.
            -  y: <number> The y component of the top-left point of the box.
            -  width: <number> The width of the box.
            -  height: <number> The height of the box.

------------------------------------------------------------------------------
1.5.29. getWidth                                      *love.graphics.getWidth*

Gets the width of the window.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  width: <number> The width of the window.

------------------------------------------------------------------------------
1.5.30. intersectScissor                      *love.graphics.intersectScissor*

Sets the scissor to the rectangle created by the intersection of the 
specified rectangle with the existing scissor. If no scissor is active yet, 
it behaves like love.graphics.setScissor. The scissor limits the drawing area 
to a specified rectangle. This affects all graphics calls, including 
love.graphics.clear. The dimensions of the scissor is unaffected by graphical 
transformations (translate, scale, ...).

Variants:
    1:
        - Arguments:
            -  x: <number> The x-coordinate of the upper left corner of the 
              rectangle to intersect with the existing scissor rectangle.
            -  y: <number> The y-coordinate of the upper left corner of the 
              rectangle to intersect with the existing scissor rectangle.
            -  width: <number> The width of the rectangle to intersect with 
              the existing scissor rectangle.
            -  height: <number> The height of the rectangle to intersect with 
              the existing scissor rectangle.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.31. isGammaCorrect                          *love.graphics.isGammaCorrect*

Gets whether gamma-correct rendering is supported and enabled. It can be 
enabled by setting t.gammacorrect = true in love.conf. Not all devices 
support gamma-correct rendering, in which case it will be automatically 
disabled and this function will return false. It is supported on desktop 
systems which have graphics cards that are capable of using OpenGL 3 / 
DIrectX 10, and iOS devices that can use OpenGL ES 3.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  gammacorrect: <boolean> True if gamma-correct rendering is 
              supported and was enabled in love.conf, false otherwise.

------------------------------------------------------------------------------
1.5.32. isWireframe                                *love.graphics.isWireframe*

Gets whether wireframe mode is used when drawing.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  wireframe: <boolean> True if wireframe lines are used when 
              drawing, false if it's not.

------------------------------------------------------------------------------
1.5.33. line                                              *love.graphics.line*

Draws lines between points.

Variants:
    1:
        - Arguments:
            -  x1: <number> The position of first point on the x-axis.
            -  y1: <number> The position of first point on the y-axis.
            -  x2: <number> The position of second point on the x-axis.
            -  y2: <number> The position of second point on the y-axis.
            -  ...: <number> You can continue passing point positions to draw 
              a polyline.
        - Returns: Nothing
    2:
        - Arguments:
            -  points: <table> A table of point positions.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.34. newCanvas                                    *love.graphics.newCanvas*

Creates a new Canvas object for offscreen rendering. Antialiased Canvases 
have slightly higher system requirements than normal Canvases. Additionally, 
the supported maximum number of MSAA samples varies depending on the system. 
Use love.graphics.getSystemLimit to check. If the number of MSAA samples 
specified is greater than the maximum supported by the system, the Canvas 
will still be created but only using the maximum supported amount (this 
includes 0.)

Variants:
    1:
        - Arguments:
            -  width: <number> The width of the Canvas.
            -  height: <number> The height of the Canvas.
            -  format: <CanvasFormat> The desired texture mode of the Canvas.
            -  msaa: <number> The desired number of antialiasing samples used 
              when drawing to the Canvas.
        - Returns:
            -  canvas: <Canvas> A new Canvas object.

------------------------------------------------------------------------------
1.5.35. newFont                                        *love.graphics.newFont*

Creates a new Font.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filepath to the font file.
            -  size: <number> The size of the font in pixels.
        - Returns:
            -  font: <Font> A Font object which can be used to draw text on 
              screen.
    2:
        - Arguments:
            -  file: <File> A File pointing to a font.
            -  size: <number> The size of the font in pixels.
        - Returns:
            -  font: <Font> A Font object which can be used to draw text on 
              screen.
    3:
        - Arguments:
            -  filedata: <FileData> The encoded data to decode into a font.
            -  size: <number> The size of the font in pixels.
        - Returns:
            -  font: <Font> A Font object which can be used to draw text on 
              screen.
    4:
        - Arguments:
            -  size: <number> The size of the font in pixels.
        - Returns:
            -  font: <Font> A Font object which can be used to draw text on 
              screen.

------------------------------------------------------------------------------
1.5.36. newMesh                                        *love.graphics.newMesh*

Creates a new Mesh. Use Mesh:setTexture if the Mesh should be textured with 
an Image or Canvas when it's drawn.

Variants:
    1:
        - Arguments:
            -  vertices: <table> The table filled with vertex information 
              tables for each vertex as follows:
            -  mode: <MeshDrawMode> How the vertices are used when drawing. 
              The default mode "fan" is sufficient for simple convex polygons.
            -  usage: <SpriteBatchUsage> The expected usage of the Mesh. The 
              specified usage mode affects the Mesh's memory usage and performance.
        - Returns:
            -  mesh: <Mesh> The new Mesh.
    2:
        - Arguments:
            -  vertexcount: <number> The total number of vertices the Mesh 
              will use. Each vertex is initialized to {0,0, 0,0, 255,255,255,255}.
            -  mode: <MeshDrawMode> How the vertices are used when drawing. 
              The default mode "fan" is sufficient for simple convex polygons.
            -  usage: <SpriteBatchUsage> The expected usage of the Mesh. The 
              specified usage mode affects the Mesh's memory usage and performance.
        - Returns:
            -  mesh: <Mesh> The new Mesh.
    3:
        - Arguments:
            -  vertexformat: <table> A table in the form of {attribute, ...}. 
              Each attribute is a table which specifies a custom vertex attribute used for 
              each vertex.
            -  vertices: <table> The table filled with vertex information 
              tables for each vertex, in the form of {vertex, ...} where each vertex is a 
              table in the form of {attributecomponent, ...}.
            -  mode: <MeshDrawMode> How the vertices are used when drawing. 
              The default mode "fan" is sufficient for simple convex polygons.
            -  usage: <SpriteBatchUsage> The expected usage of the Mesh. The 
              specified usage mode affects the Mesh's memory usage and performance.
        - Returns:
            -  mesh: <Mesh> The new Mesh.
    4:
        - Arguments:
            -  vertexformat: <table> A table in the form of {attribute, ...}. 
              Each attribute is a table which specifies a custom vertex attribute used for 
              each vertex.
            -  vertexcount: <number> The total number of vertices the Mesh 
              will use.
            -  mode: <MeshDrawMode> How the vertices are used when drawing. 
              The default mode "fan" is sufficient for simple convex polygons.
            -  usage: <SpriteBatchUsage> The expected usage of the Mesh. The 
              specified usage mode affects the Mesh's memory usage and performance.
        - Returns:
            -  mesh: <Mesh> The new Mesh.

------------------------------------------------------------------------------
1.5.37. newImage                                      *love.graphics.newImage*

Creates a new Image from a filepath, FileData, an ImageData, or a 
CompressedImageData, and optionally generates or specifies mipmaps for the 
image.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filepath to the image file.
        - Returns:
            -  image: <Image> An Image object which can be drawn on screen.
    2:
        - Arguments:
            -  imageData: <ImageData> An ImageData object. The Image will use 
              this ImageData to reload itself when love.window.setMode is called.
        - Returns:
            -  image: <Image> An Image object which can be drawn on screen.
    3:
        - Arguments:
            -  compressedImageData: <CompressedImageData> A 
              CompressedImageData object. The Image will use this CompressedImageData to 
              reload itself when love.window.setMode is called.
        - Returns:
            -  image: <Image> An Image object which can be drawn on screen.
    4:
        - Arguments:
            -  filename: <string> The filepath to the image file (or a 
              FileData or ImageData or CompressedImageData object).
            -  flags: <table> A table containing the following fields:
        - Returns:
            -  image: <Image> An Image object which can be drawn on screen.

------------------------------------------------------------------------------
1.5.38. newImageFont                              *love.graphics.newImageFont*

Creates a new Font by loading a specifically formatted image. There can be up 
to 256 glyphs. In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding 
for the glyphs string.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filepath to the image file.
            -  glyphs: <string> A string of the characters in the image in 
              order from left to right.
            -  extraspacing: <number> Additional spacing (positive or 
              negative) to apply to each glyph in the Font.
        - Returns:
            -  font: <Font> A Font object which can be used to draw text on 
              screen.

------------------------------------------------------------------------------
1.5.39. newParticleSystem                    *love.graphics.newParticleSystem*

Creates a new ParticleSystem.

Variants:
    1:
        - Arguments:
            -  texture: <Texture> The Image or Canvas to use.
            -  buffer: <number> The max number of particles at the same time.
        - Returns:
            -  system: <ParticleSystem> A new ParticleSystem.

------------------------------------------------------------------------------
1.5.40. newShader                                    *love.graphics.newShader*

Creates a new Shader object for hardware-accelerated vertex and pixel 
effects. A Shader contains either vertex shader code, pixel shader code, or 
both. Vertex shader code must contain at least one function, named position, 
which is the function that will produce transformed vertex positions of drawn 
objects in screen-space. Pixel shader code must contain at least one 
function, named effect, which is the function that will produce the color 
which is blended onto the screen for each pixel a drawn object touches.

Variants:
    1:
        - Arguments:
            -  code: <string> The pixel shader or vertex shader code, or a 
              filename pointing to a file with the code.
        - Returns:
            -  shader: <Shader> A Shader object for use in drawing 
              operations.
    2:
        - Arguments:
            -  pixelcode: <string> The pixel shader code, or a filename 
              pointing to a file with the code.
            -  vertexcode: <string> The vertex shader code, or a filename 
              pointing to a file with the code.
        - Returns:
            -  shader: <Shader> A Shader object for use in drawing 
              operations.

------------------------------------------------------------------------------
1.5.41. newText                                        *love.graphics.newText*

Creates a new Font.

Variants:
    1:
        - Arguments:
            -  font: <Font> The font to use for the text.
            -  textstring: <string> The initial string of text that the new 
              Text object will contain. May be nil.
        - Returns:
            -  text: <Text> The new drawable Text object.

------------------------------------------------------------------------------
1.5.42. newQuad                                        *love.graphics.newQuad*

Creates a new Quad. The purpose of a Quad is to describe the result of the 
following transformation on any drawable object. The object is first scaled 
to dimensions sw * sh. The Quad then describes the rectangular area of 
dimensions width * height whose upper left corner is at position (x, y) 
inside the scaled object.

Variants:
    1:
        - Arguments:
            -  x: <number> The top-left position along the x-axis.
            -  y: <number> The top-left position along the y-axis.
            -  width: <number> The width of the Quad.
            -  height: <number> The height of the Quad.
            -  sw: <number> The reference width, the width of the Image.
            -  sh: <number> The reference height, the height of the Image.
        - Returns:
            -  quad: <Quad> The new Quad.

------------------------------------------------------------------------------
1.5.43. newScreenshot                            *love.graphics.newScreenshot*

Creates a screenshot and returns the image data.

Variants:
    1:
        - Arguments:
            -  copyAlpha: <boolean> Whether to include the screen's alpha 
              channel in the ImageData. If false, the screenshot will be fully opaque.
        - Returns:
            -  screenshot: <ImageData> The image data of the screenshot.

------------------------------------------------------------------------------
1.5.44. newSpriteBatch                          *love.graphics.newSpriteBatch*

Creates a new SpriteBatch object.

Variants:
    1:
        - Arguments:
            -  texture: <Texture> The Image or Canvas to use for the sprites.
            -  maxsprites: <number> The max number of sprites.
            -  usage: <SpriteBatchUsage> The expected usage of the 
              SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage 
              and performance.
        - Returns:
            -  spriteBatch: <SpriteBatch> The new SpriteBatch.

------------------------------------------------------------------------------
1.5.45. newVideo                                      *love.graphics.newVideo*

Creates a new drawable Video. Currently only Ogg Theora video files are 
supported.

Variants:
    1:
        - Arguments:
            -  filename: <string> The file path to the Ogg Theora video file.
            -  loadaudio: <boolean> Whether to try to load the video's audio 
              into an audio Source. If not explicitly set to true or false, it will try 
              without causing an error if the video has no audio.
        - Returns:
            -  video: <Video> A new Video.
    2:
        - Arguments:
            -  videostream: <VideoStream> A video stream object.
            -  loadaudio: <boolean> Whether to try to load the video's audio 
              into an audio Source. If not explicitly set to true or false, it will try 
              without causing an error if the video has no audio.
        - Returns:
            -  video: <Video> A new Video.

------------------------------------------------------------------------------
1.5.46. origin                                          *love.graphics.origin*

Resets the current coordinate transformation. This function is always used to 
reverse any previous calls to love.graphics.rotate, love.graphics.scale, 
love.graphics.shear or love.graphics.translate. It returns the current 
transformation state to its defaults.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.47. points                                          *love.graphics.points*

Draws one or more points.

Variants:
    1:
        - Arguments:
            -  x: <number> The position of the first point on the x-axis.
            -  y: <number> The position of the first point on the y-axis.
            -  ...: <number> The x and y coordinates of additional points.
        - Returns: Nothing
    2:
        - Arguments:
            -  points: <table> A table containing multiple point positions, 
              in the form of {x, y, ...}.
        - Returns: Nothing
    3:
        - Arguments:
            -  points: <table> A table containing multiple individually 
              colored points, in the form of {point, ...}. Each table contains the position 
              and color of a point in the form of {x, y, r, g, b, a}. The color components 
              are optional.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.48. polygon                                        *love.graphics.polygon*

Draw a polygon. Following the mode argument, this function can accept 
multiple numeric arguments or a single table of numeric arguments. In either 
case the arguments are interpreted as alternating x and y coordinates of the 
polygon's vertices. When in fill mode, the polygon must be convex and simple 
or rendering artifacts may occur.

Variants:
    1:
        - Arguments:
            -  mode: <DrawMode> How to draw the polygon.
            -  ...: <number> The vertices of the polygon.
        - Returns: Nothing
    2:
        - Arguments:
            -  mode: <DrawMode> How to draw the polygon.
            -  vertices: <table> The vertices of the polygon as a table.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.49. pop                                                *love.graphics.pop*

Pops the current coordinate transformation from the transformation stack. 
This function is always used to reverse a previous push operation. It returns 
the current transformation state to what it was before the last preceding 
push. For an example, see the description of love.graphics.push.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.50. present                                        *love.graphics.present*

Displays the results of drawing operations on the screen. This function is 
used when writing your own love.run function. It presents all the results of 
your drawing operations on the screen. See the example in love.run for a 
typical use of this function.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.51. print                                            *love.graphics.print*

Draws text on screen. If no Font is set, one will be created and set (once) 
if needed. When using translation and scaling functions while drawing text, 
this function assumes the scale occurs first. If you don't script with this 
in mind, the text won't be in the right position, or possibly even on screen. 
love.graphics.print stops at the first ' ' (null) character. This can bite 
you if you are appending keystrokes to form your string, as some of those are 
multi-byte unicode characters which will likely contain null bytes.

Variants:
    1:
        - Arguments:
            -  text: <string> The text to draw.
            -  x: <number> The position to draw the object (x-axis).
            -  y: <number> The position to draw the object (y-axis).
            -  r: <number> Orientation (radians).
            -  sx: <number> Scale factor (x-axis).
            -  sy: <number> Scale factor (y-axis).
            -  ox: <number> Origin offset (x-axis).
            -  oy: <number> Origin offset (y-axis).
            -  kx: <number> Shear factor (x-axis).
            -  ky: <number> Shear factor (y-axis).
        - Returns: Nothing
    2:
        - Arguments:
            -  coloredtext: <table> A table containing colors and strings to 
              add to the object, in the form of {color1, string1, color2, string2, ...}.
            -  x: <number> The position of the new text on the x-axis.
            -  y: <number> The position of the new text on the y-axis.
            -  angle: <number> The orientation of the object in radians.
            -  sx: <number> Scale factor on the x-axis.
            -  sy: <number> Scale factor on the y-axis.
            -  ox: <number> Origin offset on the x-axis.
            -  oy: <number> Origin offset on the y-axis.
            -  kx: <number> Shearing / skew factor on the x-axis.
            -  ky: <number> Shearing / skew factor on the y-axis.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.52. printf                                          *love.graphics.printf*

Draws formatted text, with word wrap and alignment. See additional notes in 
love.graphics.print. In version 0.9.2 and earlier, wrapping was implemented 
by breaking up words by spaces and putting them back together to make sure 
things fit nicely within the limit provided. However, due to the way this is 
done, extra spaces between words would end up missing when printed on the 
screen, and some lines could overflow past the provided wrap limit. In 
version 0.10.0 and newer this is no longer the case.

Variants:
    1:
        - Arguments:
            -  text: <string> A text string.
            -  x: <number> The position on the x-axis.
            -  y: <number> The position on the y-axis.
            -  limit: <number> Wrap the line after this many horizontal 
              pixels.
            -  align: <AlignMode> The alignment.
            -  r: <number> Orientation (radians).
            -  sx: <number> Scale factor (x-axis).
            -  sy: <number> Scale factor (y-axis).
            -  ox: <number> Origin offset (x-axis).
            -  oy: <number> Origin offset (y-axis).
            -  kx: <number> Shear factor (x-axis).
            -  ky: <number> Shear factor (y-axis).
        - Returns: Nothing
    2:
        - Arguments:
            -  coloredtext: <table> A table containing colors and strings to 
              add to the object, in the form of {color1, string1, color2, string2, ...}.
            -  x: <number> The position of the new text on the x-axis.
            -  y: <number> The position of the new text on the y-axis.
            -  wraplimit: <number> The maximum width in pixels of the text 
              before it gets automatically wrapped to a new line.
            -  align: <AlignMode> The alignment of the text.
            -  angle: <number> The orientation of the object in radians.
            -  sx: <number> Scale factor on the x-axis.
            -  sy: <number> Scale factor on the y-axis.
            -  ox: <number> Origin offset on the x-axis.
            -  oy: <number> Origin offset on the y-axis.
            -  kx: <number> Shearing / skew factor on the x-axis.
            -  ky: <number> Shearing / skew factor on the y-axis.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.53. push                                              *love.graphics.push*

Copies and pushes the current coordinate transformation to the transformation 
stack. This function is always used to prepare for a corresponding pop 
operation later. It stores the current coordinate transformation state into 
the transformation stack and keeps it active. Later changes to the 
transformation can be undone by using the pop operation, which returns the 
coordinate transform to the state it was in before calling push.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  stack: <StackType> The type of stack to push (e.g. just 
              transformation state, or all love.graphics state).
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.54. rectangle                                    *love.graphics.rectangle*

Draws a rectangle.

Variants:
    1:
        - Arguments:
            -  mode: <DrawMode> How to draw the rectangle.
            -  x: <number> The position of top-left corner along the x-axis.
            -  y: <number> The position of top-left corner along the y-axis.
            -  width: <number> Width of the rectangle.
            -  height: <number> Height of the rectangle.
        - Returns: Nothing
    2:
        - Arguments:
            -  mode: <DrawMode> How to draw the rectangle.
            -  x: <number> The position of top-left corner along the x-axis.
            -  y: <number> The position of top-left corner along the y-axis.
            -  width: <number> Width of the rectangle.
            -  height: <number> Height of the rectangle.
            -  rx: <number> The x-axis radius of each round corner. Cannot be 
              greater than half the rectangle's width.
            -  ry: <number> The y-axis radius of each round corner. Cannot be 
              greater than half the rectangle's height.
            -  segments: <number> The number of segments used for drawing the 
              round corners. A default amount will be chosen if no number is given.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.55. reset                                            *love.graphics.reset*

Resets the current graphics settings. Calling reset makes the current drawing 
color white, the current background color black, resets any active Canvas or 
Shader, and removes any scissor settings. It sets the BlendMode to alpha. It 
also sets both the point and line drawing modes to smooth and their sizes to 
1.0.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.56. rotate                                          *love.graphics.rotate*

Rotates the coordinate system in two dimensions. Calling this function 
affects all future drawing operations by rotating the coordinate system 
around the origin by the given amount of radians. This change lasts until 
love.draw exits.

Variants:
    1:
        - Arguments:
            -  angle: <number> The amount to rotate the coordinate system in 
              radians.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.57. scale                                            *love.graphics.scale*

Scales the coordinate system in two dimensions. By default the coordinate 
system in LÖVE corresponds to the display pixels in horizontal and vertical 
directions one-to-one, and the x-axis increases towards the right while the 
y-axis increases downwards. Scaling the coordinate system changes this 
relation. After scaling by sx and sy, all coordinates are treated as if they 
were multiplied by sx and sy. Every result of a drawing operation is also 
correspondingly scaled, so scaling by (2, 2) for example would mean making 
everything twice as large in both x- and y-directions. Scaling by a negative 
value flips the coordinate system in the corresponding direction, which also 
means everything will be drawn flipped or upside down, or both. Scaling by 
zero is not a useful operation. Scale and translate are not commutative 
operations, therefore, calling them in different orders will change the 
outcome. Scaling lasts until love.draw exits.

Variants:
    1:
        - Arguments:
            -  sx: <number> The scaling in the direction of the x-axis.
            -  sy: <number> The scaling in the direction of the y-axis. If 
              omitted, it defaults to same as parameter sx.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.58. setBackgroundColor                  *love.graphics.setBackgroundColor*

Sets the background color.

Variants:
    1:
        - Arguments:
            -  r: <number> The red component (0-255).
            -  g: <number> The green component (0-255).
            -  b: <number> The blue component (0-255).
            -  a: <number> The alpha component (0-255).
        - Returns: Nothing
    2:
        - Arguments:
            -  rgba: <table> A numerical indexed table with the red, green 
              and blue values as numbers. Alpha is 255 if it is not in the table
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.59. setBlendMode                              *love.graphics.setBlendMode*

Sets the blending mode.

Variants:
    1:
        - Arguments:
            -  mode: <BlendMode> The blend mode to use.
        - Returns: Nothing
    2:
        - Arguments:
            -  mode: <BlendMode> The blend mode to use.
            -  alphamode: <BlendAlphaMode> What to do with the alpha of drawn 
              objects when blending.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.60. setCanvas                                    *love.graphics.setCanvas*

Sets the render target to one or more Canvases. All drawing operations until 
the next love.graphics.setCanvas call will be redirected to the specified 
canvases and not shown on the screen. All canvas arguments must have the same 
widths and heights and the same texture type. Normally the same thing will be 
drawn on each canvas, but that can be changed if a pixel shader is used with 
the "effects" function instead of the regular effect. Not all computers 
support Canvases, and not all computers which support Canvases will support 
multiple render targets. Use love.graphics.isSupported to check. nWhen called 
without arguments, the render target is reset to the screen.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  canvas: <Canvas> A render target.
            -  ...: <Canvas> Additional render targets.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.61. setColor                                      *love.graphics.setColor*

Sets the color used for drawing.

Variants:
    1:
        - Arguments:
            -  red: <number> The amount of red.
            -  green: <number> The amount of green.
            -  blue: <number> The amount of blue.
            -  alpha: <number> The amount of alpha. The alpha value will be 
              applied to all subsequent draw operations, even the drawing of an image.
        - Returns: Nothing
    2:
        - Arguments:
            -  rgba: <table> A numerical indexed table with the red, green, 
              blue and alpha values as numbers. The alpha is optional and defaults to 255 
              if it is left out.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.62. setColorMask                              *love.graphics.setColorMask*

Sets the color mask. Enables or disables specific color components when 
rendering and clearing the screen. For example, if red is set to false, no 
further changes will be made to the red component of any pixels. Enables all 
color components when called without arguments.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  red: <boolean> Render red component.
            -  green: <boolean> Render green component.
            -  blue: <boolean> Render blue component.
            -  alpha: <boolean> Render alpha component.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.63. setDefaultFilter                      *love.graphics.setDefaultFilter*

Sets the default scaling filters used with Images, Canvases, and Fonts. This 
function does not apply retroactively to loaded images.

Variants:
    1:
        - Arguments:
            -  min: <FilterMode> Filter mode used when scaling the image 
              down.
            -  mag: <FilterMode> Filter mode used when scaling the image up.
            -  anisotropy: <number> Maximum amount of Anisotropic Filtering 
              used.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.64. setFont                                        *love.graphics.setFont*

Set an already-loaded Font as the current font or create and load a new one 
from the file and size. It's recommended that Font objects are created with 
love.graphics.newFont in the loading stage and then passed to this function 
in the drawing stage.

Variants:
    1:
        - Arguments:
            -  font: <Font> The Font object to use.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.65. setLineJoin                                *love.graphics.setLineJoin*

Sets the line join style.

Variants:
    1:
        - Arguments:
            -  join: <LineJoin> The LineJoin to use.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.66. setLineStyle                              *love.graphics.setLineStyle*

Sets the line style.

Variants:
    1:
        - Arguments:
            -  style: <LineStyle> The LineStyle to use.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.67. setLineWidth                              *love.graphics.setLineWidth*

Sets the line width.

Variants:
    1:
        - Arguments:
            -  width: <number> The width of the line.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.68. setNewFont                                  *love.graphics.setNewFont*

Creates and sets a new font.

Variants:
    1:
        - Arguments:
            -  filename: <string> The path and name of the file with the 
              font.
            -  size: <number> The size of the font.
        - Returns:
            -  font: <Font> The new font.
    2:
        - Arguments:
            -  file: <File> A File with the font.
            -  size: <number> The size of the font.
        - Returns:
            -  font: <Font> The new font.
    3:
        - Arguments:
            -  data: <Data> A Data with the font.
            -  size: <number> The size of the font.
        - Returns:
            -  font: <Font> The new font.

------------------------------------------------------------------------------
1.5.69. setShader                                    *love.graphics.setShader*

Sets or resets a Shader as the current pixel effect or vertex shaders. All 
drawing operations until the next love.graphics.setShader will be drawn using 
the Shader object specified. Disables the shaders when called without 
arguments.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  shader: <Shader> The new shader.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.70. setPointSize                              *love.graphics.setPointSize*

Sets the point size.

Variants:
    1:
        - Arguments:
            -  size: <number> The new point size.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.71. setScissor                                  *love.graphics.setScissor*

Sets or disables scissor. The scissor limits the drawing area to a specified 
rectangle. This affects all graphics calls, including love.graphics.clear.

Variants:
    1:
        - Arguments:
            -  x: <number> The X coordinate of upper left corner.
            -  y: <number> The Y coordinate of upper left corner.
            -  width: <number> The width of clipping rectangle.
            -  height: <number> The height of clipping rectangle.
        - Returns: Nothing
    2:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.72. setStencilTest                          *love.graphics.setStencilTest*

Configures or disables stencil testing. When stencil testing is enabled, the 
geometry of everything that is drawn afterward will be clipped / stencilled 
out based on a comparison between the arguments of this function and the 
stencil value of each pixel that the geometry touches. The stencil values of 
pixels are affected via love.graphics.stencil. Each Canvas has its own 
per-pixel stencil values.

Variants:
    1:
        - Arguments:
            -  comparemode: <CompareMode> The type of comparison to make for 
              each pixel.
            -  comparevalue: <number> The value to use when comparing with 
              the stencil value of each pixel. Must be between 0 and 255.
        - Returns: Nothing
    2:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.73. setWireframe                              *love.graphics.setWireframe*

Sets whether wireframe lines will be used when drawing. Wireframe mode should 
only be used for debugging. The lines drawn with it enabled do not behave 
like regular love.graphics lines: their widths don't scale with the 
coordinate transformations or with love.graphics.setLineWidth, and they don't 
use the smooth LineStyle.

Variants:
    1:
        - Arguments:
            -  enable: <boolean> True to enable wireframe mode when drawing, 
              false to disable it.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.74. shear                                            *love.graphics.shear*

Shears the coordinate system.

Variants:
    1:
        - Arguments:
            -  kx: <number> The shear factor on the x-axis.
            -  ky: <number> The shear factor on the y-axis.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.75. stencil                                        *love.graphics.stencil*

Draws geometry as a stencil. The geometry drawn by the supplied function sets 
invisible stencil values of pixels, instead of setting pixel colors. The 
stencil values of pixels can act like a mask / stencil - 
love.graphics.setStencilTest can be used afterward to determine how further 
rendering is affected by the stencil values in each pixel. Each Canvas has 
its own per-pixel stencil values. Stencil values are within the range of [0, 
255].

Variants:
    1:
        - Arguments:
            -  stencilfunction: <function> Function which draws geometry. The 
              stencil values of pixels, rather than the color of each pixel, will be 
              affected by the geometry.
            -  action: <StencilAction> How to modify any stencil values of 
              pixels that are touched by what's drawn in the stencil function.
            -  value: <number> The new stencil value to use for pixels if the 
              "replace" stencil action is used. Has no effect with other stencil actions. 
              Must be between 0 and 255.
            -  keepvalues: <boolean> True to preserve old stencil values of 
              pixels, false to re-set every pixel's stencil value to 0 before executing the 
              stencil function. love.graphics.clear will also re-set all stencil values.
        - Returns: Nothing

------------------------------------------------------------------------------
1.5.76. translate                                    *love.graphics.translate*

Translates the coordinate system in two dimensions. When this function is 
called with two numbers, dx, and dy, all the following drawing operations 
take effect as if their x and y coordinates were x+dx and y+dy. Scale and 
translate are not commutative operations, therefore, calling them in 
different orders will change the outcome. This change lasts until 
love.graphics.clear is called (which is called automatically before love.draw 
in the default love.run function), or a love.graphics.pop reverts to a 
previous coordinate system state. Translating using whole numbers will 
prevent tearing/blurring of images and fonts draw after translating.

Variants:
    1:
        - Arguments:
            -  dx: <number> The translation relative to the x-axis.
            -  dy: <number> The translation relative to the y-axis.
        - Returns: Nothing

------------------------------------------------------------------------------
1.6. image                                                        *love.image*

Provides an interface to decode encoded image data.

- Types: 
    - CompressedImageData                           *love-CompressedImageData*
    - ImageData                                               *love-ImageData*
- Enums: 
    - CompressedImageFormat                       *love-CompressedImageFormat*
    - ImageFormat                                           *love-ImageFormat*

------------------------------------------------------------------------------
1.6.1. isCompressed                                  *love.image.isCompressed*

Determines whether a file can be loaded as CompressedImageData.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filename of the potentially compressed 
              image file.
        - Returns:
            -  compressed: <boolean> Whether the file can be loaded as 
              CompressedImageData or not.
    2:
        - Arguments:
            -  fileData: <FileData> A FileData potentially containing a 
              compressed image.
        - Returns:
            -  compressed: <boolean> Whether the FileData can be loaded as 
              CompressedImageData or not.

------------------------------------------------------------------------------
1.6.2. newCompressedData                        *love.image.newCompressedData*

Create a new CompressedImageData object from a compressed image file. LÖVE 
supports several compressed texture formats, enumerated in the 
CompressedImageFormat page.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filename of the compressed image file.
        - Returns:
            -  compressedImageData: <CompressedImageData> The new 
              CompressedImageData object.
    2:
        - Arguments:
            -  fileData: <FileData> A FileData containing a compressed image.
        - Returns:
            -  compressedImageData: <CompressedImageData> The new 
              CompressedImageData object.

------------------------------------------------------------------------------
1.6.3. newImageData                                  *love.image.newImageData*

Create a new ImageData object.

Variants:
    1:
        - Arguments:
            -  width: <number> The width of the ImageData.
            -  height: <number> The height of the ImageData.
        - Returns:
            -  imageData: <ImageData> The new blank ImageData object. Each 
              pixel's color values, (including the alpha values!) will be set to zero.
    2:
        - Arguments:
            -  width: <number> The width of the ImageData.
            -  height: <number> The height of the ImageData.
            -  data: <string> The data to load into the ImageData.
        - Returns:
            -  imageData: <ImageData> The new ImageData object.
    3:
        - Arguments:
            -  filename: <string> The filename of the image file.
        - Returns:
            -  imageData: <ImageData> The new ImageData object.
    4:
        - Arguments:
            -  filedata: <FileData> The encoded file data to decode into 
              image data.
        - Returns:
            -  imageData: <ImageData> The new ImageData object.

------------------------------------------------------------------------------
1.7. joystick                                                  *love.joystick*

Provides an interface to the user's joystick.

- Types: 
    - Joystick                                                 *love-Joystick*
- Enums: 
    - GamepadAxis                                           *love-GamepadAxis*
    - GamepadButton                                       *love-GamepadButton*
    - JoystickHat                                           *love-JoystickHat*
    - JoystickInputType                               *love-JoystickInputType*

------------------------------------------------------------------------------
1.7.1. getJoystickCount                       *love.joystick.getJoystickCount*

Gets the number of connected joysticks.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  joystickcount: <number> The number of connected joysticks.

------------------------------------------------------------------------------
1.7.2. getJoysticks                               *love.joystick.getJoysticks*

Gets a list of connected Joysticks.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  joysticks: <table> The list of currently connected Joysticks.

------------------------------------------------------------------------------
1.7.3. loadGamepadMappings                 *love.joystick.loadGamepadMappings*

Loads a gamepad mappings string or file created with 
love.joystick.saveGamepadMappings.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filename to load the mappings string 
              from.
        - Returns: Nothing
    2:
        - Arguments:
            -  mappings: <string> The mappings string to load.
        - Returns: Nothing

------------------------------------------------------------------------------
1.7.4. saveGamepadMappings                 *love.joystick.saveGamepadMappings*

Saves the virtual gamepad mappings of all Joysticks that are recognized as 
gamepads and have either been recently used or their gamepad bindings have 
been modified.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filename to save the mappings string 
              to.
        - Returns:
            -  mappings: <string> The mappings string that was written to the 
              file.
    2:
        - Arguments: None
        - Returns:
            -  mappings: <string> The mappings string.

------------------------------------------------------------------------------
1.7.5. setGamepadMapping                     *love.joystick.setGamepadMapping*

Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a 
certain type. For example, if this function is used with a GUID returned by a 
Dualshock 3 controller in OS X, the binding will affect 
Joystick:getGamepadAxis and Joystick:isGamepadDown for all Dualshock 3 
controllers used with the game when run in OS X. LÖVE includes built-in 
gamepad bindings for many common controllers. This function lets you change 
the bindings or add new ones for types of Joysticks which aren't recognized 
as gamepads by default. The virtual gamepad buttons and axes are designed 
around the Xbox 360 controller layout.

Variants:
    1:
        - Arguments:
            -  guid: <string> The OS-dependent GUID for the type of Joystick 
              the binding will affect.
            -  button: <GamepadButton> The virtual gamepad button to bind.
            -  inputtype: <JoystickInputType> The type of input to bind the 
              virtual gamepad button to.
            -  inputindex: <number> The index of the axis, button, or hat to 
              bind the virtual gamepad button to.
            -  hatdirection: <JoystickHat> The direction of the hat, if the 
              virtual gamepad button will be bound to a hat. nil otherwise.
        - Returns:
            -  success: <boolean> Whether the virtual gamepad button was 
              successfully bound.
    2:
        - Arguments:
            -  guid: <string> The OS-dependent GUID for the type of Joystick 
              the binding will affect.
            -  button: <GamepadButton> The virtual gamepad axis to bind.
            -  inputtype: <JoystickInputType> The type of input to bind the 
              virtual gamepad axis to.
            -  inputindex: <number> The index of the axis, button, or hat to 
              bind the virtual gamepad axis to.
            -  hatdirection: <JoystickHat> The direction of the hat, if the 
              virtual gamepad axis will be bound to a hat. nil otherwise.
        - Returns:
            -  success: <boolean> Whether the virtual gamepad button was 
              successfully bound.

------------------------------------------------------------------------------
1.8. keyboard                                                  *love.keyboard*

Provides an interface to the user's keyboard.

- Types: None
- Enums: 
    - KeyConstant                                           *love-KeyConstant*
    - Scancode                                                 *love-Scancode*

------------------------------------------------------------------------------
1.8.1. getKeyFromScancode                   *love.keyboard.getKeyFromScancode*

Gets the key corresponding to the given hardware scancode. Unlike key 
constants, Scancodes are keyboard layout-independent. For example the 
scancode "w" will be generated if the key in the same place as the "w" key on 
an American keyboard is pressed, no matter what the key is labelled or what 
the user's operating system settings are. Scancodes are useful for creating 
default controls that have the same physical locations on on all systems.

Variants:
    1:
        - Arguments:
            -  scancode: <Scancode> The scancode to get the key from.
        - Returns:
            -  key: <KeyConstant> The key corresponding to the given 
              scancode, or "unknown" if the scancode doesn't map to a KeyConstant on the 
              current system.

------------------------------------------------------------------------------
1.8.2. getScancodeFromKey                   *love.keyboard.getScancodeFromKey*

Gets the hardware scancode corresponding to the given key. Unlike key 
constants, Scancodes are keyboard layout-independent. For example the 
scancode "w" will be generated if the key in the same place as the "w" key on 
an American keyboard is pressed, no matter what the key is labelled or what 
the user's operating system settings are. Scancodes are useful for creating 
default controls that have the same physical locations on on all systems.

Variants:
    1:
        - Arguments:
            -  key: <KeyConstant> The key to get the scancode from.
        - Returns:
            -  scancode: <Scancode> The scancode corresponding to the given 
              key, or "unknown" if the given key has no known physical representation on 
              the current system.

------------------------------------------------------------------------------
1.8.3. hasKeyRepeat                               *love.keyboard.hasKeyRepeat*

Gets whether key repeat is enabled.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  enabled: <boolean> Whether key repeat is enabled.

------------------------------------------------------------------------------
1.8.4. hasTextInput                               *love.keyboard.hasTextInput*

Gets whether text input events are enabled.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  enabled: <boolean> Whether text input events are enabled.

------------------------------------------------------------------------------
1.8.5. isDown                                           *love.keyboard.isDown*

Checks whether a certain key is down. Not to be confused with love.keypressed 
or love.keyreleased.

Variants:
    1:
        - Arguments:
            -  key: <KeyConstant> The key to check.
        - Returns:
            -  down: <boolean> True if the key is down, false if not.
    2:
        - Arguments:
            -  key: <KeyConstant> A key to check.
            -  ...: <KeyConstant> Additional keys to check.
        - Returns:
            -  anyDown: <boolean> True if any supplied key is down, false if 
              not.

------------------------------------------------------------------------------
1.8.6. isScancodeDown                           *love.keyboard.isScancodeDown*

Checks whether the specified Scancodes are pressed. Not to be confused with 
love.keypressed or love.keyreleased. Unlike regular KeyConstants, Scancodes 
are keyboard layout-independent. The scancode "w" is used if the key in the 
same place as the "w" key on an American keyboard is pressed, no matter what 
the key is labelled or what the user's operating system settings are.

Variants:
    1:
        - Arguments:
            -  scancode: <Scancode> A Scancode to check.
            -  ...: <Scancode> Additional Scancodes to check.
        - Returns:
            -  down: <boolean> True if any supplied Scancode is down, false 
              if not.

------------------------------------------------------------------------------
1.8.7. setKeyRepeat                               *love.keyboard.setKeyRepeat*

Enables or disables key repeat. It is disabled by default. The interval 
between repeats depends on the user's system settings.

Variants:
    1:
        - Arguments:
            -  enable: <boolean> Whether repeat keypress events should be 
              enabled when a key is held down.
        - Returns: Nothing

------------------------------------------------------------------------------
1.8.8. setTextInput                               *love.keyboard.setTextInput*

Enables or disables text input events. It is enabled by default on Windows, 
Mac, and Linux, and disabled by default on iOS and Android.

Variants:
    1:
        - Arguments:
            -  enable: <boolean> Whether text input events should be enabled.
        - Returns: Nothing

------------------------------------------------------------------------------
1.9. math                                                          *love.math*

Provides system-independent mathematical functions.

- Types: 
    - BezierCurve                                           *love-BezierCurve*
    - CompressedData                                     *love-CompressedData*
    - RandomGenerator                                   *love-RandomGenerator*
- Enums: 
    - CompressedDataFormat                         *love-CompressedDataFormat*

------------------------------------------------------------------------------
1.9.1. compress                                           *love.math.compress*

Compresses a string or data using a specific compression algorithm.

Variants:
    1:
        - Arguments:
            -  rawstring: <string> The raw (un-compressed) string to 
              compress.
            -  format: <CompressedDataFormat> The format to use when 
              compressing the string.
            -  level: <number> The level of compression to use, between 0 and 
              9. -1 indicates the default level. The meaning of this argument depends on 
              the compression format being used.
        - Returns:
            -  compressedData: <CompressedData> A new Data object containing 
              the compressed version of the string.
    2:
        - Arguments:
            -  data: <Data> A Data object containing the raw (un-compressed) 
              data to compress.
            -  format: <CompressedDataFormat> The format to use when 
              compressing the data.
            -  level: <number> The level of compression to use, between 0 and 
              9. -1 indicates the default level. The meaning of this argument depends on 
              the compression format being used.
        - Returns:
            -  compressedData: <CompressedData> A new Data object containing 
              the compressed version of the raw data.

------------------------------------------------------------------------------
1.9.2. decompress                                       *love.math.decompress*

Decompresses a CompressedData or previously compressed string or Data object.

Variants:
    1:
        - Arguments:
            -  compressedData: <CompressedData> The compressed data to 
              decompress.
        - Returns:
            -  rawstring: <string> A string containing the raw decompressed 
              data.
    2:
        - Arguments:
            -  compressedString: <string> A string containing data previously 
              compressed with love.math.compress.
            -  format: <CompressedDataFormat> The format that was used to 
              compress the given string.
        - Returns:
            -  rawstring: <string> A string containing the raw decompressed 
              data.
    3:
        - Arguments:
            -  data: <Data> A Data object containing data previously 
              compressed with love.math.compress.
            -  format: <CompressedDataFormat> The format that was used to 
              compress the given data.
        - Returns:
            -  rawstring: <string> A string containing the raw decompressed 
              data.

------------------------------------------------------------------------------
1.9.3. gammaToLinear                                 *love.math.gammaToLinear*

Converts a color from gamma-space (sRGB) to linear-space (RGB). This is 
useful when doing gamma-correct rendering and you need to do math in linear 
RGB in the few cases where LÖVE doesn't handle conversions automatically.

Variants:
    1:
        - Arguments:
            -  r: <number> The red channel of the sRGB color to convert.
            -  g: <number> The green channel of the sRGB color to convert.
            -  b: <number> The blue channel of the sRGB color to convert.
        - Returns:
            -  lr: <number> The red channel of the converted color in linear 
              RGB space.
            -  lg: <number> The green channel of the converted color in 
              linear RGB space.
            -  lb: <number> The blue channel of the converted color in linear 
              RGB space.
    2:
        - Arguments:
            -  color: <table> An array with the red, green, and blue channels 
              of the sRGB color to convert.
        - Returns:
            -  lr: <number> The red channel of the converted color in linear 
              RGB space.
            -  lg: <number> The green channel of the converted color in 
              linear RGB space.
            -  lb: <number> The blue channel of the converted color in linear 
              RGB space.
    3:
        - Arguments:
            -  c: <number> The value of a color channel in sRGB space to 
              convert.
        - Returns:
            -  lc: <number> The value of the color channel in linear RGB 
              space.

------------------------------------------------------------------------------
1.9.4. getRandomSeed                                 *love.math.getRandomSeed*

Gets the seed of the random number generator. The state is split into two 
numbers due to Lua's use of doubles for all number values - doubles can't 
accurately represent integer values above 2^53.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  low: <number> Integer number representing the lower 32 bits of 
              the random number generator's 64 bit state value.
            -  high: <number> Integer number representing the higher 32 bits 
              of the random number generator's 64 bit state value.

------------------------------------------------------------------------------
1.9.5. getRandomState                               *love.math.getRandomState*

Gets the current state of the random number generator. This returns an opaque 
implementation-dependent string which is only useful for later use with 
RandomGenerator:setState. This is different from RandomGenerator:getSeed in 
that getState gets the RandomGenerator's current state, whereas getSeed gets 
the previously set seed number. The value of the state string does not depend 
on the current operating system.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  state: <string> The current state of the RandomGenerator 
              object, represented as a string.

------------------------------------------------------------------------------
1.9.6. isConvex                                           *love.math.isConvex*

Checks whether a polygon is convex. PolygonShapes in love.physics, some forms 
of Mesh, and polygons drawn with love.graphics.polygon must be simple convex 
polygons.

Variants:
    1:
        - Arguments:
            -  vertices: <table> The vertices of the polygon as a table in 
              the form of {x1, y1, x2, y2, x3, y3, ...}.
        - Returns:
            -  convex: <boolean> Whether the given polygon is convex.
    2:
        - Arguments:
            -  x1: <number> The position of the first vertex of the polygon 
              on the x-axis.
            -  y1: <number> The position of the first vertex of the polygon 
              on the y-axis.
            -  x2: <number> The position of the second vertex of the polygon 
              on the x-axis.
            -  y2: <number> The position of the second vertex of the polygon 
              on the y-axis.
            -  x3: <number> The position of the third vertex of the polygon 
              on the x-axis.
            -  y3: <number> The position of the third vertex of the polygon 
              on the y-axis.
            -  ...: <number> Additional vertices.
        - Returns:
            -  convex: <boolean> Whether the given polygon is convex.

------------------------------------------------------------------------------
1.9.7. linearToGamma                                 *love.math.linearToGamma*

Converts a color from linear-space (RGB) to gamma-space (sRGB). This is 
useful when storing linear RGB color values in an image, because the linear 
RGB color space has less precision than sRGB for dark colors, which can 
result in noticeable color banding when drawing. In general, colors chosen 
based on what they look like on-screen are already in gamma-space and should 
not be double-converted. Colors calculated using math are often in the linear 
RGB space.

Variants:
    1:
        - Arguments:
            -  lr: <number> The red channel of the linear RGB color to 
              convert.
            -  lg: <number> The green channel of the linear RGB color to 
              convert.
            -  lb: <number> The blue channel of the linear RGB color to 
              convert.
        - Returns:
            -  cr: <number> The red channel of the converted color in gamma 
              sRGB space.
            -  cg: <number> The green channel of the converted color in gamma 
              sRGB space.
            -  cb: <number> The blue channel of the converted color in gamma 
              sRGB space.
    2:
        - Arguments:
            -  color: <table> An array with the red, green, and blue channels 
              of the linear RGB color to convert.
        - Returns:
            -  cr: <number> The red channel of the converted color in gamma 
              sRGB space.
            -  cg: <number> The green channel of the converted color in gamma 
              sRGB space.
            -  cb: <number> The blue channel of the converted color in gamma 
              sRGB space.
    3:
        - Arguments:
            -  lc: <number> The value of a color channel in linear RGB space 
              to convert.
        - Returns:
            -  c: <number> The value of the color channel in gamma sRGB 
              space.

------------------------------------------------------------------------------
1.9.8. newBezierCurve                               *love.math.newBezierCurve*

Creates a new BezierCurve object. The number of vertices in the control 
polygon determines the degree of the curve, e.g. three vertices define a 
quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) 
Bézier curve, etc.

Variants:
    1:
        - Arguments:
            -  vertices: <table> The vertices of the control polygon as a 
              table in the form of {x1, y1, x2, y2, x3, y3, ...}.
        - Returns:
            -  curve: <BezierCurve> A Bézier curve object.
    2:
        - Arguments:
            -  x1: <number> The position of the first vertex of the control 
              polygon on the x-axis.
            -  y1: <number> The position of the first vertex of the control 
              polygon on the y-axis.
            -  x2: <number> The position of the second vertex of the control 
              polygon on the x-axis.
            -  y2: <number> The position of the second vertex of the control 
              polygon on the y-axis.
            -  x3: <number> The position of the third vertex of the control 
              polygon on the x-axis.
            -  y3: <number> The position of the third vertex of the control 
              polygon on the y-axis.
            -  ...: <number> Additional vertices.
        - Returns:
            -  curve: <BezierCurve> A Bézier curve object.

------------------------------------------------------------------------------
1.9.9. newRandomGenerator                       *love.math.newRandomGenerator*

Creates a new RandomGenerator object which is completely independent of other 
RandomGenerator objects and random functions.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  rng: <RandomGenerator> A Random Number Generator object.
    2:
        - Arguments:
            -  low: <number> The lower 32 bits of the state number to use for 
              this instance of the object.
            -  high: <number> The higher 32 bits of the state number to use 
              for this instance of the object.
        - Returns:
            -  rng: <RandomGenerator> A Random Number Generator object.
    3:
        - Arguments:
            -  seed: <string> A state of a RandomGenerator object returned by 
              RandomGenerator:getState.
        - Returns:
            -  rng: <RandomGenerator> A Random Number Generator object.

------------------------------------------------------------------------------
1.9.10. noise                                                *love.math.noise*

Generates a Simplex or Perlin noise value in 1-4 dimensions. Simplex noise is 
closely related to Perlin noise. It is widely used for procedural content 
generation. There are many webpages which discuss Perlin and Simplex noise in 
detail.

Variants:
    1:
        - Arguments:
            -  x: <number> The number used to generate the noise value.
        - Returns:
            -  value: <number> The noise value in the range of [0, 1].
    2:
        - Arguments:
            -  x: <number> The first value of the 2-dimensional vector used 
              to generate the noise value.
            -  y: <number> The second value of the 2-dimensional vector used 
              to generate the noise value.
        - Returns:
            -  value: <number> The noise value in the range of [0, 1].
    3:
        - Arguments:
            -  x: <number> The first value of the 3-dimensional vector used 
              to generate the noise value.
            -  y: <number> The second value of the 3-dimensional vector used 
              to generate the noise value.
            -  z: <number> The third value of the 3-dimensional vector used 
              to generate the noise value.
        - Returns:
            -  value: <number> The noise value in the range of [0, 1].
    4:
        - Arguments:
            -  x: <number> The first value of the 4-dimensional vector used 
              to generate the noise value.
            -  y: <number> The second value of the 4-dimensional vector used 
              to generate the noise value.
            -  z: <number> The third value of the 4-dimensional vector used 
              to generate the noise value.
            -  w: <number> The fourth value of the 4-dimensional vector used 
              to generate the noise value.
        - Returns:
            -  value: <number> The noise value in the range of [0, 1].

------------------------------------------------------------------------------
1.9.11. random                                              *love.math.random*

Generates a pseudo-random number in a platform independent manner.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  number: <number> The pseudo-random number.
    2:
        - Arguments:
            -  max: <number> The maximum possible value it should return.
        - Returns:
            -  number: <number> The pseudo-random integer number.
    3:
        - Arguments:
            -  min: <number> The minimum possible value it should return.
            -  max: <number> The maximum possible value it should return.
        - Returns:
            -  number: <number> The pseudo-random integer number.

------------------------------------------------------------------------------
1.9.12. randomNormal                                  *love.math.randomNormal*

Get a normally distributed pseudo random number.

Variants:
    1:
        - Arguments:
            -  stddev: <number> Standard deviation of the distribution.
            -  mean: <number> The mean of the distribution.
        - Returns:
            -  number: <number> Normally distributed random number with 
              variance (stddev)² and the specified mean.

------------------------------------------------------------------------------
1.9.13. setRandomSeed                                *love.math.setRandomSeed*

Sets the seed of the random number generator using the specified integer 
number.

Variants:
    1:
        - Arguments:
            -  seed: <number> The integer number with which you want to seed 
              the randomization. Must be within the range of [1, 2^53].
        - Returns: Nothing
    2:
        - Arguments:
            -  low: <number> The lower 32 bits of the state value. Must be 
              within the range of [0, 2^32 - 1].
            -  high: <number> The higher 32 bits of the state value. Must be 
              within the range of [0, 2^32 - 1].
        - Returns: Nothing

------------------------------------------------------------------------------
1.9.14. setRandomState                              *love.math.setRandomState*

Gets the current state of the random number generator. This returns an opaque 
implementation-dependent string which is only useful for later use with 
RandomGenerator:setState. This is different from RandomGenerator:getSeed in 
that getState gets the RandomGenerator's current state, whereas getSeed gets 
the previously set seed number. The value of the state string does not depend 
on the current operating system.

Variants:
    1:
        - Arguments:
            -  state: <string> The current state of the RandomGenerator 
              object, represented as a string.
        - Returns: Nothing

------------------------------------------------------------------------------
1.9.15. triangulate                                    *love.math.triangulate*

Triangulate a simple polygon.

Variants:
    1:
        - Arguments:
            -  polygon: <table> Polygon to triangulate. Must not intersect 
              itself.
        - Returns:
            -  triangles: <table> List of triangles the polygon is composed 
              of, in the form of {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}.
    2:
        - Arguments:
            -  x1: <number> The position of the first vertex of the polygon 
              on the x-axis.
            -  y1: <number> The position of the first vertex of the polygon 
              on the y-axis.
            -  x2: <number> The position of the second vertex of the polygon 
              on the x-axis.
            -  y2: <number> The position of the second vertex of the polygon 
              on the y-axis.
            -  x3: <number> The position of the third vertex of the polygon 
              on the x-axis.
            -  y3: <number> The position of the third vertex of the polygon 
              on the y-axis.
            -  ...: <number> Additional vertices.
        - Returns:
            -  triangles: <table> List of triangles the polygon is composed 
              of, in the form of {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}.

------------------------------------------------------------------------------
1.10. mouse                                                       *love.mouse*

Provides an interface to the user's mouse.

- Types: 
    - Cursor                                                     *love-Cursor*
- Enums: 
    - CursorType                                             *love-CursorType*

------------------------------------------------------------------------------
1.10.1. getCursor                                       *love.mouse.getCursor*

Gets the current Cursor.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  cursor: <Cursor> The current cursor, or nil if no cursor is 
              set.

------------------------------------------------------------------------------
1.10.2. getPosition                                   *love.mouse.getPosition*

Returns the current position of the mouse.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  x: <number> The position of the mouse along the x-axis.
            -  y: <number> The position of the mouse along the y-axis.

------------------------------------------------------------------------------
1.10.3. getRelativeMode                           *love.mouse.getRelativeMode*

Gets whether relative mode is enabled for the mouse. If relative mode is 
enabled, the cursor is hidden and doesn't move when the mouse does, but 
relative mouse motion events are still generated via love.mousemoved. This 
lets the mouse move in any direction indefinitely without the cursor getting 
stuck at the edges of the screen. The reported position of the mouse is not 
updated while relative mode is enabled, even when relative mouse motion 
events are generated.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  enabled: <boolean> True if relative mode is enabled, false if 
              it's disabled.

------------------------------------------------------------------------------
1.10.4. getSystemCursor                           *love.mouse.getSystemCursor*

Gets a Cursor object representing a system-native hardware cursor. Hardware 
cursors are framerate-independent and work the same way as normal operating 
system cursors. Unlike drawing an image at the mouse's current coordinates, 
hardware cursors never have visible lag between when the mouse is moved and 
when the cursor position updates, even at low framerates.

Variants:
    1:
        - Arguments:
            -  ctype: <CursorType> The type of system cursor to get.
        - Returns:
            -  cursor: <Cursor> The Cursor object representing the system 
              cursor type.

------------------------------------------------------------------------------
1.10.5. getX                                                 *love.mouse.getX*

Returns the current x position of the mouse.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  x: <number> The position of the mouse along the x-axis.

------------------------------------------------------------------------------
1.10.6. getY                                                 *love.mouse.getY*

Returns the current y position of the mouse.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  y: <number> The position of the mouse along the y-axis.

------------------------------------------------------------------------------
1.10.7. hasCursor                                       *love.mouse.hasCursor*

Gets whether cursor functionality is supported. If it isn't supported, 
calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an 
error. Mobile devices do not support cursors.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  hascursor: <boolean> Whether the system has cursor 
              functionality.

------------------------------------------------------------------------------
1.10.8. isDown                                             *love.mouse.isDown*

Checks whether a certain mouse button is down. This function does not detect 
mousewheel scrolling; you must use the love.wheelmoved (or love.mousepressed 
in version 0.9.2 and older) callback for that.

Variants:
    1:
        - Arguments:
            -  button: <number> The index of a button to check. 1 is the 
              primary mouse button, 2 is the secondary mouse button, etc.
            -  ...: <number> Additional button numbers to check.
        - Returns:
            -  down: <boolean> True if the specified button is down.

------------------------------------------------------------------------------
1.10.9. isGrabbed                                       *love.mouse.isGrabbed*

Checks if the mouse is grabbed.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  grabbed: <boolean> True if the cursor is grabbed, false if it 
              is not.

------------------------------------------------------------------------------
1.10.10. isVisible                                      *love.mouse.isVisible*

Checks if the cursor is visible.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  visible: <boolean> True if the cursor to visible, false if the 
              cursor is hidden.

------------------------------------------------------------------------------
1.10.11. newCursor                                      *love.mouse.newCursor*

Creates a new hardware Cursor object from an image file or ImageData. 
Hardware cursors are framerate-independent and work the same way as normal 
operating system cursors. Unlike drawing an image at the mouse's current 
coordinates, hardware cursors never have visible lag between when the mouse 
is moved and when the cursor position updates, even at low frameratesn The 
hot spot is the point the operating system uses to determine what was clicked 
and at what position the mouse cursor is. For example, the normal arrow 
pointer normally has its hot spot at the top left of the image, but a 
crosshair cursor might have it in the middle.

Variants:
    1:
        - Arguments:
            -  imageData: <ImageData> The ImageData to use for the the new 
              Cursor.
            -  hotx: <number> The x-coordinate in the ImageData of the 
              cursor's hot spot.
            -  hoty: <number> The y-coordinate in the ImageData of the 
              cursor's hot spot.
        - Returns:
            -  cursor: <Cursor> The new Cursor object.
    2:
        - Arguments:
            -  filepath: <string> Path to the image to use for the new 
              Cursor.
            -  hotx: <number> The x-coordinate in the ImageData of the 
              cursor's hot spot.
            -  hoty: <number> The y-coordinate in the ImageData of the 
              cursor's hot spot.
        - Returns:
            -  cursor: <Cursor> The new Cursor object.
    3:
        - Arguments:
            -  fileData: <FileData> Data representing the image to use for 
              the new Cursor.
            -  hotx: <number> The x-coordinate in the ImageData of the 
              cursor's hot spot.
            -  hoty: <number> The y-coordinate in the ImageData of the 
              cursor's hot spot.
        - Returns:
            -  cursor: <Cursor> The new Cursor object.

------------------------------------------------------------------------------
1.10.12. setCursor                                      *love.mouse.setCursor*

Sets the current mouse cursor. Resets the current mouse cursor to the default 
when called without arguments.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing
    2:
        - Arguments:
            -  cursor: <Cursor> The Cursor object to use as the current mouse 
              cursor.
        - Returns: Nothing

------------------------------------------------------------------------------
1.10.13. setGrabbed                                    *love.mouse.setGrabbed*

Grabs the mouse and confines it to the window.

Variants:
    1:
        - Arguments:
            -  grab: <boolean> True to confine the mouse, false to let it 
              leave the window.
        - Returns: Nothing

------------------------------------------------------------------------------
1.10.14. setPosition                                  *love.mouse.setPosition*

Sets the position of the mouse.

Variants:
    1:
        - Arguments:
            -  x: <number> The new position of the mouse along the x-axis.
            -  y: <number> The new position of the mouse along the y-axis.
        - Returns: Nothing

------------------------------------------------------------------------------
1.10.15. setRelativeMode                          *love.mouse.setRelativeMode*

Sets whether relative mode is enabled for the mouse. When relative mode is 
enabled, the cursor is hidden and doesn't move when the mouse does, but 
relative mouse motion events are still generated via love.mousemoved. This 
lets the mouse move in any direction indefinitely without the cursor getting 
stuck at the edges of the screen. The reported position of the mouse is not 
updated while relative mode is enabled, even when relative mouse motion 
events are generated.

Variants:
    1:
        - Arguments:
            -  enable: <boolean> True to enable relative mode, false to 
              disable it.
        - Returns: Nothing

------------------------------------------------------------------------------
1.10.16. setVisible                                    *love.mouse.setVisible*

Sets the visibility of the cursor.

Variants:
    1:
        - Arguments:
            -  visible: <boolean> True to set the cursor to visible, false to 
              hide the cursor.
        - Returns: Nothing

------------------------------------------------------------------------------
1.10.17. setX                                                *love.mouse.setX*

Sets the current X position of the mouse.

Variants:
    1:
        - Arguments:
            -  x: <number> The new position of the mouse along the x-axis.
        - Returns: Nothing

------------------------------------------------------------------------------
1.10.18. setY                                                *love.mouse.setY*

Sets the current Y position of the mouse.

Variants:
    1:
        - Arguments:
            -  y: <number> The new position of the mouse along the y-axis.
        - Returns: Nothing

------------------------------------------------------------------------------
1.11. physics                                                   *love.physics*

Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible.

- Types: 
    - Body                                                         *love-Body*
    - ChainShape                                             *love-ChainShape*
    - CircleShape                                           *love-CircleShape*
    - Contact                                                   *love-Contact*
    - EdgeShape                                               *love-EdgeShape*
    - DistanceJoint                                       *love-DistanceJoint*
    - Fixture                                                   *love-Fixture*
    - FrictionJoint                                       *love-FrictionJoint*
    - GearJoint                                               *love-GearJoint*
    - Joint                                                       *love-Joint*
    - MotorJoint                                             *love-MotorJoint*
    - MouseJoint                                             *love-MouseJoint*
    - PolygonShape                                         *love-PolygonShape*
    - PrismaticJoint                                     *love-PrismaticJoint*
    - PulleyJoint                                           *love-PulleyJoint*
    - RevoluteJoint                                       *love-RevoluteJoint*
    - RopeJoint                                               *love-RopeJoint*
    - Shape                                                       *love-Shape*
    - WeldJoint                                               *love-WeldJoint*
    - WheelJoint                                             *love-WheelJoint*
    - World                                                       *love-World*
- Enums: 
    - BodyType                                                 *love-BodyType*
    - JointType                                               *love-JointType*
    - ShapeType                                               *love-ShapeType*

------------------------------------------------------------------------------
1.11.1. getDistance                                 *love.physics.getDistance*

Returns the two closest points between two fixtures and their distance.

Variants:
    1:
        - Arguments:
            -  fixture1: <Fixture> The first fixture.
            -  fixture2: <Fixture> The second fixture.
        - Returns:
            -  distance: <number> The distance of the two points.
            -  x1: <number> The x-coordinate of the first point.
            -  y1: <number> The y-coordinate of the first point.
            -  x2: <number> The x-coordinate of the second point.
            -  y2: <number> The y-coordinate of the second point.

------------------------------------------------------------------------------
1.11.2. getMeter                                       *love.physics.getMeter*

Get the scale of the world. The world scale is the number of pixels per 
meter. Try to keep your shape sizes less than 10 times this scale. This is 
important because the physics in Box2D is tuned to work well for objects of 
size 0.1m up to 10m. All physics coordinates are divided by this number for 
the physics calculations.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  scale: <number> The size of 1 meter in pixels.

------------------------------------------------------------------------------
1.11.3. newBody                                         *love.physics.newBody*

Creates a new body. There are three types of bodies. Static bodies do not 
move, have a infinite mass, and can be used for level boundaries. Dynamic 
bodies are the main actors in the simulation, they collide with everything. 
Kinematic bodies do not react to forces and only collide with dynamic bodies. 
The mass of the body gets calculated when a Fixture is attached or removed, 
but can be changed at any time with Body:setMass or Body:resetMassData.

Variants:
    1:
        - Arguments:
            -  world: <World> The world to create the body in.
            -  x: <number> The x position of the body.
            -  y: <number> The y position of the body.
            -  type: <BodyType> The type of the body.
        - Returns:
            -  body: <Body> A new body.

------------------------------------------------------------------------------
1.11.4. newChainShape                             *love.physics.newChainShape*

Creates a new ChainShape.

Variants:
    1:
        - Arguments:
            -  loop: <boolean> If the chain should loop back to the first 
              point.
            -  x1: <number> The x position of the first point.
            -  y1: <number> The y position of the first point.
            -  x2: <number> The x position of the second point.
            -  y2: <number> The y position of the second point.
            -  ...: <number> Additional point positions.
        - Returns:
            -  shape: <ChainShape> The new shape.
    2:
        - Arguments:
            -  loop: <boolean> If the chain should loop back to the first 
              point.
            -  points: <table> A list of points to construct the ChainShape, 
              in the form of {x1, y1, x2, y2, ...}.
        - Returns:
            -  shape: <ChainShape> The new shape.

------------------------------------------------------------------------------
1.11.5. newCircleShape                           *love.physics.newCircleShape*

Creates a new CircleShape.

Variants:
    1:
        - Arguments:
            -  radius: <number> The radius of the circle.
        - Returns:
            -  shape: <CircleShape> The new shape.
    2:
        - Arguments:
            -  x: <number> The x offset of the circle.
            -  y: <number> The y offset of the circle.
            -  radius: <number> The radius of the circle.
        - Returns:
            -  shape: <CircleShape> The new shape.

------------------------------------------------------------------------------
1.11.6. newDistanceJoint                       *love.physics.newDistanceJoint*

Create a distance joint between two bodies. This joint constrains the 
distance between two points on two bodies to be constant. These two points 
are specified in world coordinates and the two bodies are assumed to be in 
place when this joint is created. The first anchor point is connected to the 
first body and the second to the second body, and the points define the 
length of the distance joint.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body to attach to the joint.
            -  body2: <Body> The second body to attach to the joint.
            -  x1: <number> The x position of the first anchor point.
            -  y1: <number> The y position of the first anchor point.
            -  x2: <number> The x position of the second anchor point.
            -  y2: <number> The y position of the second anchor point.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <DistanceJoint> The new distance joint.

------------------------------------------------------------------------------
1.11.7. newEdgeShape                               *love.physics.newEdgeShape*

Creates a edge shape.

Variants:
    1:
        - Arguments:
            -  x1: <number> The x position of the first point.
            -  y1: <number> The y position of the first point.
            -  x2: <number> The x position of the second point.
            -  y2: <number> The y position of the second point.
        - Returns:
            -  shape: <EdgeShape> The new shape.

------------------------------------------------------------------------------
1.11.8. newFixture                                   *love.physics.newFixture*

Creates and attaches a Fixture to a body.

Variants:
    1:
        - Arguments:
            -  body: <Body> The body which gets the fixture attached.
            -  shape: <Shape> The shape of the fixture.
            -  density: <number> The density of the fixture.
        - Returns:
            -  fixture: <Fixture> The new fixture.

------------------------------------------------------------------------------
1.11.9. newFrictionJoint                       *love.physics.newFrictionJoint*

Create a friction joint between two bodies. A FrictionJoint applies friction 
to a body.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body to attach to the joint.
            -  body2: <Body> The second body to attach to the joint.
            -  x: <number> The x position of the anchor point.
            -  y: <number> The y position of the anchor point.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with eachother.
        - Returns:
            -  joint: <FrictionJoint> The new FrictionJoint.

------------------------------------------------------------------------------
1.11.10. newGearJoint                              *love.physics.newGearJoint*

Create a gear joint connecting two joints. The gear joint connects two joints 
that must be either prismatic or revolute joints. Using this joint requires 
that the joints it uses connect their respective bodies to the ground and 
have the ground as the first body. When destroying the bodies and joints you 
must make sure you destroy the gear joint before the other joints. The gear 
joint has a ratio the determines how the angular or distance values of the 
connected joints relate to each other. The formula coordinate1 + ratio * 
coordinate2 always has a constant value that is set when the gear joint is 
created.

Variants:
    1:
        - Arguments:
            -  joint1: <Joint> The first joint to connect with a gear joint.
            -  joint2: <Joint> The second joint to connect with a gear joint.
            -  ratio: <number> The gear ratio.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <Joint> The new gear joint.

------------------------------------------------------------------------------
1.11.11. newMotorJoint                            *love.physics.newMotorJoint*

Creates a joint between two bodies which controls the relative motion between 
them. Position and rotation offsets can be specified once the MotorJoint has 
been created, as well as the maximum motor force and torque that will be be 
applied to reach the target offsets.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body to attach to the joint.
            -  body2: <Body> The second body to attach to the joint.
            -  correctionFactor: <number> The joint's initial position 
              correction factor, in the range of [0, 1].
        - Returns:
            -  joint: <MotorJoint> The new MotorJoint.
    2:
        - Arguments:
            -  body1: <Body> The first body to attach to the joint.
            -  body2: <Body> The second body to attach to the joint.
            -  correctionFactor: <number> The joint's initial position 
              correction factor, in the range of [0, 1].
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <MotorJoint> The new MotorJoint.

------------------------------------------------------------------------------
1.11.12. newMouseJoint                            *love.physics.newMouseJoint*

Create a joint between a body and the mouse. This joint actually connects the 
body to a fixed point in the world. To make it follow the mouse, the fixed 
point must be updated every timestep (example below). The advantage of using 
a MouseJoint instead of just changing a body position directly is that 
collisions and reactions to other joints are handled by the physics engine.

Variants:
    1:
        - Arguments:
            -  body: <Body> The body to attach to the mouse.
            -  x: <number> The x position of the connecting point.
            -  y: <number> The y position of the connecting point.
        - Returns:
            -  joint: <Joint> The new mouse joint.

------------------------------------------------------------------------------
1.11.13. newPolygonShape                        *love.physics.newPolygonShape*

Creates a new PolygonShape. This shape can have 8 vertices at most, and must 
form a convex shape.

Variants:
    1:
        - Arguments:
            -  x1: <number> The position of first point on the x-axis.
            -  y1: <number> The position of first point on the y-axis.
            -  x2: <number> The position of second point on the x-axis.
            -  y2: <number> The position of second point on the y-axis.
            -  ...: <number> You can continue passing more point positions to 
              create the PolygonShape.
        - Returns:
            -  shape: <PolygonShape> A new PolygonShape.
    2:
        - Arguments:
            -  vertices: <table> A list of vertices to construct the polygon, 
              in the form of {x1, y1, x2, y2, x3, y3, ...}.
        - Returns:
            -  shape: <PolygonShape> A new PolygonShape.

------------------------------------------------------------------------------
1.11.14. newPrismaticJoint                    *love.physics.newPrismaticJoint*

Create a prismatic joints between two bodies. A prismatic joint constrains 
two bodies to move relatively to each other on a specified axis. It does not 
allow for relative rotation. Its definition and operation are similar to a 
revolute joint, but with translation and force substituted for angle and 
torque.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body to connect with a prismatic 
              joint.
            -  body2: <Body> The second body to connect with a prismatic 
              joint.
            -  x: <number> The x coordinate of the anchor point.
            -  y: <number> The y coordinate of the anchor point.
            -  ax: <number> The x coordinate of the axis unit vector.
            -  ay: <number> The y coordinate of the axis unit vector.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <PrismaticJoint> The new prismatic joint.
    2:
        - Arguments:
            -  body1: <Body> The first body to connect with a prismatic 
              joint.
            -  body2: <Body> The second body to connect with a prismatic 
              joint.
            -  x1: <number> The x coordinate of the first anchor point.
            -  y1: <number> The y coordinate of the first anchor point.
            -  x2: <number> The x coordinate of the second anchor point.
            -  y2: <number> The y coordinate of the second anchor point.
            -  ax: <number> The x coordinate of the axis unit vector.
            -  ay: <number> The y coordinate of the axis unit vector.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <PrismaticJoint> The new prismatic joint.

------------------------------------------------------------------------------
1.11.15. newPulleyJoint                          *love.physics.newPulleyJoint*

Create a pulley joint to join two bodies to each other and the ground. The 
pulley joint simulates a pulley with an optional block and tackle. If the 
ratio parameter has a value different from one, then the simulated rope 
extends faster on one side than the other. In a pulley joint the total length 
of the simulated rope is the constant length1 + ratio * length2, which is set 
when the pulley joint is created. Pulley joints can behave unpredictably if 
one side is fully extended. It is recommended that the method setMaxLengths 
be used to constrain the maximum lengths each side can attain.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body to connect with a pulley joint.
            -  body2: <Body> The second body to connect with a pulley joint.
            -  gx1: <number> The x coordinate of the first body's ground 
              anchor.
            -  gy1: <number> The y coordinate of the first body's ground 
              anchor.
            -  gx2: <number> The x coordinate of the second body's ground 
              anchor.
            -  gy2: <number> The y coordinate of the second body's ground 
              anchor.
            -  x1: <number> The x coordinate of the pulley joint anchor in 
              the first body.
            -  y1: <number> The y coordinate of the pulley joint anchor in 
              the first body.
            -  x2: <number> The x coordinate of the pulley joint anchor in 
              the second body.
            -  y2: <number> The y coordinate of the pulley joint anchor in 
              the second body.
            -  ratio: <number> The joint ratio.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <Joint> The new pulley joint.

------------------------------------------------------------------------------
1.11.16. newRectangleShape                    *love.physics.newRectangleShape*

Shorthand for creating rectangluar PolygonShapes. By default, the local 
origin is located at the center of the rectangle as opposed to the top left 
for graphics.

Variants:
    1:
        - Arguments:
            -  width: <number> The width of the rectangle.
            -  height: <number> The height of the rectangle.
        - Returns:
            -  shape: <PolygonShape> A new PolygonShape.
    2:
        - Arguments:
            -  x: <number> The offset along the x-axis.
            -  y: <number> The offset along the y-axis.
            -  width: <number> The width of the rectangle.
            -  height: <number> The height of the rectangle.
            -  angle: <number> The initial angle of the rectangle.
        - Returns:
            -  shape: <PolygonShape> A new PolygonShape.

------------------------------------------------------------------------------
1.11.17. newRevoluteJoint                      *love.physics.newRevoluteJoint*

Creates a pivot joint between two bodies. This joint connects two bodies to a 
point around which they can pivot.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body to connect with a Revolute Joint.
            -  body2: <Body> The second body to connect with a Revolute 
              Joint.
            -  x: <number> The x position of the connecting point.
            -  y: <number> The y position of the connecting point.
            -  collideConnected: <number> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <Joint> The new revolute joint.

------------------------------------------------------------------------------
1.11.18. newRopeJoint                              *love.physics.newRopeJoint*

Create a joint between two bodies. Its only function is enforcing a max 
distance between these bodies.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body to attach to the joint.
            -  body2: <Body> The second body to attach to the joint.
            -  x1: <number> The x position of the first anchor point.
            -  y1: <number> The y position of the first anchor point.
            -  x2: <number> The x position of the second anchor point.
            -  y2: <number> The y position of the second anchor point.
            -  maxLength: <number> The maximum distance for the bodies.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <RopeJoint> The new RopeJoint.

------------------------------------------------------------------------------
1.11.19. newWeldJoint                              *love.physics.newWeldJoint*

Create a friction joint between two bodies. A WeldJoint essentially glues two 
bodies together.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body to attach to the joint.
            -  body2: <Body> The second body to attach to the joint.
            -  x: <number> The x position of the anchor point.
            -  y: <number> The y position of the anchor point.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <WeldJoint> The new WeldJoint.

------------------------------------------------------------------------------
1.11.20. newWheelJoint                            *love.physics.newWheelJoint*

Creates a wheel joint.

Variants:
    1:
        - Arguments:
            -  body1: <Body> The first body.
            -  body2: <Body> The second body.
            -  x: <number> The x position of the anchor point.
            -  y: <number> The y position of the anchor point.
            -  ax: <number> The x position of the axis unit vector.
            -  ay: <number> The y position of the axis unit vector.
            -  collideConnected: <boolean> Specifies whether the two bodies 
              should collide with each other.
        - Returns:
            -  joint: <WheelJoint> The new WheelJoint.

------------------------------------------------------------------------------
1.11.21. newWorld                                      *love.physics.newWorld*

Creates a new World.

Variants:
    1:
        - Arguments:
            -  xg: <number> The x component of gravity.
            -  yg: <number> The y component of gravity.
            -  sleep: <boolean> Whether the bodies in this world are allowed 
              to sleep.
        - Returns:
            -  world: <World> A brave new World.

------------------------------------------------------------------------------
1.11.22. setMeter                                      *love.physics.setMeter*

Sets the pixels to meter scale factor. All coordinates in the physics module 
are divided by this number and converted to meters, and it creates a 
convenient way to draw the objects directly to the screen without the need 
for graphics transformations. It is recommended to create shapes no larger 
than 10 times the scale. This is important because Box2D is tuned to work 
well with shape sizes from 0.1 to 10 meters. The default meter scale is 30. 
love.physics.setMeter does not apply retroactively to created objects. 
Created objects retain their meter coordinates but the scale factor will 
affect their pixel coordinates.

Variants:
    1:
        - Arguments:
            -  scale: <number> The scale factor as an integer.
        - Returns: Nothing

------------------------------------------------------------------------------
1.12. sound                                                       *love.sound*

This module is responsible for decoding sound files. It can't play the sounds, see love.audio for that.

- Types: 
    - Decoder                                                   *love-Decoder*
    - SoundData                                               *love-SoundData*
- Enums: None

------------------------------------------------------------------------------
1.12.1. newDecoder                                     *love.sound.newDecoder*

Attempts to find a decoder for the encoded sound data in the specified file.

Variants:
    1:
        - Arguments:
            -  file: <File> The file with encoded sound data.
            -  buffer: <number> The size of each decoded chunk, in bytes.
        - Returns:
            -  decoder: <Decoder> A new Decoder object.
    2:
        - Arguments:
            -  filename: <string> The filename of the file with encoded sound 
              data.
            -  buffer: <number> The size of each decoded chunk, in bytes.
        - Returns:
            -  decoder: <Decoder> A new Decoder object.

------------------------------------------------------------------------------
1.12.2. newSoundData                                 *love.sound.newSoundData*

Creates new SoundData from a file. It's also possible to create SoundData 
with a custom sample rate, channel and bit depth. The sound data will be 
decoded to the memory in a raw format. It is recommended to create only short 
sounds like effects, as a 3 minute song uses 30 MB of memory this way.

Variants:
    1:
        - Arguments:
            -  filename: <string> The filename of the file to load.
        - Returns:
            -  soundData: <SoundData> A new SoundData object.
    2:
        - Arguments:
            -  file: <File> A File pointing to an audio file.
        - Returns:
            -  soundData: <SoundData> A new SoundData object.
    3:
        - Arguments:
            -  data: <Data> The encoded data to decode into audio.
        - Returns:
            -  soundData: <SoundData> A new SoundData object.
    4:
        - Arguments:
            -  samples: <number> Total number of samples.
            -  rate: <number> Number of samples per second
            -  bits: <number> Bits per sample (8 or 16).
            -  channels: <number> Either 1 for mono or 2 for stereo.
        - Returns:
            -  soundData: <SoundData> A new SoundData object.

------------------------------------------------------------------------------
1.13. system                                                     *love.system*

Provides access to information about the user's system.

- Types: None
- Enums: 
    - PowerState                                             *love-PowerState*

------------------------------------------------------------------------------
1.13.1. getClipboardText                        *love.system.getClipboardText*

Gets text from the clipboard.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  text: <string> The text currently held in the system's 
              clipboard.

------------------------------------------------------------------------------
1.13.2. getOS                                              *love.system.getOS*

Gets the current operating system. In general, LÖVE abstracts away the need 
to know the current operating system, but there are a few cases where it can 
be useful (especially in combination with os.execute.)

Variants:
    1:
        - Arguments: None
        - Returns:
            -  osString: <string> The current operating system. "OS X", 
              "Windows", "Linux", "Android" or "iOS".

------------------------------------------------------------------------------
1.13.3. getPowerInfo                                *love.system.getPowerInfo*

Gets information about the system's power supply.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  state: <PowerState> The basic state of the power supply.
            -  percent: <number> Percentage of battery life left, between 0 
              and 100. nil if the value can't be determined or there's no battery.
            -  seconds: <number> Seconds of battery life left. nil if the 
              value can't be determined or there's no battery.

------------------------------------------------------------------------------
1.13.4. getProcessorCount                      *love.system.getProcessorCount*

Gets the number of CPU cores in the system. The number includes the threads 
reported if technologies such as Intel's Hyper-threading are enabled. For 
example, on a 4-core CPU with Hyper-threading, this function will return 8.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  cores: <number> Gets the number of CPU cores in the system.

------------------------------------------------------------------------------
1.13.5. openURL                                          *love.system.openURL*

Opens a URL with the user's web or file browser.

Variants:
    1:
        - Arguments:
            -  url: <string> The URL to open. Must be formatted as a proper 
              URL. To open a file or folder, "file://" must be prepended to the path.
        - Returns:
            -  success: <boolean> Whether the URL was opened successfully.

------------------------------------------------------------------------------
1.13.6. setClipboardText                        *love.system.setClipboardText*

Puts text in the clipboard.

Variants:
    1:
        - Arguments:
            -  text: <string> The new text to hold in the system's clipboard.
        - Returns: Nothing

------------------------------------------------------------------------------
1.13.7. vibrate                                          *love.system.vibrate*

Causes the device to vibrate, if possible. Currently this will only work on 
Android and iOS devices that have a built-in vibration motor.

Variants:
    1:
        - Arguments:
            -  seconds: <number> The duration to vibrate for. If called on an 
              iOS device, it will always vibrate for 0.5 seconds due to limitations in the 
              iOS system APIs.
        - Returns: Nothing

------------------------------------------------------------------------------
1.14. thread                                                     *love.thread*

Allows you to work with threads.

Threads are separate Lua environments, running in parallel to the main code. As their code runs separately, they can be used to compute complex operations without adversely affecting the frame rate of the main thread. However, as they are separate environments, they cannot access the variables and functions of the main thread, and communication between threads is limited.

All LOVE objects (userdata) are shared among threads so you'll only have to send their references across threads. You may run into concurrency issues if you manipulate an object on multiple threads at the same time.

When a Thread is started, it only loads the love.thread module. Every other module has to be loaded with require.

- Types: 
    - Thread                                                     *love-Thread*
    - Channel                                                   *love-Channel*
- Enums: None

------------------------------------------------------------------------------
1.14.1. getChannel                                    *love.thread.getChannel*

Creates or retrieves a named thread channel.

Variants:
    1:
        - Arguments:
            -  name: <string> The name of the channel you want to create or 
              retrieve.
        - Returns:
            -  channel: <Channel> A named channel object which can be further 
              manipulated.

------------------------------------------------------------------------------
1.14.2. newChannel                                    *love.thread.newChannel*

Create a new unnamed thread channel. One use for them is to pass new unnamed 
channels to other threads via Channel:push

Variants:
    1:
        - Arguments: None
        - Returns:
            -  channel: <Channel> A unnamed channel object which can be 
              further manipulated.

------------------------------------------------------------------------------
1.14.3. newThread                                      *love.thread.newThread*

Creates a new Thread from a File or Data object.

Variants:
    1:
        - Arguments:
            -  filename: <string> The name of the Lua File to use as source.
        - Returns:
            -  thread: <Thread> A new Thread that has yet to be started.
    2:
        - Arguments:
            -  fileData: <FileData> The FileData containing the Lua code to 
              use as the source.
        - Returns:
            -  thread: <Thread> A new Thread that has yet to be started.
    3:
        - Arguments:
            -  codestring: <string> A string containing the Lua code to use 
              as the source. It needs to either be at least 1024 characters long, or 
              contain at least one newline.
        - Returns:
            -  thread: <Thread> A new Thread that has yet to be started.

------------------------------------------------------------------------------
1.15. timer                                                       *love.timer*

Provides an interface to the user's clock.

- Types: None
- Enums: None

------------------------------------------------------------------------------
1.15.1. getAverageDelta                           *love.timer.getAverageDelta*

Returns the average delta time (seconds per frame) over the last second.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  delta: <number> The average delta time over the last second.

------------------------------------------------------------------------------
1.15.2. getDelta                                         *love.timer.getDelta*

Returns the time between the last two frames.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  dt: <number> The time passed (in seconds).

------------------------------------------------------------------------------
1.15.3. getFPS                                             *love.timer.getFPS*

Returns the current frames per second.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  fps: <number> The current FPS.

------------------------------------------------------------------------------
1.15.4. getTime                                           *love.timer.getTime*

Returns the value of a timer with an unspecified starting time. This function 
should only be used to calculate differences between points in time, as the 
starting time of the timer is unknown.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  time: <number> The time in seconds.

------------------------------------------------------------------------------
1.15.5. sleep                                               *love.timer.sleep*

Sleeps the program for the specified amount of time.

Variants:
    1:
        - Arguments:
            -  s: <number> Seconds to sleep for.
        - Returns: Nothing

------------------------------------------------------------------------------
1.15.6. step                                                 *love.timer.step*

Measures the time between two frames. Calling this changes the return value 
of love.timer.getDelta.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.16. touch                                                       *love.touch*

Provides an interface to touch-screen presses.

- Types: None
- Enums: None

------------------------------------------------------------------------------
1.16.1. getPosition                                   *love.touch.getPosition*

Gets the current position of the specified touch-press, in pixels.

Variants:
    1:
        - Arguments:
            -  id: <light userdata> The identifier of the touch-press. Use 
              love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch 
              id values.
        - Returns:
            -  x: <number> The position along the x-axis of the touch-press 
              inside the window, in pixels.
            -  y: <number> The position along the y-axis of the touch-press 
              inside the window, in pixels.

------------------------------------------------------------------------------
1.16.2. getPressure                                   *love.touch.getPressure*

Gets the current pressure of the specified touch-press.

Variants:
    1:
        - Arguments:
            -  id: <light userdata> The identifier of the touch-press. Use 
              love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch 
              id values.
        - Returns:
            -  pressure: <number> The pressure of the touch-press. Most touch 
              screens aren't pressure sensitive, in which case the pressure will be 1.

------------------------------------------------------------------------------
1.16.3. getTouches                                     *love.touch.getTouches*

Gets a list of all active touch-presses.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  touches: <table> A list of active touch-press id values, which 
              can be used with love.touch.getPosition.

------------------------------------------------------------------------------
1.17. video                                                       *love.video*

This module is responsible for decoding, controlling, and streaming video files.

It can't draw the videos, see love.graphics.newVideo and Video objects for that.

- Types: 
    - VideoStream                                           *love-VideoStream*
- Enums: None

------------------------------------------------------------------------------
1.17.1. newVideoStream                             *love.video.newVideoStream*

Creates a new VideoStream. Currently only Ogg Theora video files are 
supported. VideoStreams can't draw videos, see love.graphics.newVideo for 
that.

Variants:
    1:
        - Arguments:
            -  filename: <string> The file path to the Ogg Theora video file.
        - Returns:
            -  videostream: <VideoStream> A new VideoStream.
    2:
        - Arguments:
            -  file: <File> The File object containing the Ogg Theora video.
        - Returns:
            -  videostream: <VideoStream> A new VideoStream.

------------------------------------------------------------------------------
1.18. window                                                     *love.window*

Provides an interface for modifying and retrieving information about the program's window.

- Types: None
- Enums: 
    - FullscreenType                                     *love-FullscreenType*
    - MessageBoxType                                     *love-MessageBoxType*

------------------------------------------------------------------------------
1.18.1. close                                              *love.window.close*

Closes the window. It can be reopened with love.window.setMode.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.18.2. fromPixels                                    *love.window.fromPixels*

Converts a number from pixels to density-independent units. The pixel density 
inside the window might be greater (or smaller) than the "size" of the 
window. For example on a retina screen in Mac OS X with the highdpi window 
flag enabled, the window may take up the same physical size as an 800x600 
window, but the area inside the window uses 1600x1200 pixels. 
love.window.fromPixels(1600) would return 800 in that case. This function 
converts coordinates from pixels to the size users are expecting them to 
display at onscreen. love.window.toPixels does the opposite. The highdpi 
window flag must be enabled to use the full pixel density of a Retina screen 
on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, 
and on Android it is effectively always enabled. Most LÖVE functions return 
values and expect arguments in terms of pixels rather than 
density-independent units.

Variants:
    1:
        - Arguments:
            -  pixelvalue: <number> A number in pixels to convert to 
              density-independent units.
        - Returns:
            -  value: <number> The converted number, in density-independent 
              units.
    2:
        - Arguments:
            -  px: <number> The x-axis value of a coordinate in pixels.
            -  py: <number> The y-axis value of a coordinate in pixels.
        - Returns:
            -  x: <number> The converted x-axis value of the coordinate, in 
              density-independent units.
            -  y: <number> The converted y-axis value of the coordinate, in 
              density-independent units.

------------------------------------------------------------------------------
1.18.3. getDisplayName                            *love.window.getDisplayName*

Gets the name of a display.

Variants:
    1:
        - Arguments:
            -  displayindex: <number> The index of the display to get the 
              name of.
        - Returns:
            -  name: <string> The name of the specified display.

------------------------------------------------------------------------------
1.18.4. getFullscreen                              *love.window.getFullscreen*

Gets whether the window is fullscreen.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  fullscreen: <boolean> True if the window is fullscreen, false 
              otherwise.
            -  fstype: <FullscreenType> The type of fullscreen mode used.

------------------------------------------------------------------------------
1.18.5. getFullscreenModes                    *love.window.getFullscreenModes*

Gets a list of supported fullscreen modes.

Variants:
    1:
        - Arguments:
            -  display: <number> The index of the display, if multiple 
              monitors are available.
        - Returns:
            -  modes: <table> A table of width/height pairs. (Note that this 
              may not be in order.)

------------------------------------------------------------------------------
1.18.6. getIcon                                          *love.window.getIcon*

Gets the window icon.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  imagedata: <ImageData> The window icon imagedata, or nil of no 
              icon has been set with love.window.setIcon.

------------------------------------------------------------------------------
1.18.7. getMode                                          *love.window.getMode*

Returns the current display mode.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  width: <number> Window width.
            -  height: <number> Window height.
            -  flags: <table> Table containing the window properties.

------------------------------------------------------------------------------
1.18.8. getPixelScale                              *love.window.getPixelScale*

Gets the DPI scale factor associated with the window. The pixel density 
inside the window might be greater (or smaller) than the "size" of the 
window. For example on a retina screen in Mac OS X with the highdpi window 
flag enabled, the window may take up the same physical size as an 800x600 
window, but the area inside the window uses 1600x1200 pixels. 
love.window.getPixelScale() would return 2.0 in that case. The 
love.window.fromPixels and love.window.toPixels functions can also be used to 
convert between units. The highdpi window flag must be enabled to use the 
full pixel density of a Retina screen on Mac OS X and iOS. The flag currently 
does nothing on Windows and Linux, and on Android it is effectively always 
enabled.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  scale: <number> The pixel scale factor associated with the 
              window.

------------------------------------------------------------------------------
1.18.9. getPosition                                  *love.window.getPosition*

Gets the position of the window on the screen. The window position is in the 
coordinate space of the display it is currently in.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  x: <number> The x-coordinate of the window's position.
            -  y: <number> The y-coordinate of the window's position.
            -  display: <number> The index of the display that the window is 
              in.

------------------------------------------------------------------------------
1.18.10. getTitle                                       *love.window.getTitle*

Gets the window title.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  title: <string> The current window title.

------------------------------------------------------------------------------
1.18.11. hasFocus                                       *love.window.hasFocus*

Checks if the game window has keyboard focus.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  focus: <boolean> True if the window has the focus or false if 
              not.

------------------------------------------------------------------------------
1.18.12. hasMouseFocus                             *love.window.hasMouseFocus*

Checks if the game window has mouse focus.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  focus: <boolean> True if the window has mouse focus or false 
              if not.

------------------------------------------------------------------------------
1.18.13. isCreated                                     *love.window.isCreated*

Checks if the window has been created.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  created: <boolean> True if the window has been created, false 
              otherwise.

------------------------------------------------------------------------------
1.18.14. isDisplaySleepEnabled             *love.window.isDisplaySleepEnabled*

Gets whether the display is allowed to sleep while the program is running. 
Display sleep is disabled by default. Some types of input (e.g. joystick 
button presses) might not prevent the display from sleeping, if display sleep 
is allowed.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  enabled: <boolean> True if system display sleep is enabled / 
              allowed, false otherwise.

------------------------------------------------------------------------------
1.18.15. isVisible                                     *love.window.isVisible*

Checks if the game window is visible. The window is considered visible if 
it's not minimized and the program isn't hidden.

Variants:
    1:
        - Arguments: None
        - Returns:
            -  visible: <boolean> True if the window is visible or false if 
              not.

------------------------------------------------------------------------------
1.18.16. maximize                                       *love.window.maximize*

Makes the window as large as possible. This function has no effect if the 
window isn't resizable, since it essentially programmatically presses the 
window's "maximize" button.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.18.17. minimize                                       *love.window.minimize*

Minimizes the window to the system's task bar / dock.

Variants:
    1:
        - Arguments: None
        - Returns: Nothing

------------------------------------------------------------------------------
1.18.18. requestAttention                       *love.window.requestAttention*

Causes the window to request the attention of the user if it is not in the 
foreground. In Windows the taskbar icon will flash, and in OS X the dock icon 
will bounce.

Variants:
    1:
        - Arguments:
            -  continuous: <boolean> Whether to continuously request 
              attention until the window becomes active, or to do it only once.
        - Returns: Nothing

------------------------------------------------------------------------------
1.18.19. setDisplaySleepEnabled           *love.window.setDisplaySleepEnabled*

Sets whether the display is allowed to sleep while the program is running. 
Display sleep is disabled by default. Some types of input (e.g. joystick 
button presses) might not prevent the display from sleeping, if display sleep 
is allowed.

Variants:
    1:
        - Arguments:
            -  enable: <boolean> True to enable system display sleep, false 
              to disable it.
        - Returns: Nothing

------------------------------------------------------------------------------
1.18.20. setFullscreen                             *love.window.setFullscreen*

Enters or exits fullscreen. The display to use when entering fullscreen is 
chosen based on which display the window is currently in, if multiple 
monitors are connected. If fullscreen mode is entered and the window size 
doesn't match one of the monitor's display modes (in normal fullscreen mode) 
or the window size doesn't match the desktop size (in 'desktop' fullscreen 
mode), the window will be resized appropriately. The window will revert back 
to its original size again when fullscreen mode is exited using this 
function.

Variants:
    1:
        - Arguments:
            -  fullscreen: <boolean> Whether to enter or exit fullscreen 
              mode.
        - Returns:
            -  success: <boolean> True if successful, false otherwise.
    2:
        - Arguments:
            -  fullscreen: <boolean> Whether to enter or exit fullscreen 
              mode.
            -  fstype: <FullscreenType> The type of fullscreen mode to use.
        - Returns:
            -  success: <boolean> True if successful, false otherwise.

------------------------------------------------------------------------------
1.18.21. setIcon                                         *love.window.setIcon*

Sets the window icon until the game is quit. Not all operating systems 
support very large icon images.

Variants:
    1:
        - Arguments:
            -  imagedata: <ImageData> The window icon image.
        - Returns:
            -  success: <boolean> Whether the icon has been set successfully.

------------------------------------------------------------------------------
1.18.22. setMode                                         *love.window.setMode*

Sets the display mode and properties of the window. If width or height is 0, 
setMode will use the width and height of the desktop. Changing the display 
mode may have side effects: for example, canvases will be cleared and values 
sent to shaders with Shader:send will be erased. Make sure to save the 
contents of canvases beforehand or re-draw to them afterward if you need to.

Variants:
    1:
        - Arguments:
            -  width: <number> Display width.
            -  height: <number> Display height.
            -  flags: <table> The flags table with the options:
        - Returns:
            -  success: <boolean> True if successful, false otherwise.

------------------------------------------------------------------------------
1.18.23. setPosition                                 *love.window.setPosition*

Sets the position of the window on the screen. The window position is in the 
coordinate space of the specified display.

Variants:
    1:
        - Arguments:
            -  x: <number> The x-coordinate of the window's position.
            -  y: <number> The y-coordinate of the window's position.
            -  display: <number> The index of the display that the new window 
              position is relative to.
        - Returns: Nothing

------------------------------------------------------------------------------
1.18.24. setTitle                                       *love.window.setTitle*

Sets the window title.

Variants:
    1:
        - Arguments:
            -  title: <string> The new window title.
        - Returns: Nothing

------------------------------------------------------------------------------
1.18.25. showMessageBox                           *love.window.showMessageBox*

Displays a message box dialog above the love window. The message box contains 
a title, optional text, and buttons.

Variants:
    1:
        - Arguments:
            -  title: <string> The title of the message box.
            -  message: <string> The text inside the message box.
            -  type: <MessageBoxType> The type of the message box.
            -  attachtowindow: <boolean> Whether the message box should be 
              attached to the love window or free-floating.
        - Returns:
            -  success: <boolean> Whether the message box was successfully 
              displayed.
    2:
        - Arguments:
            -  title: <string> The title of the message box.
            -  message: <string> The text inside the message box.
            -  buttonlist: <table> A table containing a list of button names 
              to show. The table can also contain the fields enterbutton and escapebutton, 
              which should be the index of the default button to use when the user presses 
              'enter' or 'escape', respectively.
            -  type: <MessageBoxType> The type of the message box.
            -  attachtowindow: <boolean> Whether the message box should be 
              attached to the love window or free-floating.
        - Returns:
            -  pressedbutton: <number> The index of the button pressed by the 
              user. May be 0 if the message box dialog was closed without pressing a 
              button.

------------------------------------------------------------------------------
1.18.26. toPixels                                       *love.window.toPixels*

Converts a number from density-independent units to pixels. The pixel density 
inside the window might be greater (or smaller) than the "size" of the 
window. For example on a retina screen in Mac OS X with the highdpi window 
flag enabled, the window may take up the same physical size as an 800x600 
window, but the area inside the window uses 1600x1200 pixels. 
love.window.toPixels(800) would return 1600 in that case. This is used to 
convert coordinates from the size users are expecting them to display at 
onscreen to pixels. love.window.fromPixels does the opposite. The highdpi 
window flag must be enabled to use the full pixel density of a Retina screen 
on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, 
and on Android it is effectively always enabled. Most LÖVE functions return 
values and expect arguments in terms of pixels rather than 
density-independent units.

Variants:
    1:
        - Arguments:
            -  value: <number> A number in density-independent units to 
              convert to pixels.
        - Returns:
            -  pixelvalue: <number> The converted number, in pixels.
    2:
        - Arguments:
            -  x: <number> The x-axis value of a coordinate in 
              density-independent units to convert to pixels.
            -  y: <number> The y-axis value of a coordinate in 
              density-independent units to convert to pixels.
        - Returns:
            -  px: <number> The converted x-axis value of the coordinate, in 
              pixels.
            -  py: <number> The converted y-axis value of the coordinate, in 
              pixels.
